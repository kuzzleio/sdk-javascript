{"version":3,"sources":["webpack://Kuzzle/webpack/universalModuleDefinition","webpack://Kuzzle/webpack/bootstrap","webpack://Kuzzle/./src/eventEmitter/index.js","webpack://Kuzzle/./src/Document.js","webpack://Kuzzle/./src/security/SecurityDocument.js","webpack://Kuzzle/./node_modules/uuid/v4.js","webpack://Kuzzle/./src/security/User.js","webpack://Kuzzle/./src/networkWrapper/protocols/abstract/realtime.js","webpack://Kuzzle/./src/Kuzzle.js","webpack://Kuzzle/./node_modules/uuid/lib/rng-browser.js","webpack://Kuzzle/./node_modules/uuid/lib/bytesToUuid.js","webpack://Kuzzle/./src/Collection.js","webpack://Kuzzle/./src/SearchResult.js","webpack://Kuzzle/./src/CollectionMapping.js","webpack://Kuzzle/./src/Room.js","webpack://Kuzzle/./src/security/Security.js","webpack://Kuzzle/./src/security/Role.js","webpack://Kuzzle/./src/security/Profile.js","webpack://Kuzzle/./src/MemoryStorage.js","webpack://Kuzzle/./src/networkWrapper/index.js","webpack://Kuzzle/./src/networkWrapper/protocols/websocket.js","webpack://Kuzzle/./src/networkWrapper/protocols/socketio.js"],"names":["root","factory","exports","module","define","amd","Kuzzle","window","e","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","prototype","hasOwnProperty","p","s","t","Symbol","iterator","constructor","length","writable","key","TypeError","Listener","fn","once","arguments","_classCallCheck","this","KuzzleEventEmitter","_events","listeners","Boolean","find","listener","eventName","map","listenerType","_typeof","Error","_exists","push","addListener","concat","addOnceListener","prependListener","index","findIndex","splice","onceListeners","_len","payload","Array","_key","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","next","done","apply","err","return","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","toDelete","removeListener","keys","Document","collection","documentId","content","meta","defineProperties","dataCollection","kuzzle","id","version","_version","setContent","bluebird","promisifyAll","suffix","filter","func","target","passes","indexOf","serialize","data","_id","body","toString","JSON","stringify","delete","options","cb","self","query","buildQueryArgs","exists","res","result","refresh","callbackRequired","error","newDocument","_source","_meta","save","publish","replace","forEach","subscribe","filters","ids","values","SecurityDocument","Security","deleteActionName","update","updateActionName","response","rng","bytesToUuid","buf","offset","rnds","random","ii","KuzzleSecurityDocument","User","credentials","create","setProfiles","profileIds","isArray","setCredentials","addProfile","profileId","creationSerialize","saveRestricted","getProfileIds","getProfiles","fetchedProfiles","errored","fetchProfile","profile","uuidv4","RTWrapper","host","_this","__proto__","getPrototypeOf","port","ssl","sslConnection","queuing","reconnectionDelay","autoReconnect","autoQueue","autoReplay","state","offlineQueue","queueFilter","queueMaxSize","queueTTL","replayInterval","offlineQueueLoader","opt","getOwnPropertyDescriptor","offlineMode","wasConnected","stopRetryingToConnect","retrying","startQueuing","emit","stopQueuing","playQueue","_this2","setTimeout","connect","cleanQueue","network","uniqueQueue","additionalQueue","request","requestId","action","controller","dequeuingProcess","emitRequest","shift","Math","max","notificationCB","_this3","on","channel","fromSelf","volatile","sdkInstanceId","removeAllListeners","queuable","ts","Date","now","jwt","message","assign","status","send","lastDocumentIndex","droppedRequest","Collection","MemoryStorage","networkWrapper","_ret","_possibleConstructorReturn","eventActions","autoResubscribe","defaultIndex","protocol","sdkVersion","room","opts","subscribeCB","scope","users","type","unsetJwt","copy","document","notify","unsubscribeCB","roomId","unsubscribe","errorMessagePrefix","callback","eventTimeout","connected","timeout","disconnected","reconnected","tokenExpired","loginAttempt","set","checkPropertyType","eumerable","_get2","protectedEvent","protectedEvents","lastEmitted","_get","connectionError","internal","disconnect","checkToken","valid","token","success","strategy","_this4","expiresIn","setJwt","_this5","_this6","security","hits","event","startTime","stopTime","_len2","args","_key2","collections","flushQueue","_len3","_key3","arg","indexes","close","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","serverInfo","_len4","_key4","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","_len5","_key5","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","autoRefresh","_len6","_key6","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","queryArgs","_arr","_i","prop","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","attr","typestr","getRandomValues","crypto","bind","msCrypto","rnds8","Uint8Array","byteToHex","substr","bth","KuzzleSearchResult","CollectionMapping","Room","count","createDocument","ifExist","doc","deleteDocument","deleteSpecifications","documentExists","fetchDocument","getMapping","mCreateDocument","documents","mCreateOrReplaceDocument","mDeleteDocument","documentIds","mGetDocument","mReplaceDocument","mUpdateDocument","getSpecifications","publishMessage","replaceDocument","search","scroll","scrollId","scrollSpecifications","searchSpecifications","evtName","truncate","updateDocument","retryOnConflict","updateSpecifications","specifications","validateSpecifications","collectionMapping","mapping","SearchResult","raw","total","aggregations","from","size","_scroll_id","fetched","freeze","whitelist","includes","updateAfterSearch","sort","search_after","lastDocumentContent","sortRule","properties","mappings","field","_roomId","roomstate","isListening","resubscribe","deactivate","resubscribeConditional","subscribeToSelf","onDone","Role","Profile","fetchRole","searchRoles","roles","createRole","replaceIfExist","updateRole","deleteRole","role","searchProfiles","profiles","createProfile","policies","updateProfile","updatedContent","deleteProfile","scrollProfiles","newProfile","fetchUser","searchUsers","createUser","replaceUser","createRestrictedUser","updateUser","deleteUser","scrollUsers","user","newUser","isActionAllowed","rights","filteredRights","right","some","item","getUserRights","userId","createCredentials","kuid","deleteCredentials","getAllCredentialFields","getCredentialFields","getCredentials","hasCredentials","updateCredentials","validateCredentials","addPolicy","policy","roleId","setPolicies","getPolicies","getId","required","getIdField","getKeys","getMember","getxScan","mapResults","mapScanResults","getZrange","assignZrangeOptions","mapZrangeResults","getZrangeBy","setId","setIdValue","commands","append","bitcount","bitop","bitpos","dbsize","decr","decrby","del","expire","expireat","flushdb","mapNoResult","geoadd","geodist","parseFloat","geohash","geopos","results","coords","latlon","georadius","assignGeoRadiusOptions","mapGeoRadiusResults","georadiusbymember","getbit","getrange","getset","hdel","hexists","hget","hgetall","hincrby","hincrbyfloat","hkeys","hlen","hmget","hmset","hscan","hset","hsetnx","hstrlen","hvals","incr","incrby","incrbyfloat","lindex","linsert","llen","lpop","lpush","lpushx","lrange","lrem","lset","ltrim","mget","mset","msetnx","persist","pexpire","pexpireat","pfadd","pfcount","pfmerge","ping","psetex","pttl","randomkey","rename","renamenx","rpop","rpoplpush","rpush","rpushx","sadd","scan","scard","sdiff","sdiffstore","setex","setnx","sinter","sinterstore","sismember","smembers","smove","spop","mapStringToArray","srandmember","srem","sscan","strlen","sunion","sunionstore","time","parseInt","touch","ttl","zadd","zcard","zcount","zincrby","zinterstore","zlexcount","zrange","zrangebylex","zrevrangebylex","zrangebyscore","zrank","zrem","zremrangebylex","zremrangebyrank","zremrangebyscore","zrevrange","zrevrangebyscore","zrevrank","zscan","zscore","zunionstore","assignParameter","parsed","limit","point","coordinates","coord","distance","buffer","mapped","member","score","cursor","command","slice","pop","param","WebSocket","io","WebSocketClient","WSNode","code","client","lasturl","url","perMessageDeflate","Function","u","onopen","clientConnected","onclose","closeEvent","reason","clientDisconnected","clientNetworkError","onerror","onmessage","parse","readyState","OPEN","SocketIO","socket","forceDisconnect","eventsWrapper","reconnection","forceNew","_addEventWrapper","off","wrapper","_event","Set","add"],"mappings":"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","file":"kuzzle.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Kuzzle\"] = factory();\n\telse\n\t\troot[\"Kuzzle\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","class Listener {\n  constructor(fn, once = false) {\n    this.fn = fn;\n    this.once = once;\n  }\n}\n\nclass KuzzleEventEmitter {\n  constructor() {\n    this._events = {};\n  }\n\n  _exists (listeners, fn) {\n    return Boolean(listeners.find(listener => listener.fn === fn));\n  }\n\n  listeners (eventName) {\n    if (this._events[eventName] === undefined) {\n      return [];\n    }\n\n    return this._events[eventName].map(listener => listener.fn);\n  }\n\n  addListener (eventName, listener, once = false) {\n    if (!eventName || !listener) {\n      return this;\n    }\n\n    const listenerType = typeof listener;\n\n    if (listenerType !== 'function') {\n      throw new Error(`Invalid listener type: expected a function, got a ${listenerType}`);\n    }\n\n    if (this._events[eventName] === undefined) {\n      this._events[eventName] = [];\n    }\n\n    if (!this._exists(this._events[eventName], listener)) {\n      this._events[eventName].push(new Listener(listener, once));\n    }\n\n    return this;\n  }\n\n  on (eventName, listener) {\n    return this.addListener(eventName, listener);\n  }\n\n  prependListener (eventName, listener, once = false) {\n    if (!eventName || !listener) {\n      return this;\n    }\n\n    if (this._events[eventName] === undefined) {\n      this._events[eventName] = [];\n    }\n\n    if (!this._exists(this._events[eventName], listener)) {\n      this._events[eventName] = [new Listener(listener, once)].concat(this._events[eventName]);\n    }\n\n    return this;\n  }\n\n  addOnceListener (eventName, listener) {\n    return this.addListener(eventName, listener, true);\n  }\n\n  once (eventName, listener) {\n    return this.addOnceListener(eventName, listener);\n  }\n\n  prependOnceListener (eventName, listener) {\n    return this.prependListener(eventName, listener, true);\n  }\n\n  removeListener (eventName, listener) {\n    const listeners = this._events[eventName];\n\n    if (!listeners || !listeners.length) {\n      return this;\n    }\n\n    const index = listeners.findIndex(l => l.fn === listener);\n\n    if (index !== -1) {\n      listeners.splice(index, 1);\n    }\n\n    if (listeners.length === 0) {\n      delete this._events[eventName];\n    }\n\n    return this;\n  }\n\n  removeAllListeners (eventName) {\n    if (eventName) {\n      delete this._events[eventName];\n    } else {\n      this._events = {};\n    }\n\n    return this;\n  }\n\n  emit (eventName, ...payload) {\n    const listeners = this._events[eventName];\n\n    if (listeners === undefined) {\n      return false;\n    }\n\n    const onceListeners = [];\n\n    for (const listener of listeners) {\n      listener.fn(...payload);\n\n      if (listener.once) {\n        onceListeners.push(listener.fn);\n      }\n    }\n\n    for (const toDelete of onceListeners) {\n      this.removeListener(eventName, toDelete);\n    }\n\n    return true;\n  }\n\n  eventNames () {\n    return Object.keys(this._events);\n  }\n\n  listenerCount (eventName) {\n    return this._events[eventName] && this._events[eventName].length || 0;\n  }\n}\n\nmodule.exports = KuzzleEventEmitter;\n","/**\n * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n *\n * @callback responseCallback\n * @param {Object} err - Error object, NULL if the query is successful\n * @param {Object} [data] - The content of the query response\n */\n\n/**\n * Kuzzle handles documents either as realtime messages or as stored documents.\n * Document is the object representation of one of these documents.\n *\n * Notes:\n *   - this constructor may be called either with a documentId, a content, neither or both.\n *   - providing a documentID to the constructor will automatically call refresh, unless a content is also provided\n *\n *\n * @param {Collection} collection - an instanciated Collection object\n * @param {string} [documentId] - ID of an existing document\n * @param {object} [content] - Initializes this document with the provided content\n * @param {object} [meta] - Initializes this document with the provided meta\n * @constructor\n */\nfunction Document(collection, documentId, content, meta) {\n  Object.defineProperties(this, {\n    // read-only properties\n    collection: {\n      value: collection.collection,\n      enumerable: true\n    },\n    dataCollection: {\n      value: collection,\n      enumerable: false\n    },\n    kuzzle: {\n      value: collection.kuzzle,\n      enumerable: false\n    },\n    // writable properties\n    id: {\n      value: undefined,\n      enumerable: true,\n      writable: true\n    },\n    content: {\n      value: {},\n      writable: true,\n      enumerable: true\n    },\n    version: {\n      value: undefined,\n      enumerable: true,\n      writable: true\n    },\n    meta: {\n      value: meta || {},\n      enumerable: true,\n      writable: false\n    }\n  });\n\n  // handling provided arguments\n  if (!content && documentId && typeof documentId === 'object') {\n    content = documentId;\n    documentId = null;\n  }\n\n  if (content) {\n    if (content._version) {\n      this.version = content._version;\n      delete content._version;\n    }\n    this.setContent(content, true);\n  }\n\n  if (documentId) {\n    Object.defineProperty(this, 'id', {\n      value: documentId,\n      enumerable: true\n    });\n  }\n\n  // promisifying\n  if (this.kuzzle.bluebird) {\n    return this.kuzzle.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var whitelist = ['delete', 'refresh', 'save'];\n\n        return passes && whitelist.indexOf(name) !== -1;\n      }\n    });\n  }\n\n  return this;\n}\n\n/**\n * Serialize this object into a JSON object\n *\n * @return {object} JSON object representing this document\n */\nDocument.prototype.serialize = function () {\n  var\n    data = {};\n\n  if (this.id) {\n    data._id = this.id;\n  }\n\n  if (this.version) {\n    data._version = this.version;\n  }\n\n  data.body = this.content;\n  data.meta = this.meta;\n\n  return data;\n};\n\n/**\n * Overrides the toString() method in order to return a serialized version of the document\n *\n * @return {string} serialized version of this object\n */\nDocument.prototype.toString = function () {\n  return JSON.stringify(this.serialize());\n};\n\n/**\n * Deletes this document in Kuzzle.\n *\n * Takes an optional argument object with the following properties:\n *    - volatile (object, default: null):\n *        Additional information passed to notifications to other users\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {*} this\n */\nDocument.prototype.delete = function (options, cb) {\n  var self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  if (!self.id) {\n    throw new Error('Document.delete: cannot delete a document without a document ID');\n  }\n\n  this.kuzzle.query(this.dataCollection.buildQueryArgs('document', 'delete'), this.serialize(), options, cb && function (err) {\n    cb(err, err ? undefined : self.id);\n  });\n};\n\n/**\n * Checks if this document exists in Kuzzle.\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {*} this\n */\nDocument.prototype.exists = function (options, cb) {\n  var self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  if (!self.id) {\n    throw new Error('Document.exists: cannot check if the document exists if no id has been provided');\n  }\n\n  this.kuzzle.query(this.dataCollection.buildQueryArgs('document', 'exists'), this.serialize(), options, cb && function (err, res) {\n    cb(err, err ? undefined : res.result);\n  });\n};\n\n/**\n * Replaces the current content with the last version of this document stored in Kuzzle.\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {*} this\n */\nDocument.prototype.refresh = function (options, cb) {\n  var self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  if (!self.id) {\n    throw new Error('Document.refresh: cannot retrieve a document if no ID has been provided');\n  }\n\n  this.kuzzle.callbackRequired('Document.refresh', cb);\n\n  self.kuzzle.query(self.dataCollection.buildQueryArgs('document', 'get'), {_id: self.id}, options, function (error, res) {\n    var newDocument;\n\n    if (error) {\n      return cb(error);\n    }\n\n    newDocument = new Document(self.dataCollection, self.id, res.result._source, res.result._meta);\n    newDocument.version = res.result._version;\n\n    cb(null, newDocument);\n  });\n};\n\n/**\n * Saves this document into Kuzzle.\n *\n * If this is a new document, this function will create it in Kuzzle and the id property will be made available.\n * Otherwise, this method will replace the latest version of this document in Kuzzle by the current content\n * of this object.\n *\n * Takes an optional argument object with the following properties:\n *    - volatile (object, default: null):\n *        Additional information passed to notifications to other users\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {*} this\n */\nDocument.prototype.save = function (options, cb) {\n  var\n    data = this.serialize(),\n    self = this;\n\n  if (options && cb === undefined && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.query(this.dataCollection.buildQueryArgs('document', 'createOrReplace'), data, options, function (error, res) {\n    if (error) {\n      return cb && cb(error);\n    }\n\n    self.id = res.result._id;\n    self.version = res.result._version;\n\n    if (cb) {\n      cb(null, self);\n    }\n  });\n\n  return self;\n};\n\n/**\n * Sends the content of this document as a realtime message.\n *\n * Takes an optional argument object with the following properties:\n *    - volatile (object, default: null):\n *        Additional information passed to notifications to other users\n *\n * @param {object} [options] - Optional parameters\n * @returns {*} this\n */\nDocument.prototype.publish = function (options) {\n  var data = this.serialize();\n\n  this.kuzzle.query(this.dataCollection.buildQueryArgs('realtime', 'publish'), data, options);\n\n  return this;\n};\n\n/**\n * Replaces the current content with new data.\n * Changes made by this function won’t be applied until the save method is called.\n *\n * @param {object} data - New content\n * @param {boolean} replace - if true: replace this document content with the provided data\n */\nDocument.prototype.setContent = function (data, replace) {\n  var self = this;\n\n  if (replace) {\n    this.content = data;\n  }\n  else {\n    Object.keys(data).forEach(function (key) {\n      self.content[key] = data[key];\n    });\n  }\n\n  return this;\n};\n\n/**\n * Listens to events concerning this document. Has no effect if the document does not have an ID\n * (i.e. if the document has not yet been created as a persisted document).\n *\n * @param {object} [options] - subscription options\n * @param {responseCallback} cb - callback that will be called each time a change has been detected on this document\n */\nDocument.prototype.subscribe = function (options, cb) {\n  var filters;\n\n  if (options && !cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.callbackRequired('Document.subscribe', cb);\n\n  if (!this.id) {\n    throw new Error('Document.subscribe: cannot subscribe to a document if no ID has been provided');\n  }\n\n  filters = { ids: { values: [this.id] } };\n\n  return this.dataCollection.subscribe(filters, options, cb);\n};\n\nmodule.exports = Document;\n","function SecurityDocument(Security, id, content, meta) {\n\n  if (!id) {\n    throw new Error('A security document must have an id');\n  }\n\n  // Define properties\n  Object.defineProperties(this, {\n    // private properties\n    kuzzle: {\n      value: Security.kuzzle\n    },\n    Security: {\n      value: Security\n    },\n    // read-only properties\n    // writable properties\n    id: {\n      value: id,\n      enumerable: true\n    },\n    content: {\n      value: {},\n      writable: true,\n      enumerable: true\n    },\n    meta: {\n      value: meta || {},\n      writable: true,\n      enumerable: true\n    }\n  });\n\n  if (content) {\n    this.setContent(content, true);\n  }\n\n  // promisifying\n  if (Security.kuzzle.bluebird) {\n    return Security.kuzzle.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var whitelist = ['delete', 'update'];\n\n        return passes && whitelist.indexOf(name) !== -1;\n      }\n    });\n  }\n}\n\n/**\n * Replaces the current content with new data.\n * Changes made by this function won’t be applied until the save method is called.\n *\n * @param {Object} data - New securityDocument content\n * @return {SecurityDocument} this\n */\nSecurityDocument.prototype.setContent = function (data) {\n  this.content = data;\n  return this;\n};\n\n/**\n * Serialize this object into a pojo\n *\n * @return {object} pojo representing this securityDocument\n */\nSecurityDocument.prototype.serialize = function () {\n  var\n    data = {};\n\n  if (this.id) {\n    data._id = this.id;\n  }\n\n  data.body = this.content;\n  data.meta = this.meta;\n\n  return data;\n};\n\n/**\n * Delete the current KuzzleSecurityDocument into Kuzzle.\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n */\nSecurityDocument.prototype.delete = function (options, cb) {\n  var\n    self = this;\n\n  if (options && cb === undefined && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.query(this.Security.buildQueryArgs(this.deleteActionName), {_id: this.id}, options, function (error, res) {\n    if (error) {\n      return cb ? cb(error) : false;\n    }\n\n    if (cb) {\n      cb(null, res.result._id);\n    }\n  });\n};\n\n/**\n * Update the current KuzzleSecurityDocument into Kuzzle.\n *\n * @param {object} content - Content to add to KuzzleSecurityDocument\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {SecurityDocument} this\n */\nSecurityDocument.prototype.update = function (content, options, cb) {\n  var\n    data = {},\n    self = this;\n\n  if (typeof content !== 'object') {\n    throw new Error('Parameter \"content\" must be a object');\n  }\n\n  if (options && cb === undefined && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data._id = self.id;\n  data.body = content;\n\n  self.kuzzle.query(this.Security.buildQueryArgs(this.updateActionName), data, options, function (error, response) {\n    if (error) {\n      return cb ? cb(error) : false;\n    }\n\n    self.setContent(response.result._source);\n\n    if (cb) {\n      cb(null, self);\n    }\n  });\n\n  return this;\n};\n\nmodule.exports = SecurityDocument;\n","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n","var\n  KuzzleSecurityDocument = require('./SecurityDocument');\n\n/**\n * @param {Security} Security\n * @param {string} id\n * @param {Object} content\n * @constructor\n */\nfunction User(Security, id, content, meta) {\n  KuzzleSecurityDocument.call(this, Security, id, content, meta);\n\n  // Define properties\n  Object.defineProperties(this, {\n    // private properties\n    deleteActionName: {\n      value: 'deleteUser'\n    },\n    updateActionName: {\n      value: 'updateUser'\n    },\n    credentials: {\n      value: {},\n      writable: true,\n      enumerable: true\n    }\n  });\n\n  // promisifying\n  if (Security.kuzzle.bluebird) {\n    return Security.kuzzle.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var whitelist = ['create', 'replace', 'saveRestricted', 'update', 'getProfiles'];\n\n        return passes && whitelist.indexOf(name) !== -1;\n      }\n    });\n  }\n}\n\nUser.prototype = Object.create(KuzzleSecurityDocument.prototype, {\n  constructor: {\n    value: User\n  }\n});\n\n/**\n * Set profiles in content\n * @param {array} profileIds - an array of profiles ids string\n *\n * @returns {User} this\n */\nUser.prototype.setProfiles = function (profileIds) {\n  if (!Array.isArray(profileIds) || typeof profileIds[0] !== 'string') {\n    throw new Error('Parameter \"profileIds\" must be an array of strings');\n  }\n\n  this.content.profileIds = profileIds;\n\n  return this;\n};\n\n/**\n * @param {object} credentials\n */\nUser.prototype.setCredentials = function (credentials) {\n  if (typeof credentials !== 'object') {\n    throw new Error('Parameter \"credentials\" must be a object');\n  }\n\n  this.credentials = credentials;\n\n  return this;\n};\n\n/**\n * Add a profile\n * @param {string} profileId - a profile ids string\n *\n * @returns {User} this\n */\nUser.prototype.addProfile = function (profileId) {\n  if (typeof profileId !== 'string') {\n    throw new Error('Parameter \"profileId\" must be a string');\n  }\n\n  if (!this.content.profileIds) {\n    this.content.profileIds = [];\n  }\n\n  if (this.content.profileIds.indexOf(profileId) === -1) {\n    this.content.profileIds.push(profileId);\n  }\n\n  return this;\n};\n\n/**\n * Creates this user into Kuzzle\n *\n * @param {object|responseCallback} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {User} this\n */\nUser.prototype.create = function (options, cb) {\n  var\n    data = this.creationSerialize(),\n    self = this;\n\n  if (!this.content.profileIds) {\n    throw new Error('Argument \"profileIds\" is mandatory in a user. This argument contains an array of profile identifiers.');\n  }\n\n  if (options && cb === undefined && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.query(this.Security.buildQueryArgs('createUser'), data, null, cb && function (err) {\n    cb(err, err ? undefined : self);\n  });\n\n  return this;\n};\n\n\n/**\n * Replaces the latest version of this user in Kuzzle by the current content of this object.\n *\n * @param {object|responseCallback} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {User} this\n */\nUser.prototype.replace = function (options, cb) {\n  var\n    data = this.serialize(),\n    self = this;\n\n  if (!this.content.profileIds) {\n    throw new Error('Argument \"profileIds\" is mandatory in a user. This argument contains an array of profile identifiers.');\n  }\n\n  if (options && cb === undefined && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n\n  this.kuzzle.query(this.Security.buildQueryArgs('replaceUser'), data, null, cb && function (err) {\n    cb(err, err ? undefined : self);\n  });\n\n  return this;\n};\n\n/**\n * Saves this user as restricted into Kuzzle.\n *\n * This function will create a new user. It is not usable to update an existing user.\n * The \"profileIds\" property must not be provided, or the request will be rejected by Kuzzle.\n * This function allows anonymous users to create a \"restricted\" user with predefined rights.\n *\n * @param {object|responseCallback} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {User} this\n */\nUser.prototype.saveRestricted = function (options, cb) {\n  var\n    data = this.serialize(),\n    self = this;\n\n  if (options && cb === undefined && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.query(this.Security.buildQueryArgs('createRestrictedUser'), data, options, cb && function (error) {\n    cb(error, error ? undefined : self);\n  });\n\n  return self;\n};\n\n/**\n * Serialize this object into a JSON object\n *\n * @return {object} JSON object representing this User\n */\nUser.prototype.serialize = function () {\n  return {_id: this.id, body: this.content, meta: this.meta};\n};\n\n/**\n * Serialize this object into a JSON object\n *\n * @return {object} JSON object representing this User\n */\nUser.prototype.creationSerialize = function () {\n  return {_id: this.id, body: {content: this.content, credentials: this.credentials, meta: this.meta}};\n};\n\n/**\n * Return the associated profiles IDs\n *\n * @return {array.<string>} the associated profiles IDs\n */\nUser.prototype.getProfileIds = function () {\n  return this.content.profileIds || [];\n};\n\n/**\n * Return the associated Profile objects\n *\n * @param {object|responseCallback} [options] - Optional parameters\n * @param {responseCallback} cb - Handles the query response\n */\nUser.prototype.getProfiles = function (options, cb) {\n  var \n    self = this,\n    fetchedProfiles = [],\n    errored = false;\n\n  if (options && !cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.Security.kuzzle.callbackRequired('User.getProfiles', cb);\n\n  if (!self.content.profileIds) {\n    return cb(null, fetchedProfiles);\n  }\n\n  self.content.profileIds.forEach(function (profileId) {\n    self.Security.fetchProfile(profileId, options, function (error, profile) {\n      if (error) {\n        if (errored) {\n          return;\n        }\n\n        errored = true; // prevents multiple callback resolutions\n        return cb(error);\n      }\n\n      fetchedProfiles.push(profile);\n\n      if (fetchedProfiles.length === self.content.profileIds.length) {\n        cb(null, fetchedProfiles);\n      }\n    });\n  });\n};\n\nmodule.exports = User;\n","'use strict';\n\nconst\n  uuidv4 = require('uuid/v4'),\n  KuzzleEventEmitter = require('../../../eventEmitter');\n\nclass RTWrapper extends KuzzleEventEmitter {\n\n  constructor (host, options) {\n    super();\n\n    Object.defineProperties(this, {\n      id: {\n        value: uuidv4()\n      },\n      host: {\n        value: host,\n        enumerable: true\n      },\n      port: {\n        value: (options && typeof options.port === 'number') ? options.port : 7512,\n        enumerable: true\n      },\n      ssl: {\n        value: (options && typeof options.sslConnection === 'boolean') ? options.sslConnection : false,\n        enumerable: true\n      },\n      queuing: {\n        value: false,\n        writable: true\n      },\n      reconnectionDelay: {\n        value: (options && typeof options.reconnectionDelay === 'number') ? options.reconnectionDelay : 1000,\n        enumerable: true\n      },\n      // configuration properties\n      autoReconnect: {\n        value: (options && typeof options.autoReconnect === 'boolean') ? options.autoReconnect : true,\n        enumerable: true\n      },\n      autoQueue: {\n        value: false,\n        enumerable: true,\n        writable: true\n      },\n      autoReplay: {\n        value: false,\n        enumerable: true,\n        writable: true\n      },\n      state: {\n        value: 'offline',\n        enumerable: true,\n        writable: true\n      },\n      /*\n        Offline queue use the following format:\n              [\n                {\n                  ts: <query timestamp>,\n                  query: 'query',\n                  cb: callbackFunction\n                }\n              ]\n       */\n      offlineQueue: {\n        value: [],\n        enumerable: true,\n        writable: true\n      },\n      queueFilter: {\n        value: null,\n        enumerable: true,\n        writable: true\n      },\n      queueMaxSize: {\n        value: 500,\n        enumerable: true,\n        writable: true\n      },\n      queueTTL: {\n        value: 120000,\n        enumerable: true,\n        writable: true\n      },\n      replayInterval: {\n        value: 10,\n        enumerable: true,\n        writable: true\n      },\n      offlineQueueLoader: {\n        value: null,\n        enumerable: true,\n        writable: true\n      }\n    });\n\n    if (options) {\n      Object.keys(options).forEach(opt => {\n        if (this.hasOwnProperty(opt) && Object.getOwnPropertyDescriptor(this, opt).writable) {\n          this[opt] = options[opt];\n        }\n      });\n\n      if (options.offlineMode === 'auto' && this.autoReconnect) {\n        this.autoQueue = this.autoReplay = true;\n      }\n    }\n\n    this.wasConnected = false;\n    this.stopRetryingToConnect = false;\n    this.retrying = false;\n  }\n\n  connect() {\n    this.state = 'connecting';\n    if (this.autoQueue) {\n      this.startQueuing();\n    }\n  }\n\n  /**\n   * Called when the client's connection is established\n   */\n  clientConnected() {\n    this.state = 'connected';\n    this.emit(this.wasConnected && 'reconnect' || 'connect');\n    this.wasConnected = true;\n    this.stopRetryingToConnect = false;\n\n    if (this.autoQueue) {\n      this.stopQueuing();\n    }\n\n    if (this.autoReplay) {\n      this.playQueue();\n    }\n  }\n\n  /**\n   * Called when the client's connection is closed\n   */\n  clientDisconnected() {\n    this.state = 'offline';\n    if (this.autoQueue) {\n      this.startQueuing();\n    }\n\n    this.emit('disconnect');\n  }\n\n  /**\n   * Called when the client's connection is closed with an error state\n   *\n   * @param {Error} error\n   */\n  clientNetworkError(error) {\n    this.state = 'offline';\n    if (this.autoQueue) {\n      this.startQueuing();\n    }\n\n    this.emit('networkError', error);\n    if (this.autoReconnect && !this.retrying && !this.stopRetryingToConnect) {\n      this.retrying = true;\n      setTimeout(() => {\n        this.retrying = false;\n        this.connect(this.host);\n      }, this.reconnectionDelay);\n    } else {\n      this.emit('disconnect');\n    }\n  }\n\n  /**\n   * Empties the offline queue without replaying it.\n   */\n  flushQueue() {\n    this.offlineQueue = [];\n  }\n\n  /**\n   * Replays the requests queued during offline mode.\n   */\n  playQueue() {\n    if (this.state === 'connected') {\n      cleanQueue(this);\n      dequeue(this);\n    }\n  }\n\n  /**\n   * Starts the requests queuing. Works only during offline mode, and if the autoQueue option is set to false.\n   */\n  startQueuing() {\n    this.queuing = true;\n  }\n\n  /**\n   * Stops the requests queuing. Works only during offline mode, and if the autoQueue option is set to false.\n   */\n  stopQueuing() {\n    this.queuing = false;\n  }\n\n  subscribe(object, options, notificationCB, cb) {\n    if (this.state !== 'connected') {\n      return cb(new Error('Not Connected'));\n    }\n    this.query(object, options, (error, response) => {\n      if (error) {\n        return cb(error);\n      }\n      this.on(response.result.channel, data => {\n        data.fromSelf = data.volatile !== undefined && data.volatile.sdkInstanceId === this.id;\n        notificationCB(data);\n      });\n      cb(null, response.result);\n    });\n  }\n\n  unsubscribe(object, channel, cb) {\n    this.removeAllListeners(channel);\n    this.query(object, null, (err, res) => {\n      if (cb) {\n        cb(err, err ? undefined : res.result);\n      }\n    });\n  }\n\n  query(object, options, cb) {\n    let queuable = options && (options.queuable !== false) || true;\n\n    if (this.queueFilter) {\n      queuable = queuable && this.queueFilter(object);\n    }\n\n    if (this.queuing && queuable) {\n      cleanQueue(this, object, cb);\n      this.emit('offlineQueuePush', {query: object, cb: cb});\n      return this.offlineQueue.push({ts: Date.now(), query: object, cb: cb});\n    }\n\n    if (this.state === 'connected') {\n      return emitRequest(this, object, cb);\n    }\n\n    return discardRequest(object, cb);\n  }\n}\n/**\n * Emit a request to Kuzzle\n *\n * @param {RTWrapper} network\n * @param {object} request\n * @param {responseCallback} [cb]\n */\nfunction emitRequest (network, request, cb) {\n  if (request.jwt !== undefined || cb) {\n    network.once(request.requestId, response => {\n      let error = null;\n\n      if (request.action !== 'logout' && response.error && response.error.message === 'Token expired') {\n        network.emit('tokenExpired', request, cb);\n      }\n\n      if (response.error) {\n        error = new Error(response.error.message);\n        Object.assign(error, response.error);\n        error.status = response.status;\n        network.emit('queryError', error, request, cb);\n      }\n\n      if (cb) {\n        cb(error, response);\n      }\n    });\n  }\n  // Track requests made to allow Room.subscribeToSelf to work\n  network.send(request);\n}\n\nfunction discardRequest(object, cb) {\n  if (cb) {\n    cb(new Error('Unable to execute request: not connected to a Kuzzle server.\\nDiscarded request: ' + JSON.stringify(object)));\n  }\n}\n\n/**\n * Clean up the queue, ensuring the queryTTL and queryMaxSize properties are respected\n * @param {RTWrapper} network\n */\nfunction cleanQueue (network) {\n  const now = Date.now();\n  let lastDocumentIndex = -1;\n\n  if (network.queueTTL > 0) {\n    network.offlineQueue.forEach((query, index) => {\n      if (query.ts < now - network.queueTTL) {\n        lastDocumentIndex = index;\n      }\n    });\n\n    if (lastDocumentIndex !== -1) {\n      network.offlineQueue\n        .splice(0, lastDocumentIndex + 1)\n        .forEach(droppedRequest => {\n          network.emit('offlineQueuePop', droppedRequest.query);\n        });\n    }\n  }\n\n  if (network.queueMaxSize > 0 && network.offlineQueue.length > network.queueMaxSize) {\n    network.offlineQueue\n      .splice(0, network.offlineQueue.length - network.queueMaxSize)\n      .forEach(droppedRequest => {\n        network.emit('offlineQueuePop', droppedRequest.query);\n      });\n  }\n}\n\n/**\n * Play all queued requests, in order.\n */\nfunction dequeue (network) {\n  const\n    uniqueQueue = {},\n    dequeuingProcess = () => {\n      if (network.offlineQueue.length > 0) {\n        emitRequest(network, network.offlineQueue[0].query, network.offlineQueue[0].cb);\n        network.emit('offlineQueuePop', network.offlineQueue.shift());\n\n        setTimeout(() => {\n          dequeuingProcess();\n        }, Math.max(0, network.replayInterval));\n      }\n    };\n\n  if (network.offlineQueueLoader) {\n    if (typeof network.offlineQueueLoader !== 'function') {\n      throw new Error('Invalid value for offlineQueueLoader property. Expected: function. Got: ' + typeof network.offlineQueueLoader);\n    }\n\n    const additionalQueue = network.offlineQueueLoader();\n    if (Array.isArray(additionalQueue)) {\n      network.offlineQueue = additionalQueue\n        .concat(network.offlineQueue)\n        .filter(request => {\n          // throws if the query object does not contain required attributes\n          if (!request.query || request.query.requestId === undefined || !request.query.action || !request.query.controller) {\n            throw new Error('Invalid offline queue request. One or more missing properties: requestId, action, controller.');\n          }\n\n          return uniqueQueue.hasOwnProperty(request.query.requestId) ? false : (uniqueQueue[request.query.requestId] = true);\n        });\n    } else {\n      throw new Error('Invalid value returned by the offlineQueueLoader function. Expected: array. Got: ' + typeof additionalQueue);\n    }\n  }\n\n  dequeuingProcess();\n}\n\nmodule.exports = RTWrapper;\n","const\n  uuidv4 = require('uuid/v4'),\n  KuzzleEventEmitter = require('./eventEmitter'),\n  Collection = require('./Collection.js'),\n  Document = require('./Document.js'),\n  Security = require('./security/Security'),\n  MemoryStorage = require('./MemoryStorage'),\n  User = require('./security/User'),\n  networkWrapper = require('./networkWrapper');\n\n/**\n * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n *\n * @callback responseCallback\n * @param {Object} err - Error object, NULL if the query is successful\n * @param {Object} [data] - The content of the query response\n */\n\n/**\n * Kuzzle object constructor.\n *\n * @constructor\n * @param host - Server name or IP Address to the Kuzzle instance\n * @param [options] - Connection options\n * @param {responseCallback} [cb] - Handles connection response\n */\nclass Kuzzle extends KuzzleEventEmitter {\n  constructor(host, options) {\n    super();\n\n    if (!host || host === '') {\n      throw new Error('host argument missing');\n    }\n\n    Object.defineProperties(this, {\n      // 'private' properties\n      eventActions: {\n        value: [\n          'connected',\n          'discarded',\n          'disconnected',\n          'loginAttempt',\n          'networkError',\n          'offlineQueuePush',\n          'offlineQueuePop',\n          'queryError',\n          'reconnected',\n          'tokenExpired'\n        ]\n      },\n      // configuration properties\n      autoResubscribe: {\n        value: options && typeof options.autoResubscribe === 'boolean' ? options.autoResubscribe : true,\n        enumerable: true\n      },\n      defaultIndex: {\n        value: (options && typeof options.defaultIndex === 'string') ? options.defaultIndex : undefined,\n        writable: true,\n        enumerable: true\n      },\n      jwt: {\n        value: undefined,\n        enumerable: true,\n        writable: true\n      },\n      protocol: {\n        value: (options && typeof options.protocol === 'string') ? options.protocol : 'websocket',\n        enumerable: true\n      },\n      sdkVersion: {\n        value: (typeof SDKVERSION === 'undefined') ? require('../package.json').version : SDKVERSION\n      },\n      volatile: {\n        value: {},\n        enumerable: true,\n        writable: true\n      }\n    });\n\n    if (options) {\n      for (const opt of Object.keys(options)) {\n        if (this.hasOwnProperty(opt) && Object.getOwnPropertyDescriptor(this, opt).writable) {\n          this[opt] = options[opt];\n        }\n      }\n    }\n\n    // Forward the subscribe query to the network wrapper\n    Object.defineProperty(this, 'subscribe', {\n      value: function(room, opts, subscribeCB) {\n        const\n          object = {\n            requestId: uuidv4(),\n            controller: 'realtime',\n            action: 'subscribe',\n            index: room.collection.index,\n            collection: room.collection.collection,\n            volatile: this.volatile,\n            body: room.filters,\n            scope: room.scope,\n            state: room.state,\n            users: room.users\n          },\n          notificationCB = data => {\n            if (data.type === 'TokenExpired') {\n              this.unsetJwt();\n              return this.emit('tokenExpired');\n            }\n\n            if (data.type === 'document') {\n              const copy = Object.assign({}, data);\n              copy.document = new Document(room.collection, data.result._id, data.result._source, data.result._meta);\n              delete copy.result;\n              return room.notify(copy);\n            }\n\n            room.notify(data);\n          };\n\n        if (this.jwt !== undefined) {\n          object.jwt = this.jwt;\n        }\n\n        Object.assign(object.volatile, room.volatile, {sdkInstanceId: this.network.id, sdkVersion: this.sdkVersion});\n\n        this.network.subscribe(object, opts, notificationCB, subscribeCB);\n      }\n    });\n\n    // Forward the unsubscribe query to the network wrapper\n    Object.defineProperty(this, 'unsubscribe', {\n      value: (room, unsubscribeCB) => {\n        const\n          object = {\n            requestId: uuidv4(),\n            controller: 'realtime',\n            action: 'unsubscribe',\n            volatile: this.volatile,\n            body: {roomId: room.roomId}\n          };\n\n        if (this.jwt !== undefined) {\n          object.jwt = this.jwt;\n        }\n\n        Object.assign(object.volatile, room.volatile, {sdkInstanceId: this.network.id, sdkVersion: this.sdkVersion});\n\n        this.network.unsubscribe(object, room.channel, unsubscribeCB);\n      }\n    });\n\n    /**\n     * Some methods (mainly read queries) require a callback function. This function exists to avoid repetition of code,\n     * and is called by these methods\n     */\n    Object.defineProperty(this, 'callbackRequired', {\n      value: (errorMessagePrefix, callback) => {\n        if (!callback || typeof callback !== 'function') {\n          throw new Error(`${errorMessagePrefix}: a callback argument is required for read queries`);\n        }\n      }\n    });\n\n    /**\n     * Create an attribute security that embed all methods to manage Role, Profile and User\n     */\n    Object.defineProperty(this, 'security', {\n      value: new Security(this),\n      enumerable: true\n    });\n\n    Object.defineProperty(this, 'memoryStorage', {\n      value: new MemoryStorage(this),\n      enumerable: true\n    });\n\n    Object.defineProperty(this, 'collections',{\n      value: {},\n      writable: true\n    });\n\n    Object.defineProperty(this, 'eventTimeout',{\n      value: options && typeof options.eventTimeout === 'number' ? options.eventTimeout : 200\n    });\n\n    Object.defineProperty(this, 'protectedEvents', {\n      value: {\n        connected: {timeout: this.eventTimeout},\n        error: {timeout: this.eventTimeout},\n        disconnected: {timeout: this.eventTimeout},\n        reconnected: {timeout: this.eventTimeout},\n        tokenExpired: {timeout: this.eventTimeout},\n        loginAttempt: {timeout: this.eventTimeout}\n      }\n    });\n\n    this.network = networkWrapper(this.protocol, host, options);\n\n    // Properties related to the network layer\n    // Accessing a property irrelevant for a given protocol\n    // (e.g. \"autoReconnect\" for the HTTP layer) should\n    // throw an exception\n    Object.defineProperties(this, {\n      autoQueue: {\n        enumerable: true,\n        get: () => this.network.autoQueue,\n        set: value => {\n          checkPropertyType('autoQueue', 'boolean', value);\n          this.network.autoQueue = value;\n        }\n      },\n      autoReconnect: {\n        enumerable: true,\n        get: () => this.network.autoReconnect\n      },\n      autoReplay: {\n        enumerable: true,\n        get: () => this.network.autoReplay,\n        set: value => {\n          checkPropertyType('autoReplay', 'boolean', value);\n          this.network.autoReplay = value;\n        }\n      },\n      host: {\n        enumerable: true,\n        get: () => this.network.host\n      },\n      offlineQueue: {\n        enumerable: true,\n        get: () => this.network.offlineQueue\n      },\n      offlineQueueLoader: {\n        enumerable: true,\n        get: () => this.network.offlineQueueLoader,\n        set: value => {\n          if (value !== null) {\n            checkPropertyType('offlineQueueLoader', 'function', value);\n          }\n          this.network.offlineQueueLoader = value;\n        }\n      },\n      port: {\n        enumerable: true,\n        get: () => this.network.port\n      },\n      queueFilter: {\n        enumerable: true,\n        get: () => this.network.queueFilter,\n        set: value => {\n          checkPropertyType('queueFilter', 'function', value);\n          this.network.queueFilter = value;\n        }\n      },\n      queueMaxSize: {\n        enumerable: true,\n        get: () => this.network.queueMaxSize,\n        set: value => {\n          checkPropertyType('queueMaxSize', 'number', value);\n          this.network.queueMaxSize = value;\n        }\n      },\n      queueTTL: {\n        enumerable: true,\n        get: () => this.network.queueTTL,\n        set: value => {\n          checkPropertyType('queueTTL', 'number', value);\n          this.network.queueTTL = value;\n        }\n      },\n      replayInterval: {\n        enumerable: true,\n        get: () => this.network.replayInterval,\n        set: value => {\n          checkPropertyType('replayInterval', 'number', value);\n          this.network.replayInterval = value;\n        }\n      },\n      reconnectionDelay: {\n        enumerable: true,\n        get: () => this.network.reconnectionDelay\n      },\n      sslConnection: {\n        eumerable: true,\n        get: () => this.network.ssl\n      }\n    });\n\n    this.network.addListener('offlineQueuePush', data => this.emit('offlineQueuePush', data));\n    this.network.addListener('offlineQueuePop', data => this.emit('offlineQueuePop', data));\n    this.network.addListener('queryError', (err, query) => this.emit('queryError', err, query));\n\n    this.network.addListener('tokenExpired', () => {\n      this.unsetJwt();\n      this.emit('tokenExpired');\n    });\n\n    if (this.bluebird) {\n      return this.bluebird.promisifyAll(this, {\n        suffix: 'Promise',\n        filter: function (name, func, target, passes) {\n          const whitelist = ['getAllStatistics', 'getServerInfo', 'getStatistics',\n            'listCollections', 'listIndexes', 'login', 'logout', 'now', 'query',\n            'checkToken', 'whoAmI', 'updateSelf', 'getMyRights', 'getMyCredentials',\n            'createMyCredentials', 'deleteMyCredentials', 'updateMyCredentials', 'validateMyCredentials',\n            'createIndex', 'refreshIndex', 'getAutoRefresh', 'setAutoRefresh', 'connect'\n          ];\n\n          return passes && whitelist.indexOf(name) !== -1;\n        }\n      });\n    }\n  }\n\n  /**\n  * Emit an event to all registered listeners\n  * An event cannot be emitted multiple times before a timeout has been reached.\n  */\n  emit (eventName, ...payload) {\n    const\n      now = Date.now(),\n      protectedEvent = this.protectedEvents[eventName];\n\n    if (protectedEvent) {\n      if (protectedEvent.lastEmitted && protectedEvent.lastEmitted > now - protectedEvent.timeout) {\n        return false;\n      }\n      protectedEvent.lastEmitted = now;\n    }\n\n    super.emit(eventName, ...payload);\n  }\n\n\n  /**\n   * Connects to a Kuzzle instance using the provided host name\n   * @param {function} [cb] Connection callback\n   */\n  connect (cb) {\n    if (this.network.state !== 'offline') {\n      if (cb) {\n        cb(null, this);\n      }\n      return;\n    }\n\n    this.network.connect();\n\n    this.network.addListener('connect', () => {\n      this.emit('connected');\n\n      if (cb) {\n        cb(null, this);\n      }\n    });\n\n    this.network.addListener('networkError', error => {\n      const connectionError = new Error(`Unable to connect to kuzzle proxy server at ${this.network.host}:${this.network.port}`);\n\n      connectionError.internal = error;\n      this.emit('networkError', connectionError);\n\n      if (cb) {\n        cb(connectionError);\n      }\n    });\n\n    this.network.addListener('disconnect', () => {\n      this.disconnect();\n      this.emit('disconnected');\n    });\n\n    this.network.addListener('reconnect', () => {\n      if (this.jwt) {\n        this.checkToken(this.jwt, (err, res) => {\n          // shouldn't obtain an error but let's invalidate the token anyway\n          if (err || !res.valid) {\n            this.unsetJwt();\n          }\n\n          this.emit('reconnected');\n        });\n      } else {\n        this.emit('reconnected');\n      }\n    });\n\n    this.network.on('discarded', data => this.emit('discarded', data));\n  }\n\n  /**\n   * Set the jwt used to query kuzzle\n   * @param token\n   * @returns {Kuzzle}\n   */\n  setJwt (token) {\n    if (typeof token === 'string') {\n      this.jwt = token;\n    } else if (typeof token === 'object') {\n      if (token.result && token.result.jwt && typeof token.result.jwt === 'string') {\n        this.jwt = token.result.jwt;\n      } else {\n        this.emit('loginAttempt', {\n          success: false,\n          error: 'Cannot find a valid JWT in the following object: ' + JSON.stringify(token)\n        });\n\n        return this;\n      }\n    } else {\n      this.emit('loginAttempt', {success: false, error: 'Invalid token argument: ' + token});\n      return this;\n    }\n\n    this.emit('loginAttempt', {success: true});\n    return this;\n  }\n\n  /**\n   * Unset the jwt used to query kuzzle\n   * @returns {Kuzzle}\n   */\n  unsetJwt () {\n    this.jwt = undefined;\n    return this;\n  }\n\n  /**\n   * Get the jwt used by kuzzle\n   * @returns {Kuzzle}\n   */\n  getJwt () {\n    return this.jwt;\n  }\n\n  /**\n   * Send login request to kuzzle with credentials\n   * If login success, store the jwt into kuzzle object\n   *\n   * @param strategy\n   * @param credentials\n   * @param expiresIn\n   * @param cb\n   */\n  login (strategy, ...args) {\n    if (!strategy || typeof strategy !== 'string') {\n      throw new Error('Kuzzle.login: strategy required');\n    }\n\n    const \n      request = {\n        strategy,\n        body: {}\n      };\n\n    let cb = null;\n\n    // Handle arguments (credentials, expiresIn, cb)\n    if (args[0]) {\n      if (typeof args[0] === 'object') {\n        request.body = args[0];\n      } else if (typeof args[0] === 'number' || typeof args[0] === 'string') {\n        request.expiresIn = args[0];\n      } else if (typeof args[0] === 'function') {\n        cb = args[0];\n      }\n    }\n    if (args[1]) {\n      if (typeof args[1] === 'number' || typeof args[1] === 'string') {\n        request.expiresIn = args[1];\n      } else if (typeof args[1] === 'function') {\n        cb = args[1];\n      }\n    }\n    if (args[2] && typeof args[2] === 'function') {\n      cb = args[2];\n    }\n\n    this.query({controller: 'auth', action: 'login'}, request, {queuable: false}, (error, response) => {\n      if (!error) {\n        if (response.result.jwt) {\n          this.setJwt(response.result.jwt);\n        }\n\n        cb && cb(null, response.result);\n      }\n      else {\n        cb && cb(error);\n        this.emit('loginAttempt', {success: false, error: error.message});\n      }\n    });\n  }\n\n  /**\n   * Create credentials of the specified <strategy> for the current user.\n   *\n   * @param credentials\n   * @param strategy\n   * @param options\n   * @param cb\n   * @returns {Kuzzle}\n   */\n  createMyCredentials (strategy, credentials, options, cb) {\n    if (!cb && typeof options === 'function') {\n      cb = options;\n      options = null;\n    }\n\n    this.query({controller: 'auth', action: 'createMyCredentials'}, {strategy, body: credentials}, options, (err, res) => {\n      if (typeof cb === 'function') {\n        cb(err, err ? undefined : res.result._source);\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Delete credentials of the specified <strategy> for the current user.\n   *\n   * @param strategy\n   * @param options\n   * @param cb\n   * @returns {Kuzzle}\n   */\n  deleteMyCredentials (strategy, options, cb) {\n    if (!cb && typeof options === 'function') {\n      cb = options;\n      options = null;\n    }\n\n    this.query({controller: 'auth', action: 'deleteMyCredentials'}, {strategy}, options, (err, res) => {\n      if (typeof cb === 'function') {\n        cb(err, err ? undefined : res.result);\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Get credential information of the specified <strategy> for the current user.\n   *\n   * @param strategy\n   * @param options\n   * @param cb\n   */\n  getMyCredentials (strategy, options, cb) {\n    if (!cb && typeof options === 'function') {\n      cb = options;\n      options = null;\n    }\n\n    this.query({controller: 'auth', action: 'getMyCredentials'}, {strategy}, options, (err, res) => {\n      if (typeof cb === 'function') {\n        cb(err, err ? undefined : res.result);\n      }\n    });\n  }\n\n  /**\n   * Update credentials of the specified <strategy> for the current user.\n   *\n   * @param strategy\n   * @param credentals\n   * @param options\n   * @param cb\n   * @returns {Kuzzle}\n   */\n  updateMyCredentials (strategy, credentials, options, cb) {\n    if (!cb && typeof options === 'function') {\n      cb = options;\n      options = null;\n    }\n\n    this.query({controller: 'auth', action: 'updateMyCredentials'}, {strategy, body: credentials}, options, (err, res) => {\n      if (typeof cb === 'function') {\n        cb(err, err ? undefined : res.result);\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Validate credentials of the specified <strategy> for the current user.\n   *\n   * @param strategy\n   * @param credentials\n   * @param options\n   * @param cb\n   */\n  validateMyCredentials (strategy, credentials, options, cb) {\n    if (!cb && typeof options === 'function') {\n      cb = options;\n      options = null;\n    }\n\n    this.query({controller: 'auth', action: 'validateMyCredentials'}, {strategy, body: credentials}, options, (err, res) => {\n      if (typeof cb === 'function') {\n        cb(err, err ? undefined : res.result);\n      }\n    });\n  }\n\n  /**\n   * Create a kuzzle index\n   *\n   * @param {string} index\n   * @param {object} [options]\n   * @param {responseCallback} cb\n   * @returns {Kuzzle}\n   */\n  createIndex (index, options, cb) {\n    if (!index) {\n      if (!this.defaultIndex) {\n        throw new Error('Kuzzle.createIndex: index required');\n      }\n      index = this.defaultIndex;\n    }\n\n    if (!cb && typeof options === 'function') {\n      cb = options;\n      options = null;\n    }\n\n    this.query({controller: 'index', action: 'create', index}, {}, options, (err, res) => {\n      if (typeof cb === 'function') {\n        cb(err, err ? undefined : res.result);\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Send logout request to kuzzle with jwt.\n   *\n   * @param cb\n   * @returns {Kuzzle}\n   */\n  logout (cb) {\n    const\n      request = {\n        action: 'logout',\n        controller: 'auth',\n        requestId: uuidv4(),\n        body: {}\n      };\n\n    this.query({controller: 'auth', action: 'logout'}, request, {queuable: false}, error => {\n      if (typeof cb === 'function') {\n        cb(error, this);\n      }\n    });\n\n    return this.unsetJwt();\n  }\n\n  /**\n   * Checks whether a given jwt token still represents a valid session in Kuzzle.\n   *\n   * @param  {string}   token     The jwt token to check\n   * @param  {function} cb  The callback to be called when the response is\n   *                              available. The signature is `function(error, response)`.\n   */\n  checkToken (token, cb) {\n    const\n      request = {\n        body: {\n          token\n        }\n      };\n\n    this.callbackRequired('Kuzzle.checkToken', cb);\n\n    this.query({controller: 'auth', action: 'checkToken'}, request, {queuable: false}, (err, res) => {\n      cb(err, err ? undefined : res.result);\n    });\n  }\n\n  /**\n   * Fetches the current user.\n   *\n   * @param  {function} cb  The callback to be called when the response is\n   *                              available. The signature is `function(error, response)`.\n   */\n  whoAmI (cb) {\n    this.callbackRequired('Kuzzle.whoAmI', cb);\n\n    this.query({controller: 'auth', action: 'getCurrentUser'}, {}, {}, (err, res) => {\n      cb(err, err ? undefined : new User(this.security, res.result._id, res.result._source, res.result._meta));\n    });\n  }\n\n  /**\n   * Gets the rights array of the currently logged user.\n   *\n   * @param {object} [options] - Optional parameters\n   * @param  {function} cb The callback containing the normalized array of rights.\n   */\n  getMyRights (options, cb) {\n    if (!cb && typeof options === 'function') {\n      cb = options;\n      options = null;\n    }\n\n    this.callbackRequired('Kuzzle.getMyRights', cb);\n\n    this.query({controller: 'auth', action:'getMyRights'}, {}, options, (err, res) => {\n      cb(err, err ? undefined : res.result.hits);\n    });\n  }\n\n  /**\n   * Update current user in Kuzzle.\n   *\n   * @param {object} content - a plain javascript object representing the user's modification\n   * @param {object} [options] - (optional) arguments\n   * @param {responseCallback} [cb] - (optional) Handles the query response\n   * @returns {Kuzzle} this object\n   */\n  updateSelf (content, options, cb) {\n    if (!cb && typeof options === 'function') {\n      cb = options;\n      options = null;\n    }\n\n    this.query({controller: 'auth', action: 'updateSelf'}, {body: content}, options, (err, res) => {\n      if (typeof cb === 'function') {\n        cb(err, err ? undefined : res.result);\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Adds a listener to a Kuzzle global event. When an event is fired, listeners are called in the order of their\n   * insertion.\n   *\n   * @param {string} event - name of the global event to subscribe to\n   * @param {function} listener - callback to invoke each time an event is fired\n   */\n  addListener (event, listener) {\n    if (this.eventActions.indexOf(event) === -1) {\n      throw new Error(`[${event}] is not a known event. Known events: ${this.eventActions.toString()}`);\n    }\n\n    return super.addListener(event, listener);\n  }\n\n  /**\n   * Kuzzle monitors active connections, and ongoing/completed/failed requests.\n   * This method returns all available statistics from Kuzzle.\n   *\n   * @param {object} [options] - Optional parameters\n   * @param {responseCallback} cb - Handles the query response\n   */\n  getAllStatistics (options, cb) {\n    if (!cb && typeof options === 'function') {\n      cb = options;\n      options = null;\n    }\n\n    this.callbackRequired('Kuzzle.getAllStatistics', cb);\n\n    this.query({controller:'server', action: 'getAllStats'}, {}, options, (err, res) => {\n      cb(err, err ? undefined : res.result.hits);\n    });\n  }\n\n  /**\n   * Kuzzle monitors active connections, and ongoing/completed/failed requests.\n   * This method allows getting either the last statistics frame, or a set of frames starting from a provided timestamp.\n   *\n   * @param {number} startTime -  Epoch time. Starting time from which the frames are to be retrieved\n   * @param {number} stopTime -  Epoch time. End time from which the frames are to be retrieved\n   * @param {object} [options] - Optional parameters\n   * @param {responseCallback} cb - Handles the query response\n   */\n  getStatistics (...args) {\n    let\n      startTime,\n      stopTime,\n      options,\n      cb;\n\n    switch (args.length) {\n      case 1:\n        cb = args[0];\n        startTime = null;\n        stopTime = null;\n        options = null;\n        break;\n      case 2:\n        if (typeof args[0] === 'object') {\n          [options, cb] = args;\n        } else {\n          [startTime, cb] = args;\n        }\n        break;\n      case 3:\n        if (typeof args[1] === 'object') {\n          [startTime, options, cb] = args;\n        } else {\n          [startTime, stopTime, cb] = args;\n        }\n        break;\n      case 4:\n        [startTime, stopTime, options, cb] = args;\n        break;\n      default:\n        throw new Error('Bad arguments list. Usage: kuzzle.getStatistics([startTime,] [stopTime,] [options,] callback)');\n    }\n\n    this.callbackRequired('Kuzzle.getStatistics', cb);\n\n    const queryCB = (err, res) => {\n      if (err) {\n        return cb(err);\n      }\n\n      cb(null, startTime ? res.result.hits : [res.result]);\n    };\n\n    let query = {};\n    if (startTime) {\n      query = stopTime ? {startTime, stopTime} : {startTime};\n    }\n\n    this.query({controller: 'server', action: startTime ? 'getStats' : 'getLastStats'}, query, options, queryCB);\n  }\n\n  /**\n   * Create a new instance of a Collection object.\n   * If no index is specified, takes the default index.\n   *\n   * @param {string} collection - The name of the data collection you want to manipulate\n   * @param {string} [index] - The name of the data index containing the data collection\n   * @returns {Collection} A Collection instance\n   */\n  collection (collection, index) {\n    if (!index) {\n      if (!this.defaultIndex) {\n        throw new Error('Unable to create a new data collection object: no index specified');\n      }\n\n      index = this.defaultIndex;\n    }\n\n    if (typeof index !== 'string' || typeof collection !== 'string') {\n      throw new Error('Invalid index or collection argument: string expected');\n    }\n\n    if (!this.collections[index]) {\n      this.collections[index] = {};\n    }\n\n    if (!this.collections[index][collection]) {\n      this.collections[index][collection] = new Collection(this, collection, index);\n    }\n\n    return this.collections[index][collection];\n  }\n\n  /**\n   * Empties the offline queue without replaying it.\n   *\n   * @returns {Kuzzle}\n   */\n  flushQueue () {\n    this.network.flushQueue();\n    return this;\n  }\n\n  /**\n   * Returns the list of known persisted data collections.\n   *\n   * @param {string} [index] - Index containing collections to be listed\n   * @param {object} [options] - Optional parameters\n   * @param {responseCallback} cb - Handles the query response\n   */\n  listCollections (...args) {\n    let\n      index,\n      options,\n      cb;\n\n    for (const arg of args) {\n      switch (typeof arg) {\n        case 'string':\n          index = arg;\n          break;\n        case 'object':\n          options = arg;\n          break;\n        case 'function':\n          cb = arg;\n          break;\n      }\n    }\n\n    if (!index) {\n      if (!this.defaultIndex) {\n        throw new Error('Kuzzle.listCollections: index required');\n      }\n\n      index = this.defaultIndex;\n    }\n\n    this.callbackRequired('Kuzzle.listCollections', cb);\n\n    const query = {type: options && options.type || 'all'};\n\n    this.query({index, controller: 'collection', action: 'list'}, query, options, (err, res) => {\n      cb(err, err ? undefined : res.result.collections);\n    });\n  }\n\n  /**\n   * Returns the list of existing indexes in Kuzzle\n   *\n   * @param {object} [options] - Optional arguments\n   * @param {responseCallback} cb - Handles the query response\n   */\n  listIndexes (options, cb) {\n    if (!cb && typeof options === 'function') {\n      cb = options;\n      options = null;\n    }\n\n    this.callbackRequired('Kuzzle.listIndexes', cb);\n\n    this.query({controller: 'index', action: 'list'}, {}, options, (err, res) => {\n      cb(err, err ? undefined : res.result.indexes);\n    });\n  }\n\n  /**\n   * Disconnects from Kuzzle and invalidate this instance.\n   */\n  disconnect () {\n    this.network.close();\n\n    for (const collection of Object.keys(this.collections)) {\n      delete this.collections[collection];\n    }\n  }\n\n  /**\n   * Returns the server informations\n   *\n   * @param {object} [options] - Optional arguments\n   * @param {responseCallback} cb - Handles the query response\n   */\n  getServerInfo (options, cb) {\n    if (!cb && typeof options === 'function') {\n      cb = options;\n      options = null;\n    }\n\n    this.callbackRequired('Kuzzle.getServerInfo', cb);\n\n    this.query({controller: 'server', action: 'info'}, {}, options, (err, res) => {\n      cb(err, err ? undefined : res.result.serverInfo);\n    });\n  }\n\n  /**\n   * Forces an index refresh\n   *\n   * @param {string} index - The index to refresh. Defaults to Kuzzle.defaultIndex\n   * @param {object} options - Optional arguments\n   * @param {responseCallback} cb - Handles the query response\n   * @returns {Kuzzle}\n   */\n  refreshIndex (...args) {\n    let\n      index,\n      options,\n      cb;\n\n    for (const arg of args) {\n      switch (typeof arg) {\n        case 'string':\n          index = arg;\n          break;\n        case 'object':\n          options = arg;\n          break;\n        case 'function':\n          cb = arg;\n          break;\n      }\n    }\n\n    if (!index) {\n      if (!this.defaultIndex) {\n        throw new Error('Kuzzle.refreshIndex: index required');\n      }\n      index = this.defaultIndex;\n    }\n\n    this.query({index, controller: 'index', action: 'refresh'}, {}, options, cb);\n\n    return this;\n  }\n\n  /**\n   * Returns de current autoRefresh status for the given index\n   *\n   * @param {string} index - The index to get the status from. Defaults to Kuzzle.defaultIndex\n   * @param {object} options - Optinal arguments\n   * @param {responseCallback} cb - Handles the query response\n   */\n  getAutoRefresh (...args) {\n    let\n      index,\n      options,\n      cb;\n\n    for (const arg of args) {\n      switch (typeof arg) {\n        case 'string':\n          index = arg;\n          break;\n        case 'object':\n          options = arg;\n          break;\n        case 'function':\n          cb = arg;\n          break;\n      }\n    }\n\n    if (!index) {\n      if (!this.defaultIndex) {\n        throw new Error('Kuzzle.getAutoRefresh: index required');\n      }\n      index = this.defaultIndex;\n    }\n\n    this.callbackRequired('Kuzzle.getAutoRefresh', cb);\n    this.query({index, controller: 'index', action: 'getAutoRefresh'}, {}, options, cb);\n  }\n\n  /**\n   * (Un)Sets the autoRefresh flag on the given index\n   *\n   * @param {string} index - the index to modify. Defaults to Kuzzle.defaultIndex\n   * @param {boolean} autoRefresh - The autoRefresh value to set\n   * @param {object} options - Optional arguments\n   * @param {responseCallback} cb - Handles the query result\n   * @returns {object} this\n   */\n  setAutoRefresh (...args) {\n    var\n      index,\n      autoRefresh,\n      options,\n      cb;\n\n    for (const arg of args) {\n      switch (typeof arg) {\n        case 'string':\n          index = arg;\n          break;\n        case 'boolean':\n          autoRefresh = arg;\n          break;\n        case 'object':\n          options = arg;\n          break;\n        case 'function':\n          cb = arg;\n          break;\n      }\n    }\n\n    if (!index) {\n      if (!this.defaultIndex) {\n        throw new Error('Kuzzle.setAutoRefresh: index required');\n      }\n      index = this.defaultIndex;\n    }\n\n    if (autoRefresh === undefined) {\n      throw new Error('Kuzzle.setAutoRefresh: autoRefresh value is required');\n    }\n\n    this.query({index, controller: 'index', action: 'setAutoRefresh'}, {body: {autoRefresh}}, options, cb);\n\n    return this;\n  }\n\n  /**\n   * Return the current Kuzzle's UTC Epoch time, in milliseconds\n   * @param {object} [options] - Optional parameters\n   * @param {responseCallback} cb - Handles the query response\n   */\n  now (options, cb) {\n    if (!cb && typeof options === 'function') {\n      cb = options;\n      options = null;\n    }\n\n    this.callbackRequired('Kuzzle.now', cb);\n\n    this.query({controller: 'server', action: 'now'}, {}, options, (err, res) => {\n      cb(err, err ? undefined : res.result.now);\n    });\n  }\n\n  /**\n   * This is a low-level method, exposed to allow advanced SDK users to bypass high-level methods.\n   * Base method used to send read queries to Kuzzle\n   *\n   * Takes an optional argument object with the following properties:\n   *    - volatile (object, default: null):\n   *        Additional information passed to notifications to other users\n   *\n   * @param {object} queryArgs - Query configuration\n   * @param {object} query - The query data\n   * @param {object} [options] - Optional arguments\n   * @param {responseCallback} [cb] - Handles the query response\n   */\n  query (queryArgs, query, options, cb) {\n    const\n      object = {\n        action: queryArgs.action,\n        controller: queryArgs.controller,\n        volatile: this.volatile\n      };\n\n    if (!cb && typeof options === 'function') {\n      cb = options;\n      options = null;\n    } else if (!cb && !options && typeof query === 'function') {\n      cb = query;\n      query = {};\n      options = null;\n    }\n\n    if (options) {\n      for (const prop of ['refresh', 'from', 'size', 'scroll', 'scrollId']) {\n        if (options[prop] !== undefined) {\n          object[prop] = options[prop];\n        }\n      }\n\n      if (options.volatile && typeof options.volatile === 'object') {\n        Object.assign(object.volatile, options.volatile);\n      }\n    }\n\n    if (!query || typeof query !== 'object' || Array.isArray(query)) {\n      throw new Error('Invalid query parameter: ' + query);\n    }\n\n    Object.assign(object.volatile, query.volatile, {sdkInstanceId: this.network.id, sdkVersion: this.sdkVersion});\n\n    for (const attr of Object.keys(query)) {\n      if (attr !== 'volatile') {\n        object[attr] = query[attr];\n      }\n    }\n\n    /*\n     * Do not add the token for the checkToken route, to avoid getting a token error when\n     * a developer simply wish to verify his token\n     */\n    if (this.jwt !== undefined && !(object.controller === 'auth' && object.action === 'checkToken')) {\n      object.jwt = this.jwt;\n    }\n\n    if (queryArgs.collection) {\n      object.collection = queryArgs.collection;\n    }\n\n    if (queryArgs.index) {\n      object.index = queryArgs.index;\n    }\n\n    if (!object.requestId) {\n      object.requestId = uuidv4();\n    }\n\n    this.network.query(object, options, cb);\n\n    return this;\n  }\n\n  /**\n   * Starts the requests queuing.\n   */\n  startQueuing () {\n    this.network.startQueuing();\n    return this;\n  }\n\n  /**\n   * Stops the requests queuing.\n   */\n  stopQueuing () {\n    this.network.stopQueuing();\n    return this;\n  }\n\n  /**\n   * @DEPRECATED\n   * See Kuzzle.prototype.playQueue();\n   */\n  replayQueue () {\n    return this.playQueue();\n  }\n\n  /**\n   * Plays the requests queued during offline mode.\n   */\n  playQueue () {\n    this.network.playQueue();\n    return this;\n  }\n\n  /**\n   * Sets the default Kuzzle index\n   *\n   * @param index\n   * @returns this\n   */\n  setDefaultIndex (index) {\n    if (typeof index !== 'string') {\n      throw new Error(`Invalid default index: [${index}] (an index name is expected)`);\n    }\n\n    if (index.length === 0) {\n      throw new Error('Cannot set an empty index as the default index');\n    }\n\n    this.defaultIndex = index;\n\n    return this;\n  }\n}\n\nfunction checkPropertyType(prop, typestr, value) {\n  const wrongType = typestr === 'array' ? !Array.isArray(value) : typeof value !== typestr;\n\n  if (wrongType) {\n    throw new Error(`Can only assign a ${typestr} value to property \"${prop}\"`);\n  }\n}\n\nmodule.exports = Kuzzle;\n","// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && msCrypto.getRandomValues.bind(msCrypto));\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  return bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]];\n}\n\nmodule.exports = bytesToUuid;\n","var\n  KuzzleSearchResult = require('./SearchResult'),\n  Document = require('./Document'),\n  CollectionMapping = require('./CollectionMapping'),\n  Room = require('./Room');\n\n/**\n * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n *\n * @callback responseCallback\n * @param {Object} err - Error object, NULL if the query is successful\n * @param {Object} [data] - The content of the query response\n */\n\n/**\n * A data collection is a set of data managed by Kuzzle. It acts like a data table for persistent documents,\n * or like a room for pub/sub messages.\n *\n * @property {string} collection\n * @property {string} index\n * @property {Kuzzle} kuzzle\n * @property {Array.<string>} collection\n * @param {object} kuzzle - Kuzzle instance to inherit from\n * @param {string} collection - name of the data collection to handle\n * @param {string} index - Index containing the data collection\n * @constructor\n */\nfunction Collection(kuzzle, collection, index) {\n  if (!index || !collection) {\n    throw new Error('The Collection object constructor needs an index and a collection arguments');\n  }\n\n  Object.defineProperties(this, {\n    // read-only properties\n    collection: {\n      value: collection,\n      enumerable: true\n    },\n    index: {\n      value: index,\n      enumerable: true\n    },\n    kuzzle: {\n      value: kuzzle,\n      enumerable: true\n    }\n  });\n\n  Object.defineProperty(this, 'buildQueryArgs', {\n    value: function (controller, action) {\n      return {\n        controller: controller,\n        action: action,\n        collection: this.collection,\n        index: this.index\n      };\n    }\n  });\n\n  if (this.kuzzle.bluebird) {\n    return this.kuzzle.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var blacklist = ['subscribe'];\n\n        return passes && blacklist.indexOf(name) === -1;\n      }\n    });\n  }\n\n  return this;\n}\n\n/**\n * Returns the number of documents matching the provided set of filters.\n *\n * There is a small delay between documents creation and their existence in our advanced search layer,\n * usually a couple of seconds.\n * That means that a document that was just been created won’t be returned by this function\n *\n * @param {object} filters - Filters in Elasticsearch Query DSL format\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Handles the query response\n */\nCollection.prototype.count = function (filters, options, cb) {\n  var query = {body: filters};\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.callbackRequired('Collection.count', cb);\n\n  this.kuzzle.query(this.buildQueryArgs('document', 'count'), query, options, function (err, res) {\n    cb(err, err ? undefined : res.result.count);\n  });\n};\n\n/**\n * Create a new empty data collection, with no associated mapping.\n * Kuzzle automatically creates data collections when storing documents, but there are cases where we\n * want to create and prepare data collections before storing documents in it.\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - returns Kuzzle's response\n * @returns {*} this\n */\nCollection.prototype.create = function (options, cb) {\n  var data = {},\n    self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.query(this.buildQueryArgs('collection', 'create'), data, options, function(err) {\n    cb(err, err ? undefined : self);\n  });\n\n  return this;\n};\n\n/**\n * Create a new document in Kuzzle.\n *\n * Takes an optional argument object with the following properties:\n *    - volatile (object, default: null):\n *        Additional information passed to notifications to other users\n *    - ifExist (string, allowed values: \"error\" (default), \"replace\"):\n *        If the same document already exists:\n *          - resolves with an error if set to \"error\".\n *          - replaces the existing document if set to \"replace\"\n *\n * @param {string} [id] - (optional) document identifier\n * @param {object} document - either an instance of a Document object, or a document\n * @param {object} [options] - optional arguments\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {Object} this\n */\nCollection.prototype.createDocument = function (id, document, options, cb) {\n  var\n    self = this,\n    data = {},\n    action = 'create';\n\n  if (id && typeof id !== 'string') {\n    cb = options;\n    options = document;\n    document = id;\n    id = null;\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  if (document instanceof Document) {\n    data = document.serialize();\n  } else {\n    data.body = document;\n  }\n\n  if (options && options.ifExist) {\n    if (options.ifExist === 'replace') {\n      action = 'createOrReplace';\n    }\n    else if (options.ifExist !== 'error') {\n      throw new Error('Invalid value for the \"ifExist\" option: ' + options.ifExist);\n    }\n  }\n\n  if (id) {\n    data._id = id;\n  }\n\n  self.kuzzle.query(this.buildQueryArgs('document', action), data, options, cb && function (err, res) {\n    var doc;\n\n    if (err) {\n      return cb(err);\n    }\n\n    doc = new Document(self, res.result._id, res.result._source, res.result._meta);\n    doc.version = res.result._version;\n    cb(null, doc);\n  });\n\n  return this;\n};\n\n/**\n * Delete persistent documents.\n *\n * There is a small delay between documents creation and their existence in our advanced search layer,\n * usually a couple of seconds.\n * That means that a document that was just been created won’t be returned by this function\n *\n * Takes an optional argument object with the following properties:\n *    - volatile (object, default: null):\n *        Additional information passed to notifications to other users\n *\n * @param {string|object} arg - Either a document ID (will delete only this particular document), or a set of filters\n * @param {object} [options] - optional arguments\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {Collection} this\n */\nCollection.prototype.deleteDocument = function (arg, options, cb) {\n  var\n    action,\n    data = {};\n\n  if (typeof arg === 'string') {\n    data._id = arg;\n    action = 'delete';\n  } else {\n    data.body = {query: arg};\n    action = 'deleteByQuery';\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.query(this.buildQueryArgs('document', action), data, options, cb && function (err, res) {\n    if (err) {\n      cb(err);\n    }\n    else {\n      cb(null, (action === 'delete' ? [res.result._id] : res.result.ids));\n    }\n  });\n\n  return this;\n};\n\n/**\n * Deletes the current specifications of this collection\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n * @return {object} this\n */\nCollection.prototype.deleteSpecifications = function (options, cb) {\n  var\n    data = { index: this.index, collection: this.collection },\n    self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.query(this.buildQueryArgs('collection', 'deleteSpecifications'), data, options, function (err, res) {\n    cb(err, err ? undefined : res.result);\n  });\n\n  return self;\n};\n\n/**\n * Returns a boolean indicating whether or not a document with provided ID exists.\n *\n * @param {string} documentId - Unique document identifier\n * @param {object} options [options] - Optional parameters\n * @param {responseCallback} cb - Handles the query response\n */\nCollection.prototype.documentExists = function (documentId, options, cb) {\n  var\n    data = {_id: documentId},\n    self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.callbackRequired('Collection.documentExists', cb);\n\n  self.kuzzle.query(this.buildQueryArgs('document', 'exists'), data, options, function (err, res) {\n    cb(err, err ? undefined : res.result);\n  });\n};\n\n/**\n * Retrieve a single stored document using its unique document ID.\n *\n * @param {string} documentId - Unique document identifier\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Handles the query response\n */\nCollection.prototype.fetchDocument = function (documentId, options, cb) {\n  var\n    data = {_id: documentId},\n    self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.callbackRequired('Collection.fetch', cb);\n\n  self.kuzzle.query(this.buildQueryArgs('document', 'get'), data, options, function (err, res) {\n    var document;\n\n    if (err) {\n      return cb(err);\n    }\n\n    document = new Document(self, res.result._id, res.result._source, res.result._meta);\n    document.version = res.result._version;\n    cb(null, document);\n  });\n};\n\n/**\n * Instantiates a CollectionMapping object containing the current mapping of this collection.\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Returns an instantiated CollectionMapping object\n */\nCollection.prototype.getMapping = function (options, cb) {\n  var kuzzleMapping;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.callbackRequired('Collection.getMapping', cb);\n\n  kuzzleMapping = new CollectionMapping(this);\n  kuzzleMapping.refresh(options, cb);\n};\n\n/**\n * Create the provided documents\n *\n * @param {Array.<document>} documents - Array of documents to create\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Returns an instantiated CollectionMapping object\n * @returns {object} this\n */\nCollection.prototype.mCreateDocument = function (documents, options, cb) {\n  var data = {\n      body: {},\n    },\n    self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  if (!Array.isArray(documents)) {\n    return cb(new Error('Collection.mCreateDocument: documents parameter format is invalid (should be an array of documents)'));\n  }\n\n  self.kuzzle.callbackRequired('Collection.mCreate', cb);\n\n  data.body.documents = documents.map(function (doc) {\n    return (doc instanceof Document) ? doc.serialize() : doc;\n  });\n\n  self.kuzzle.query(this.buildQueryArgs('document', 'mCreate'), data, options, cb && function (err, res) {\n    cb(err, res && res.result);\n  });\n\n  return self;\n};\n\n/**\n * Create or replace the provided documents\n *\n * @param {Array.<document>} documents - Array of documents to create or replace\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Returns an instantiated CollectionMapping object\n * @returns {object} this\n */\nCollection.prototype.mCreateOrReplaceDocument = function (documents, options, cb) {\n  var data = {\n      body: {},\n    },\n    self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  if (!Array.isArray(documents)) {\n    return cb(new Error('Collection.mCreateOrReplaceDocument: documents parameter format is invalid (should be an array of documents)'));\n  }\n\n  self.kuzzle.callbackRequired('Collection.mCreateOrReplace', cb);\n\n  data.body.documents = documents.map(function (doc) {\n    return (doc instanceof Document) ? doc.serialize() : doc;\n  });\n\n  self.kuzzle.query(this.buildQueryArgs('document', 'mCreateOrReplace'), data, options, cb && function (err, res) {\n    cb(err, res && res.result);\n  });\n\n  return self;\n};\n\n/**\n * Delete specific documents according to given IDs\n *\n * @param {Array.<string>} documentIds - IDs of the documents to delete\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Returns an instantiated CollectionMapping object\n * @returns {object} this\n */\nCollection.prototype.mDeleteDocument = function (documentIds, options, cb) {\n  var data = {\n      body: {\n        ids: documentIds\n      }\n    },\n    self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  if (!Array.isArray(documentIds)) {\n    return cb(new Error('Collection.mDeleteDocument: documentIds parameter format is invalid (should be an array of IDs)'));\n  }\n\n  self.kuzzle.callbackRequired('Collection.mDelete', cb);\n\n  self.kuzzle.query(this.buildQueryArgs('document', 'mDelete'), data, options, cb && function (err, res) {\n    cb(err, res && res.result);\n  });\n\n  return self;\n};\n\n/**\n * Get specific documents according to given IDs\n *\n * @param {Array.<string>} documentIds - IDs of the documents to retrieve\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Returns an instantiated CollectionMapping object\n */\nCollection.prototype.mGetDocument = function (documentIds, options, cb) {\n  var data = {\n      body: {\n        ids: documentIds\n      }\n    },\n    self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  if (!Array.isArray(documentIds)) {\n    return cb(new Error('Collection.mGetDocument: documentIds parameter format is invalid (should be an array of IDs)'));\n  }\n\n  self.kuzzle.callbackRequired('Collection.mGet', cb);\n\n  self.kuzzle.query(this.buildQueryArgs('document', 'mGet'), data, options, cb && function (err, res) {\n    cb(err, err ? undefined : res.result);\n  });\n};\n\n/**\n * Replace the provided documents\n *\n * @param {Array.<document>} documents - Array of documents to replace\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Returns an instantiated CollectionMapping object\n * @returns {object} this\n */\nCollection.prototype.mReplaceDocument = function (documents, options, cb) {\n  var data = {\n      body: {}\n    },\n    self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  if (!Array.isArray(documents)) {\n    return cb(new Error('Collection.mReplaceDocument: documents parameter format is invalid (should be an array of documents)'));\n  }\n\n  self.kuzzle.callbackRequired('Collection.mReplace', cb);\n\n  data.body.documents = documents.map(function (doc) {\n    return (doc instanceof Document) ? doc.serialize() : doc;\n  });\n\n  self.kuzzle.query(this.buildQueryArgs('document', 'mReplace'), data, options, cb && function (err, res) {\n    cb(err, err ? undefined : res.result);\n  });\n\n  return self;\n};\n\n/**\n * Update the provided documents\n *\n * @param {Array.<document>} documents - Array of documents to update\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Returns an instantiated CollectionMapping object\n * @returns {object} this\n */\nCollection.prototype.mUpdateDocument = function (documents, options, cb) {\n  var data = {\n      body: {}\n    },\n    self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  if (!Array.isArray(documents)) {\n    return cb(new Error('Collection.mUpdateDocument: documents parameter format is invalid (should be an array of documents)'));\n  }\n\n  self.kuzzle.callbackRequired('Collection.mUpdate', cb);\n\n  data.body.documents = documents.map(function (doc) {\n    return (doc instanceof Document) ? doc.serialize() : doc;\n  });\n\n  self.kuzzle.query(this.buildQueryArgs('document', 'mUpdate'), data, options, cb && function (err, res) {\n    cb(err, res && res.result);\n  });\n\n  return self;\n};\n\n/**\n * Retrieves the current specifications of this collection\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Handles the query response\n */\nCollection.prototype.getSpecifications = function (options, cb) {\n  var\n    data = { index: this.index, collection: this.collection },\n    self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.callbackRequired('Collection.getSpecifications', cb);\n\n  self.kuzzle.query(this.buildQueryArgs('collection', 'getSpecifications'), data, options, function (err, res) {\n    cb(err, err ? undefined : res.result);\n  });\n};\n\n/**\n * Publish a realtime message\n *\n * Takes an optional argument object with the following properties:\n *    - volatile (object, default: null):\n *        Additional information passed to notifications to other users\n *\n * @param {object} document - either a Document instance or a JSON object\n * @param {object} [options] - optional arguments\n * @param {responseCallback} [cb] - Returns a raw Kuzzle response\n * @returns {*} this\n */\nCollection.prototype.publishMessage = function (document, options, cb) {\n  var data = {};\n\n  if (document instanceof Document) {\n    data = document.serialize();\n  } else {\n    data.body = document;\n  }\n\n  this.kuzzle.query(this.buildQueryArgs('realtime', 'publish'), data, options, cb);\n\n  return this;\n};\n\n/**\n * Replace an existing document with a new one.\n *\n * Takes an optional argument object with the following properties:\n *    - volatile (object, default: null):\n *        Additional information passed to notifications to other users\n *\n * @param {string} documentId - Unique document identifier of the document to replace\n * @param {object} content - JSON object representing the new document version\n * @param {object} [options] - additional arguments\n * @param {responseCallback} [cb] - Returns an instantiated Document object\n * @return {object} this\n */\nCollection.prototype.replaceDocument = function (documentId, content, options, cb) {\n  var\n    self = this,\n    data = {\n      _id: documentId,\n      body: content\n    };\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.query(this.buildQueryArgs('document', 'createOrReplace'), data, options, cb && function (err, res) {\n    var document;\n\n    if (err) {\n      return cb(err);\n    }\n\n    document = new Document(self, res.result._id, res.result._source, res.result._meta);\n    document.version = res.result._version;\n    cb(null, document);\n  });\n\n  return this;\n};\n\n/**\n * Executes an advanced search on the data collection.\n *\n * /!\\ There is a small delay between documents creation and their existence in our advanced search layer,\n * usually a couple of seconds.\n * That means that a document that was just been created won’t be returned by this function.\n *\n * @param {object} filters - Filters in Elasticsearch Query DSL format\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Handles the query response\n */\n\nCollection.prototype.search = function (filters, options, cb) {\n  var\n    query = {body: filters},\n    self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = {};\n  }\n\n  self.kuzzle.callbackRequired('Collection.search', cb);\n\n  self.kuzzle.query(self.buildQueryArgs('document', 'search'), query, options, function (error, result) {\n    if (error) {\n      return cb(error);\n    }\n\n    cb(null, new KuzzleSearchResult(self, filters, options, result));\n  });\n};\n\n/**\n * A \"scroll\" option can be passed to search queries, creating persistent\n * paginated results.\n * This method can be used to manually get the next page of a search result,\n * instead of using KuzzleSearchResult.next()\n *\n * @param {string} scrollId\n * @param {object} [options]\n * @param {object} [filters]\n * @param {responseCallback} cb\n */\nCollection.prototype.scroll = function (scrollId, options, filters, cb) {\n  var\n    request = {},\n    self = this;\n\n  if (!scrollId) {\n    throw new Error('Collection.scroll: scrollId is required');\n  }\n\n  if (!cb) {\n    cb = filters;\n    filters = null;\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = {};\n  }\n\n  this.kuzzle.callbackRequired('Collection.scroll', cb);\n\n  request.scrollId = scrollId;\n\n  this.kuzzle.query({controller: 'document', action: 'scroll'}, request, options, function (error, result) {\n    if (error) {\n      return cb(error);\n    }\n\n    cb(null, new KuzzleSearchResult(self, filters, options, result));\n  });\n};\n\n/**\n * Retrieves next result of a search with scroll query.\n *\n * @param {string} scrollId\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Handles the query response\n */\nCollection.prototype.scrollSpecifications = function (scrollId, options, cb) {\n  var\n    data = { scrollId: scrollId };\n\n  if (!scrollId) {\n    throw new Error('Collection.scrollSpecifications: scrollId is required');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = {};\n  }\n\n  this.kuzzle.callbackRequired('Collection.scrollSpecifications', cb);\n\n  this.kuzzle.query(\n    { controller: 'collection', action: 'scrollSpecifications'},\n    data,\n    options,\n    function (err, res) {\n      cb (err, err ? undefined : res.result);\n    }\n  );\n};\n\n/**\n * Searches specifications across indexes/collections according to the provided filters\n *\n * @param {object} [filters] - Optional filters in ElasticSearch Query DSL format\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Handles the query response\n */\nCollection.prototype.searchSpecifications = function (filters, options, cb) {\n  var\n    data = { body: { query: filters } },\n    self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = {};\n  }\n\n  self.kuzzle.callbackRequired('Collection.searchSpecifications', cb);\n\n  self.kuzzle.query({ controller: 'collection', action: 'searchSpecifications' }, data, options, function (err, res) {\n    cb(err, err ? undefined : res.result);\n  });\n};\n\n/**\n * Create a subscription room to this data collection with a set of filters.\n * To subscribe to the entire data collection, simply provide an empty filter.\n *\n * @param {object} filters - Filters in Kuzzle DSL format\n * @param {object} [options] - subscriptions options\n * @returns {*} KuzzleRoom object\n */\nCollection.prototype.room = function (filters, options) {\n  return new Room(this, filters, options);\n};\n\n/**\n * Subscribes to this data collection with a set of filters.\n * To subscribe to the entire data collection, simply provide an empty filter.\n *\n * @param {object} filters - Filters in Kuzzle DSL format\n * @param {object} [options] - subscriptions options\n * @param {responseCallback} notificationCB - called for each new notification\n * @returns {*} KuzzleRoom object\n */\nCollection.prototype.subscribe = function (filters, options, notificationCB) {\n  var\n    evtName,\n    room;\n\n  if (!notificationCB && typeof options === 'function') {\n    notificationCB = options;\n    options = null;\n  }\n\n  this.kuzzle.callbackRequired('Collection.subscribe', notificationCB);\n\n  evtName = (options && options.users && options.users !== 'none') ? 'user' : 'document';\n  room = new Room(this, filters, options);\n\n  room.subscribe().on(evtName, notificationCB);\n  return room;\n};\n\n/**\n * Truncate the data collection, removing all stored documents but keeping all associated mappings.\n * This method is a lot faster than removing all documents using a query.\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - returns Kuzzle's response\n * @returns {*} this\n */\nCollection.prototype.truncate = function (options, cb) {\n  var data = {};\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.query(this.buildQueryArgs('collection', 'truncate'), data, options, cb);\n\n  return this;\n};\n\n\n/**\n * Update parts of a document\n *\n * Takes an optional argument object with the following properties:\n *    - volatile (object, default: null):\n *        Additional information passed to notifications to other users\n *\n * @param {string} documentId - Unique document identifier of the document to update\n * @param {object} content - JSON object containing changes to perform on the document\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Returns an instantiated Document object\n * @return {object} this\n */\nCollection.prototype.updateDocument = function (documentId, content, options, cb) {\n  var data = {\n      _id: documentId,\n      body: content\n    },\n    self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  if (options && options.retryOnConflict) {\n    data.retryOnConflict = options.retryOnConflict;\n  }\n\n  self.kuzzle.query(this.buildQueryArgs('document', 'update'), data, options, cb && function (err, res) {\n    if (err) {\n      return cb(err);\n    }\n\n    (new Document(self, res.result._id)).refresh(cb);\n  });\n\n  return self;\n};\n\n/**\n * Updates the current specifications of this collection\n *\n * @param {object} specifications - Specifications content\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n * @return {object} this\n */\nCollection.prototype.updateSpecifications = function (specifications, options, cb) {\n  var\n    collection = {},\n    data = { body: {} },\n    self = this;\n\n  collection[this.collection] = specifications;\n  data.body[this.index] = collection;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.query(this.buildQueryArgs('collection', 'updateSpecifications'), data, options, cb && function (err, res) {\n    cb(err, err ? undefined : res.result);\n  });\n\n  return self;\n};\n\n/**\n * Validates the provided specifications\n *\n * @param {object} specifications - Specifications content\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Handles the query response\n */\nCollection.prototype.validateSpecifications = function (specifications, options, cb) {\n  var\n    collection = {},\n    data = { body: {} },\n    self = this;\n\n  collection[this.collection] = specifications;\n  data.body[this.index] = collection;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.callbackRequired('Collection.validateSpecifications', cb);\n\n  self.kuzzle.query(this.buildQueryArgs('collection', 'validateSpecifications'), data, options, function (err, res) {\n    cb(err, err ? undefined : res.result.valid);\n  });\n};\n\n/**\n * Instantiate a new Document object. Workaround to the module.exports limitation, preventing multiple\n * constructors to be exposed without having to use a factory or a composed object.\n *\n * @param {string} id - document id\n * @param {object} content - document content\n * @constructor\n */\nCollection.prototype.document = function (id, content) {\n  return new Document(this, id, content);\n};\n\n/**\n * Instantiate a new CollectionMapping object. Workaround to the module.exports limitation, preventing multiple\n * constructors to be exposed without having to use a factory or a composed object.\n *\n * @param {object} [mapping] - mapping to instantiate the CollectionMapping object with\n * @constructor\n */\nCollection.prototype.collectionMapping = function (mapping) {\n  return new CollectionMapping(this, mapping);\n};\n\nmodule.exports = Collection;\n","const Document = require('./Document');\n\n/**\n * @param {Collection} collection\n * @param {object} filters\n * @param {object} options\n * @param {object} raw \n * @property {Collection} collection\n * @property {number} total\n * @property {Document[]} documents\n * @property {object} aggregations\n * @property {object} options\n * @property {object} filters\n * @property {number} fetched\n * @constructor\n */\nclass SearchResult {\n  constructor (collection, filters, options, raw) {\n    Object.defineProperties(this, {\n      // read-only properties\n      collection: {\n        value: collection,\n        enumerable: true\n      },\n      total: {\n        value: raw.result.total,\n        enumerable: true\n      },\n      documents: {\n        value: raw.result.hits.map(doc => {\n          const d = new Document(collection, doc._id, doc._source, doc._meta);\n          d.version = doc._version;\n          return d;\n        }),\n        enumerable: true\n      },\n      aggregations: {\n        value: raw.result.aggregations || {},\n        enumerable: true\n      },\n      options: {\n        value: {\n          from: options.from,\n          size: options.size,\n          scrollId: raw.result._scroll_id\n        },\n        enumerable: true\n      },\n      filters: {\n        value: filters || {},\n        enumerable: true\n      },\n      // writable properties\n      fetched: {\n        value: raw.result.hits.length,\n        enumerable: true,\n        writable: true\n      }\n    });\n\n    Object.freeze(this.filters);\n    Object.freeze(this.options);\n    Object.freeze(this.aggregations);\n\n    // promisifying\n    if (this.collection.kuzzle.bluebird) {\n      const whitelist = ['fetchNext'];\n\n      return this.collection.kuzzle.bluebird.promisifyAll(this, {\n        suffix: 'Promise',\n        filter: (name, func, target, passes) => passes && whitelist.includes(name)\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * @param {function} cb\n   */\n  fetchNext (cb) {\n    const updateAfterSearch = (error, result) => {\n      if (error) {\n        return cb(error);\n      }\n\n      result.fetched += this.fetched;\n      cb(null, result);\n    };\n    \n    this.collection.kuzzle.callbackRequired('SearchResult.fetchNext', cb);\n\n    if (this.fetched >= this.total) {\n      return cb(null, null);\n    }\n\n    // retrieve next results with scroll if original search use it\n    if (this.options.scrollId) {\n      this.collection.scroll(this.options.scrollId, null, this.filters || {}, updateAfterSearch);\n      return;\n    }\n\n    // retrieve next results using ES's search_after\n    if (this.options.size !== undefined && this.filters.sort) {\n      const \n        filters = Object.assign({}, this.filters, {search_after: []}),\n        lastDocumentContent = this.documents[this.documents.length - 1].content;\n\n      for (const sortRule of filters.sort) {\n        if (typeof sortRule === 'string') {\n          filters.search_after.push(lastDocumentContent[sortRule]);\n        } else {\n          filters.search_after.push(lastDocumentContent[Object.keys(sortRule)[0]]);\n        }\n      }\n\n      this.collection.search(filters, {size: this.options.size}, updateAfterSearch);\n      return;\n    }\n\n    // retrieve next results with from/size if original search use it\n    if (this.options.from !== undefined && this.options.size !== undefined) {\n      // check if we need to do next request to fetch all matching documents\n      const opts = {\n        from: this.options.from + this.options.size,\n        size: this.options.size\n      };\n\n      if (opts.from >= this.total) {\n        return cb(null, null);\n      }\n\n      this.collection.search(this.filters, opts, updateAfterSearch);\n      return;\n    }\n\n    cb(new Error('Unable to retrieve next results from search: missing scrollId or from/size params'));\n  }\n}\n\nmodule.exports = SearchResult;\n","/**\n * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n *\n * @callback responseCallback\n * @param {Object} err - Error object, NULL if the query is successful\n * @param {Object} [data] - The content of the query response\n */\n\n\n/**\n *  When creating a new data collection in the persistent data storage layer, Kuzzle uses a default mapping.\n *  It means that, by default, you won’t be able to exploit the full capabilities of our persistent data storage layer\n *  (currently handled by ElasticSearch), and your searches may suffer from below-average performances, depending on\n *  the amount of data you stored in a collection and the complexity of your database.\n *\n *  The CollectionMapping object allow to get the current mapping of a data collection and to modify it if needed.\n *\n * @param {object} collection - Instance of the inherited Collection object\n * @param {object} [mapping] - mappings\n * @constructor\n */\nfunction CollectionMapping(collection, mapping) {\n  Object.defineProperties(this, {\n    //read-only properties\n    collection: {\n      value: collection,\n      enumerable: true\n    },\n    kuzzle: {\n      value: collection.kuzzle,\n      enumerable: true\n    },\n    // writable properties\n    mapping: {\n      value: mapping || {},\n      enumerable: true,\n      writable: true\n    }\n  });\n\n  if (this.kuzzle.bluebird) {\n    return this.kuzzle.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var blacklist = ['set'];\n\n        return passes && blacklist.indexOf(name) === -1;\n      }\n    });\n  }\n\n  return this;\n}\n\n/**\n * Applies the new mapping to the data collection.\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n */\nCollectionMapping.prototype.apply = function (options, cb) {\n  var\n    self = this,\n    data = {\n      body: {\n        properties: this.mapping\n      }\n    };\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.query(this.collection.buildQueryArgs('collection', 'updateMapping'), data, options, function (err) {\n    if (err) {\n      return cb && cb(err);\n    }\n\n    self.refresh(options, cb);\n  });\n\n  return this;\n};\n\n/**\n * Replaces the current content with the mapping stored in Kuzzle\n *\n * Calling this function will discard any uncommited changes. You can commit changes by calling the “apply” function\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {*} this\n */\nCollectionMapping.prototype.refresh = function (options, cb) {\n  var\n    self = this,\n    data = {};\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.query(this.collection.buildQueryArgs('collection', 'getMapping'), data, options, function (err, res) {\n    if (err) {\n      return cb ? cb(err) : false;\n    }\n\n    if (res.result[self.collection.index]) {\n      if (res.result[self.collection.index].mappings[self.collection.collection]) {\n        self.mapping = res.result[self.collection.index].mappings[self.collection.collection].properties;\n\n        // Mappings can be empty. The mapping property should never be \"undefined\"\n        if (self.mapping === undefined) {\n          self.mapping = {};\n        }\n      } else {\n        return cb && cb(new Error('No mapping found for collection ' + self.collection.collection));\n      }\n    } else {\n      return cb && cb(new Error('No mapping found for index ' + self.collection.index));\n    }\n\n    if (cb) {\n      cb(null, self);\n    }\n  });\n\n  return this;\n};\n\n\n/**\n * Adds or updates a field mapping.\n *\n * Changes made by this function won’t be applied until you call the apply method\n *\n * @param {string} field - Name of the field from which the mapping is to be added or updated\n * @param {object} mapping - corresponding field mapping\n * @returns {CollectionMapping}\n */\nCollectionMapping.prototype.set = function (field, mapping) {\n  this.mapping[field] = mapping;\n\n  return this;\n};\n\nmodule.exports = CollectionMapping;\n","'use strict';\n\nconst\n  KuzzleEventEmitter = require('./eventEmitter');\n\n/**\n * This object is the result of a subscription request, allowing to manipulate the subscription itself.\n *\n * In Kuzzle, you don’t exactly subscribe to a room or a topic but, instead, you subscribe to documents.\n *\n * What it means is that, to subscribe, you provide to Kuzzle a set of matching filters.\n * Once you have subscribed, if a pub/sub message is published matching your filters, or if a matching stored\n * document change (because it is created, updated or deleted), then you’ll receive a notification about it.\n *\n */\nclass Room extends KuzzleEventEmitter {\n  /*\n   * @constructor\n   * @param {object} collection - an instantiated and valid kuzzle object\n   * @param {object} [filters] - Filters in Kuzzle DSL format\n   * @param {object} [options] - subscription optional configuration\n   */\n  constructor(collection, filters, options) {\n    super();\n\n    let _roomId = null;\n\n    // Define properties\n    Object.defineProperties(this, {\n      // private properties\n      roomstate: {\n        // Values can be: inactive, subscribing, active\n        value: 'inactive',\n        writable: true\n      },\n      kuzzle: {\n        value: collection.kuzzle\n      },\n      isListening: {\n        value: false,\n        writable: true\n      },\n      //listeners\n      resubscribe: {\n        value: () => {\n          this.roomstate = 'inactive';\n          this.error = null;\n          this.subscribe();\n        }\n      },\n      deactivate: {\n        value: () => {\n          this.roomstate = 'inactive';\n        }\n      },\n      resubscribeConditional: {\n        value: () => {\n          this.roomstate = 'inactive';\n          \n          if (this.autoResubscribe) {\n            this.subscribe();\n          }\n        }\n      },\n      //enumerables\n      channel: {\n        value: null,\n        writable: true,\n        enumerable: true\n      },\n      scope: {\n        value: options && options.scope ? options.scope : 'all',\n        enumerable: true\n      },\n      state: {\n        value: options && options.state ? options.state : 'done',\n        enumerable: true\n      },\n      users: {\n        value: options && options.users ? options.users : 'none',\n        enumerable: true\n      },\n      // read-only properties\n      collection: {\n        value: collection,\n        enumerable: true\n      },\n      filters: {\n        value: filters ? filters : {},\n        enumerable: true,\n      },\n      roomId: {\n        enumerable: true,\n        get: () => _roomId,\n        set: value => {\n          if (!_roomId) {\n            _roomId = value;\n          }\n        }\n      },\n      // writable properties\n      volatile: {\n        value: (options && options.volatile) ? options.volatile : {},\n        enumerable: true,\n        writable: true\n      },\n      subscribeToSelf: {\n        value: options && typeof options.subscribeToSelf === 'boolean' ? options.subscribeToSelf : true,\n        enumerable: true,\n        writable: true\n      },\n      autoResubscribe: {\n        value: options && typeof options.autoResubscribe === 'boolean' ? options.autoResubscribe : collection.kuzzle.autoResubscribe,\n        enumerable: true\n      }\n    });\n\n    if (this.kuzzle.bluebird) {\n      return this.kuzzle.bluebird.promisifyAll(this, {\n        suffix: 'Promise',\n        filter: function (name, func, target, passes) {\n          const whitelist = ['count', 'subscribe', 'unsubscribe', 'onDone'];\n\n          return passes && whitelist.indexOf(name) !== -1;\n        }\n      });\n    }\n  }\n\n  /**\n   * Returns the number of other subscriptions on that room.\n   *\n   * @param {responseCallback} cb - Handles the query response\n   */\n  count(cb) {\n    this.kuzzle.callbackRequired('Room.count', cb);\n\n    const data = {body: {roomId: this.roomId}};\n\n    if (this.roomstate !== 'active') {\n      return cb(new Error('Cannot count subscriptions on an non-active room'));\n    }\n\n    this.kuzzle.query(this.collection.buildQueryArgs('realtime', 'count'), data, function (err, res) {\n      cb(err, res && res.result.count);\n    });\n  }\n\n  /**\n   * Subscribes to Kuzzle \n   * (do nothing if a subscription is active or underway)\n   * \n   * @param options\n   * @param {responseCallback} cb - called when the subscription is ready.\n   * @return {*} this\n   */\n  subscribe(options, cb) {\n    if (!cb && typeof options === 'function') {\n      cb = options;\n      options = null;\n    }\n\n    if (cb) {\n      this.onDone(cb);\n    }\n\n    // If the room subscription is active, just call the callback.\n    if (this.roomstate === 'active') {\n      this.emit('done', null, this);\n      return this;\n    }\n\n    // If the room is already subscribing, wait for its activation.\n    if (this.roomstate === 'subscribing') {\n      return this;\n    }\n\n    // If the room is still inactive, start the subscription.\n    this.error = null;\n    this.roomstate = 'subscribing';\n\n    this.kuzzle.subscribe(this, options, (error, result) => {\n      if (error) {\n        if (error.message === 'Not Connected') {\n          return this.kuzzle.once('connected', this.resubscribe);\n        }\n\n        this.roomstate = 'inactive';\n        this.error = new Error('Error during Kuzzle subscription: ' + error.message);\n        this.emit('done', this.error);\n        return null;\n      }\n\n      this.roomId = result.roomId;\n      this.channel = result.channel;\n      this.roomstate = 'active';\n\n      if (!this.isListening) {\n        this.kuzzle.addListener('disconnected', this.deactivate);\n        this.kuzzle.addListener('tokenExpired', this.deactivate);\n        this.kuzzle.addListener('reconnected', this.resubscribeConditional);\n        this.isListening = true;\n      }\n\n      this.emit('done', null, this);\n    });\n\n    return this;\n  }\n\n  /**\n   * Unsubscribes from Kuzzle.\n   *\n   * Stop listening immediately.\n   * @param {responseCallback} cb - Handles the query response\n   * @return {*} this\n   */\n  unsubscribe(cb) {\n    if (this.roomstate === 'subscribing') {\n      if (cb) {\n        cb(new Error('Cannot unsubscribe a room while a subscription attempt is underway'));\n      }\n\n      return this;\n    }\n\n    if (this.isListening) {\n      this.kuzzle.removeListener('disconnected', this.deactivate);\n      this.kuzzle.removeListener('tokenExpired', this.deactivate);\n      this.kuzzle.removeListener('reconnected', this.resubscribeConditional);\n      this.isListening = false;\n    }\n\n    if (this.roomstate === 'active') {\n      this.kuzzle.unsubscribe(this, cb);\n    }\n    else if (cb) {\n      cb(null, this.roomId);\n    }\n\n    this.roomstate = 'inactive';\n\n    return this;\n  }\n\n  /**\n   * Notify listeners\n   *\n   * @param {Object} data - data to send. Must contain `data.type` as eventName.\n   * @return {*} this\n   */\n  notify(data) {\n    if (data.type === undefined) {\n      throw new Error('Room.notify: argument must match {type: <document|user>}');\n    }\n    if (!data.fromSelf || this.subscribeToSelf) {\n      this.emit(data.type, data);\n    }\n    return this;\n  }\n\n  /**\n   * Registers a callback to be called with a subscription result\n   * @param {Function} cb\n   */\n  onDone(cb) {\n    if (!cb || typeof cb !== 'function') {\n      throw new Error('Room.onDone: a callback argument is required.');\n    }\n\n    if (this.error) {\n      cb(this.error);\n    }\n    else if (this.roomstate === 'active') {\n      cb(null, this);\n    }\n    else {\n      this.once('done', cb);\n    }\n\n    return this;\n  }\n}\n\nmodule.exports = Room;\n","var\n  Role = require('./Role'),\n  Profile = require('./Profile'),\n  User = require('./User');\n\n/**\n * Kuzzle security constructor\n *\n * @param kuzzle\n * @returns {Security}\n * @constructor\n */\nfunction Security(kuzzle) {\n\n  Object.defineProperty(this, 'kuzzle', {\n    value: kuzzle\n  });\n\n  Object.defineProperty(this, 'buildQueryArgs', {\n    value: function (action) {\n      return {\n        controller: 'security',\n        action: action\n      };\n    }\n  });\n\n  if (this.kuzzle.bluebird) {\n    return this.kuzzle.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var blacklist = ['role', 'profile', 'user', 'isActionAllowed'];\n\n        return passes && blacklist.indexOf(name) === -1;\n      }\n    });\n  }\n\n  return this;\n}\n\n\n/**\n * Retrieve a single Role using its unique role ID.\n *\n * @param {string} id\n * @param {object|responseCallback} [options] - Optional parameters\n * @param {responseCallback} [cb] - returns Kuzzle's response\n */\nSecurity.prototype.fetchRole = function (id, options, cb) {\n  var\n    data,\n    self = this;\n\n  if (!id) {\n    throw new Error('Id parameter is mandatory for fetchRole function');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data = {_id: id};\n\n  self.kuzzle.callbackRequired('Security.fetchRole', cb);\n\n  self.kuzzle.query(this.buildQueryArgs('getRole'), data, options, function (err, response) {\n    cb(err, err ? undefined : new Role(self, response.result._id, response.result._source, response.result._meta));\n  });\n};\n\n/**\n * Executes a search on roles according to a filter\n *\n * /!\\ There is a small delay between role creation and their existence in our persistent search layer,\n * usually a couple of seconds.\n * That means that a role that was just been created won’t be returned by this function.\n *\n * @param {Object} filters - this object can contains an array `indexes` with a list of index id, a integer `from` and a integer `size`\n * @param {object|responseCallback} [options] - Optional parameters\n * @param {responseCallback} [cb] - returns Kuzzle's response\n *\n */\nSecurity.prototype.searchRoles = function (filters, options, cb) {\n  var\n    self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.callbackRequired('Security.searchRoles', cb);\n\n  self.kuzzle.query(this.buildQueryArgs('searchRoles'), {body: filters}, options, function (error, result) {\n    var documents;\n\n    if (error) {\n      return cb(error);\n    }\n\n    documents = result.result.hits.map(function (doc) {\n      return new Role(self, doc._id, doc._source, doc._meta);\n    });\n\n    cb(null, { total: result.result.total, roles: documents });\n  });\n};\n\n/**\n * Create a new role in Kuzzle.\n *\n * Takes an optional argument object with the following property:\n *    - replaceIfExist (boolean, default: false):\n *        If the same role already exists: throw an error if sets to false.\n *        Replace the existing role otherwise\n *\n * @param {string} id - role identifier\n * @param {object} content - a plain javascript object representing the role\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} [cb] - (optional) Handles the query response\n */\nSecurity.prototype.createRole = function (id, content, options, cb) {\n  var\n    self = this,\n    data = {},\n    action = 'createRole';\n\n  if (!id || typeof id !== 'string') {\n    throw new Error('Security.createRole: cannot create a role without a role ID');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data._id = id;\n  data.body = content;\n\n  if (options) {\n    action = options.replaceIfExist ? 'createOrReplaceRole' : 'createRole';\n  }\n\n  self.kuzzle.query(this.buildQueryArgs(action), data, options, cb && function (err, res) {\n    cb(err, err ? undefined : new Role(self, res.result._id, res.result._source, res.result._meta));\n  });\n};\n\n\n/**\n * Update a role in Kuzzle.\n *\n * @param {string} id - role identifier\n * @param {object} content - a plain javascript object representing the role's modification\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} [cb] - (optional) Handles the query response\n * @returns {Security} this object\n */\nSecurity.prototype.updateRole = function (id, content, options, cb) {\n  var\n    self = this,\n    data = {_id: id, body: content},\n    action = 'updateRole';\n\n  if (!id || typeof id !== 'string') {\n    throw new Error('Security.updateRole: cannot update a role without a role ID');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.query(this.buildQueryArgs(action), data, options, cb && function (err, res) {\n    cb(err, err ? undefined : new Role(self, id, content, res.result._meta));\n  });\n\n  return this;\n};\n\n/**\n * Delete role.\n *\n * There is a small delay between role deletion and their deletion in our advanced search layer,\n * usually a couple of seconds.\n * That means that a role that was just been delete will be returned by this function\n *\n *\n * @param {string} id - Role id to delete\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {Security} this object\n */\nSecurity.prototype.deleteRole = function (id, options, cb) {\n  var data = {_id: id};\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.query(this.buildQueryArgs('deleteRole'), data, options, cb && function (err, res) {\n    cb(err, err ? undefined : res.result._id);\n  });\n\n  return this;\n};\n\n/**\n * Instantiate a new Role object. Workaround to the module.exports limitation, preventing multiple\n * constructors to be exposed without having to use a factory or a composed object.\n *\n * @param {string} id - role id\n * @param {object} content - role content\n * @param {object} meta - role metadata\n * @constructor\n */\nSecurity.prototype.role = function(id, content, meta) {\n  return new Role(this, id, content, meta);\n};\n\n\n/**\n * Get a specific profile from kuzzle\n *\n *\n * @param {string} id\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} cb - returns Kuzzle's response\n */\nSecurity.prototype.fetchProfile = function (id, options, cb) {\n  var\n    data,\n    self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  if (!id || typeof id !== 'string') {\n    throw new Error('Id parameter is mandatory for fetchProfile function');\n  }\n\n\n  data = {_id: id};\n\n  self.kuzzle.callbackRequired('Security.fetchProfile', cb);\n\n  self.kuzzle.query(this.buildQueryArgs('getProfile'), data, options, function (error, response) {\n    cb(error, error ? undefined : new Profile(self, response.result._id, response.result._source, response.result._meta));\n  });\n};\n\n/**\n * Executes a search on profiles according to a filter\n *\n *\n * /!\\ There is a small delay between profile creation and their existence in our persistent search layer,\n * usually a couple of seconds.\n * That means that a profile that was just been created won’t be returned by this function.\n *\n * @param {Object} filters - this object can contains an array `roles` with a list of roles id, a integer `from` and a integer `size`\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} [cb] - returns Kuzzle's response\n */\nSecurity.prototype.searchProfiles = function (filters, options, cb) {\n  var\n    self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.callbackRequired('Security.searchProfiles', cb);\n\n  self.kuzzle.query(this.buildQueryArgs('searchProfiles'), {body: filters}, options, function (error, response) {\n    var\n      documents,\n      scrollId;\n\n    if (error) {\n      return cb(error);\n    }\n\n    documents = response.result.hits.map(function (doc) {\n      return new Profile(self, doc._id, doc._source, doc._meta);\n    });\n\n    if (response.result.scrollId) {\n      scrollId = response.result.scrollId;\n    }\n\n    cb(null, { total: response.result.total, profiles: documents, scrollId: scrollId });\n  });\n};\n\n/**\n * Create a new profile in Kuzzle.\n *\n * Takes an optional argument object with the following property:\n *    - replaceIfExist (boolean, default: false):\n *        If the same profile already exists: throw an error if sets to false.\n *        Replace the existing profile otherwise\n *\n * @param {string} id - profile identifier\n * @param {array} policies - list of policies to attach to the new profile\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} [cb] - (optional) Handles the query response\n */\nSecurity.prototype.createProfile = function (id, policies, options, cb) {\n  var\n    self = this,\n    data = {},\n    action = 'createProfile';\n\n  if (!id || typeof id !== 'string') {\n    throw new Error('Security.createProfile: cannot create a profile without a profile ID');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data._id = id;\n\n  if (policies) {\n    data.body = { policies: policies };\n  }\n\n  if (options) {\n    action = options.replaceIfExist ? 'createOrReplaceProfile' : 'createProfile';\n  }\n\n  self.kuzzle.query(this.buildQueryArgs(action), data, options, cb && function (err, res) {\n    cb(err, err ? undefined : new Profile(self, res.result._id, res.result._source, res.result._meta));\n  });\n};\n\n\n/**\n * Update a profile in Kuzzle.\n *\n * @param {string} id - profile identifier\n * @param {array} policies - the list of policies to apply to this profile\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} [cb] - (optional) Handles the query response\n * @returns {Security} this object\n */\nSecurity.prototype.updateProfile = function (id, policies, options, cb) {\n  var\n    self = this,\n    data = {},\n    action = 'updateProfile';\n\n  if (!id || typeof id !== 'string') {\n    throw new Error('Security.updateProfile: cannot update a profile without a profile ID');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data._id = id;\n\n  if (policies) {\n    data.body = {policies: policies};\n  }\n\n  self.kuzzle.query(this.buildQueryArgs(action), data, options, cb && function (err, res) {\n    var updatedContent = {};\n\n    if (err) {\n      return cb(err);\n    }\n\n    Object.keys(res.result._source).forEach(function (property) {\n      updatedContent[property] = res.result._source[property];\n    });\n\n    cb(null, new Profile(self, res.result._id, updatedContent, res.result._meta));\n  });\n\n  return this;\n};\n\n/**\n * Delete profile.\n *\n * There is a small delay between profile deletion and their deletion in our advanced search layer,\n * usually a couple of seconds.\n * That means that a profile that was just been delete will be returned by this function\n *\n *\n * @param {string} id - Profile id to delete\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {Security} this object\n */\nSecurity.prototype.deleteProfile = function (id, options, cb) {\n  var data = {_id: id};\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.query(this.buildQueryArgs('deleteProfile'), data, options, cb && function (err, res) {\n    cb(err, err ? undefined : res.result._id);\n  });\n\n  return this;\n};\n\n/**\n * @param {string} scrollId\n * @param {object} [options]\n * @param {responseCallback} cb\n */\nSecurity.prototype.scrollProfiles = function (scrollId, options, cb) {\n  var\n    request = {},\n    self = this;\n\n  if (!scrollId) {\n    throw new Error('Security.scrollProfiles: scrollId is required');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = {};\n  }\n\n  this.kuzzle.callbackRequired('Security.scrollProfiles', cb);\n\n  request.scrollId = scrollId;\n\n  if (options && options.scroll) {\n    request.scroll = options.scroll;\n  }\n\n  this.kuzzle.query({controller: 'security', action: 'scrollProfiles'}, request, options, function (error, result) {\n    var profiles = [];\n\n    if (error) {\n      return cb(error);\n    }\n\n    result.result.hits.forEach(function (profile) {\n      var newProfile = new Profile(self, profile._id, profile._source, profile._meta);\n\n      newProfile.version = profile._version;\n\n      profiles.push(newProfile);\n    });\n\n    cb(null, {\n      total: result.result.total,\n      profiles: profiles,\n      scrollId: scrollId\n    });\n  });\n};\n\n/**\n * Instantiate a new Profile object. Workaround to the module.exports limitation, preventing multiple\n * constructors to be exposed without having to use a factory or a composed object.\n *\n * @param {string} id - profile id\n * @param {object} content - profile content\n * @param {object} meta - profile metadata\n * @constructor\n */\nSecurity.prototype.profile = function(id, content, meta) {\n  return new Profile(this, id, content, meta);\n};\n\n/**\n * Get a specific user from kuzzle using its unique ID\n *\n * @param {string} id\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} cb - returns Kuzzle's response\n */\nSecurity.prototype.fetchUser = function (id, options, cb) {\n  var\n    data = {_id: id},\n    self = this;\n\n  if (!id || typeof id !== 'string') {\n    throw new Error('Id parameter is mandatory for fetchUser function');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.callbackRequired('Security.fetchUser', cb);\n\n  self.kuzzle.query(this.buildQueryArgs('getUser'), data, options, function (err, response) {\n    cb(err, err ? undefined : new User(self, response.result._id, response.result._source, response.result._meta));\n  });\n};\n\n/**\n * Executes a search on user according to a filter\n *\n * /!\\ There is a small delay between user creation and their existence in our persistent search layer,\n * usually a couple of seconds.\n * That means that a user that was just been created won’t be returned by this function.\n *\n * @param {Object} filters - same filters as documents filters\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} [cb] - returns Kuzzle's response\n */\nSecurity.prototype.searchUsers = function (filters, options, cb) {\n  var\n    self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.callbackRequired('Security.searchUsers', cb);\n\n  self.kuzzle.query(this.buildQueryArgs('searchUsers'), {body: filters}, options, function (error, response) {\n    var\n      documents,\n      scrollId = null;\n\n    if (error) {\n      return cb(error);\n    }\n\n    documents = response.result.hits.map(function (doc) {\n      return new User(self, doc._id, doc._source, doc._meta);\n    });\n\n    if (response.result.scrollId) {\n      scrollId = response.result.scrollId;\n    }\n\n    cb(null, { total: response.result.total, users: documents, scrollId: scrollId });\n  });\n};\n\n/**\n * Create a new user in Kuzzle.\n *\n * @param {string} id - user identifier\n * @param {object} content - attribute `profileIds` in `content` must only contain an array of profile ids\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} [cb] - (optional) Handles the query response\n */\nSecurity.prototype.createUser = function (id, content, options, cb) {\n  var\n    self = this,\n    data = {_id: id, body: content};\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.query(self.buildQueryArgs('createUser'), data, null, cb && function (err, res) {\n    cb(err, err ? undefined : new User(self, res.result._id, res.result._source, res.result._meta));\n  });\n};\n\n/**\n * Replace an user in Kuzzle.\n *\n * @param {string} id - user identifier\n * @param {object} content - attribute `profileIds` in `content` must only contain an array of profile ids\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} [cb] - (optional) Handles the query response\n */\nSecurity.prototype.replaceUser = function (id, content, options, cb) {\n  var\n    self = this,\n    data = {_id: id, body: content};\n\n  if (!id || typeof id !== 'string') {\n    throw new Error('Security.replaceUser: cannot replace a user without a user ID');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.query(this.buildQueryArgs('replaceUser'), data, options, cb && function (err, res) {\n    cb(err, err ? undefined : new User(self, res.result._id, res.result._source, res.result._meta));\n  });\n};\n\n/**\n * Create a new restricted user in Kuzzle.\n *\n * This function will create a new user. It is not usable to update an existing user.\n * This function allows anonymous users to create a \"restricted\" user with predefined rights.\n *\n * @param {string} id - user identifier\n * @param {object} content - attribute `profile` in `content` must only contains the profile id\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} [cb] - (optional) Handles the query response\n */\nSecurity.prototype.createRestrictedUser = function (id, content, options, cb) {\n  var\n    self = this,\n    data = {_id: id, body: content};\n\n  if (content.profileIds) {\n    throw new Error('Security.createRestrictedUser: cannot provide profileIds');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.query(this.buildQueryArgs('createRestrictedUser'), data, null, cb && function (err, res) {\n    cb(err, err ? undefined : new User(self, res.result._id, res.result._source));\n  });\n};\n\n\n/**\n * Update an user in Kuzzle.\n *\n * @param {string} id - user identifier\n * @param {object} content - a plain javascript object representing the user's modification\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} [cb] - (optional) Handles the query response\n * @returns {Security} this object\n */\nSecurity.prototype.updateUser = function (id, content, options, cb) {\n  var\n    self = this,\n    data = {},\n    action = 'updateUser';\n\n  if (!id || typeof id !== 'string') {\n    throw new Error('Security.updateUser: cannot update an user without an user ID');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data._id = id;\n  data.body = content;\n\n  self.kuzzle.query(this.buildQueryArgs(action), data, options, cb && function (err, res) {\n    cb(err, err ? undefined : new User(self, res.result._id, res.result._source, res.result._meta));\n  });\n\n  return this;\n};\n\n/**\n * Delete user.\n *\n * There is a small delay between user deletion and their deletion in our advanced search layer,\n * usually a couple of seconds.\n * That means that a user that was just been delete will be returned by this function\n *\n *\n * @param {string} id - Profile id to delete\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {Security} this object\n */\nSecurity.prototype.deleteUser = function (id, options, cb) {\n  var data = {_id: id};\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.query(this.buildQueryArgs('deleteUser'), data, options, cb && function (err, res) {\n    cb(err, err ? undefined : res.result._id);\n  });\n\n  return this;\n};\n\n/**\n * @param {string} scrollId\n * @param {object} [options]\n * @param {responseCallback} cb\n */\nSecurity.prototype.scrollUsers = function (scrollId, options, cb) {\n  var\n    request = {},\n    self = this;\n\n  if (!scrollId) {\n    throw new Error('Security.scrollUsers: scrollId is required');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = {};\n  }\n\n  this.kuzzle.callbackRequired('Security.scrollUsers', cb);\n\n  request.scrollId = scrollId;\n\n  if (options && options.scroll) {\n    request.scroll = options.scroll;\n  }\n\n  this.kuzzle.query({controller: 'security', action: 'scrollUsers'}, request, options, function (error, result) {\n    var users = [];\n\n    if (error) {\n      return cb(error);\n    }\n\n    result.result.hits.forEach(function (user) {\n      var newUser = new User(self, user._id, user._source, user._meta);\n\n      newUser.version = user._version;\n\n      users.push(newUser);\n    });\n\n    cb(null, {\n      total: result.result.total,\n      users: users,\n      scrollId: scrollId\n    });\n  });\n\n  return this;\n};\n\n/**\n * Instantiate a new User object. Workaround to the module.exports limitation, preventing multiple\n * constructors to be exposed without having to use a factory or a composed object.\n *\n * @param {string} id - user id\n * @param {object} content - user content\n * @param {object} meta - user metadata\n * @constructor\n */\nSecurity.prototype.user = function(id, content, meta) {\n  return new User(this, id, content, meta);\n};\n\n/**\n * Tells whether an action is allowed, denied or conditional based on the rights\n * rights provided as the first argument. An action is defined as a couple of\n * action and controller (mandatory), plus an index and a collection(optional).\n *\n * @param {object} rights - The rights rights associated to a user\n *                            (see getMyrights and getUserrights).\n * @param {string} controller - The controller to check the action onto.\n * @param {string} action - The action to perform.\n * @param {string} index - (optional) The name of index to perform the action onto.\n * @param {string} collection - (optional) The name of the collection to perform the action onto.\n *\n * @returns {string} ['allowed', 'denied', 'conditional'] where conditional cases\n *                   correspond to rights containing closures.\n *                   See also http://kuzzle.io/guide/#roles-definition\n */\nSecurity.prototype.isActionAllowed = function(rights, controller, action, index, collection) {\n  var filteredRights;\n\n  if (!rights || typeof rights !== 'object') {\n    throw new Error('rights parameter is mandatory for isActionAllowed function');\n  }\n  if (!controller || typeof controller !== 'string') {\n    throw new Error('controller parameter is mandatory for isActionAllowed function');\n  }\n  if (!action || typeof action !== 'string') {\n    throw new Error('action parameter is mandatory for isActionAllowed function');\n  }\n\n  // We filter in all the rights that match the request (including wildcards).\n  filteredRights = rights\n    .filter(function (right) {\n      return right.controller === controller || right.controller === '*';\n    })\n    .filter(function (right) {\n      return right.action === action || right.action === '*';\n    })\n    .filter(function (right) {\n      return right.index === index || right.index === '*';\n    })\n    .filter(function (right) {\n      return right.collection === collection || right.collection === '*';\n    });\n\n  // Then, if at least one right allows the action, we return 'allowed'\n  if (filteredRights.some(function (item) { return item.value === 'allowed'; })) {\n    return 'allowed';\n  }\n  // If no right allows the action, we check for conditionals.\n  if (filteredRights.some(function (item) { return item.value === 'conditional'; })) {\n    return 'conditional';\n  }\n  // Otherwise we return 'denied'.\n  return 'denied';\n};\n\n\n/**\n * Gets the rights array of a given user.\n *\n * @param {string} userId The id of the user.\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {function} cb The callback containing the normalized array of rights.\n */\nSecurity.prototype.getUserRights = function (userId, options, cb) {\n  var\n    data = {_id: userId},\n    self = this;\n\n  if (!userId || typeof userId !== 'string') {\n    throw new Error('userId parameter is mandatory for getUserRights function');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.callbackRequired('Kuzzle.getUserRights', cb);\n\n  this.kuzzle.query(this.buildQueryArgs('getUserRights'), data, options, cb && function (err, res) {\n    cb(err, err ? undefined : res.result.hits);\n  });\n};\n\n/**\n * Create credentials of the specified <strategy> for the user <kuid>.\n *\n * @param strategy\n * @param kuid\n * @param credentials\n * @param options\n * @param cb\n * @returns {Security}\n */\nSecurity.prototype.createCredentials = function (strategy, kuid, credentials, options, cb) {\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.query({controller: 'security', action: 'createCredentials'}, {_id: kuid, strategy: strategy, body: credentials}, options, function(err, res) {\n    if (!err) {\n      cb && cb(null, res.result._source);\n    } else {\n      cb && cb(err);\n    }\n  });\n\n  return this;\n};\n\n/**\n * Delete credentials of the specified <strategy> for the user <kuid> .\n *\n * @param strategy\n * @param kuid\n * @param options\n * @param cb\n * @returns {Security}\n */\nSecurity.prototype.deleteCredentials = function (strategy, kuid, options, cb) {\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.query({controller: 'security', action: 'deleteCredentials'}, {strategy: strategy, _id: kuid}, options, typeof cb !== 'function' ? null : function(err, res) {\n    if (!err) {\n      cb && cb(null, res.result);\n    } else {\n      cb && cb(err);\n    }\n  });\n\n  return this;\n};\n\n/**\n * Retrieve a list of accepted fields per authentication strategy.\n *\n * @param options\n * @param cb\n */\nSecurity.prototype.getAllCredentialFields = function (options, cb) {\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.query({controller: 'security', action: 'getAllCredentialFields'}, {}, options, typeof cb !== 'function' ? null : function(err, res) {\n    if (!err) {\n      cb && cb(null, res.result);\n    } else {\n      cb && cb(err);\n    }\n  });\n};\n\n/**\n * Retrieve the list of accepted field names by the specified <strategy>.\n *\n * @param strategy\n * @param options\n * @param cb\n */\nSecurity.prototype.getCredentialFields = function (strategy, options, cb) {\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.query({controller: 'security', action: 'getCredentialFields'}, {strategy: strategy}, options, typeof cb !== 'function' ? null : function(err, res) {\n    if (!err) {\n      cb && cb(null, res.result);\n    } else {\n      cb && cb(err);\n    }\n  });\n};\n\n/**\n * Get credential information of the specified <strategy> for the user <kuid>.\n *\n * @param strategy\n * @param kuid\n * @param options\n * @param cb\n */\nSecurity.prototype.getCredentials = function (strategy, kuid, options, cb) {\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.query({controller: 'security', action: 'getCredentials'}, {strategy: strategy, _id: kuid}, options, typeof cb !== 'function' ? null : function(err, res) {\n    if (!err) {\n      cb && cb(null, res.result);\n    } else {\n      cb && cb(err);\n    }\n  });\n};\n\n/**\n * Check the existence of the specified <strategy>’s credentials for the user <kuid>.\n *\n * @param strategy\n * @param kuid\n * @param options\n * @param cb\n */\nSecurity.prototype.hasCredentials = function (strategy, kuid, options, cb) {\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.query({controller: 'security', action: 'hasCredentials'}, {strategy: strategy, _id: kuid}, options, typeof cb !== 'function' ? null : function(err, res) {\n    if (!err) {\n      cb && cb(null, res.result);\n    } else {\n      cb && cb(err);\n    }\n  });\n};\n\n/**\n * Updates credentials of the specified <strategy> for the user <kuid>.\n *\n * @param strategy\n * @param kuid\n * @param credentials\n * @param options\n * @param cb\n * @returns {Security}\n */\nSecurity.prototype.updateCredentials = function (strategy, kuid, credentials, options, cb) {\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.query({controller: 'security', action: 'updateCredentials'}, {strategy: strategy, _id: kuid, body: credentials}, options, typeof cb !== 'function' ? null : function(err, res) {\n    if (!err) {\n      cb && cb(null, res.result);\n    } else {\n      cb && cb(err);\n    }\n  });\n\n  return this;\n};\n\n/**\n * Validate credentials of the specified <strategy> for the user <kuid>.\n *\n * @param strategy\n * @param kuid\n * @param credentials\n * @param options\n * @param cb\n */\nSecurity.prototype.validateCredentials = function (strategy, kuid, credentials, options, cb) {\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.query({controller: 'security', action: 'validateCredentials'}, {strategy: strategy, _id: kuid, body: credentials}, options, typeof cb !== 'function' ? null : function(err, res) {\n    if (!err) {\n      cb && cb(null, res.result);\n    } else {\n      cb && cb(err);\n    }\n  });\n};\n\nmodule.exports = Security;\n","var SecurityDocument = require('./SecurityDocument');\n\nfunction Role(Security, id, content, meta) {\n\n  SecurityDocument.call(this, Security, id, content, meta);\n\n  // Define properties\n  Object.defineProperties(this, {\n    // private properties\n    deleteActionName: {\n      value: 'deleteRole'\n    },\n    updateActionName: {\n      value: 'updateRole'\n    }\n  });\n\n  // promisifying\n  if (Security.kuzzle.bluebird) {\n    return Security.kuzzle.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var whitelist = ['save'];\n\n        return passes && whitelist.indexOf(name) !== -1;\n      }\n    });\n  }\n\n}\n\nRole.prototype = Object.create(SecurityDocument.prototype, {\n  constructor: {\n    value: Role\n  }\n});\n\n/**\n * Saves this role into Kuzzle.\n *\n * If this is a new role, this function will create it in Kuzzle.\n * Otherwise, this method will replace the latest version of this role in Kuzzle by the current content\n * of this object.\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {Role} this object\n */\nRole.prototype.save = function (options, cb) {\n  var\n    data = this.serialize(),\n    self = this;\n\n  if (options && cb === undefined && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.query(this.Security.buildQueryArgs('createOrReplaceRole'), data, options, cb && function (error) {\n    cb(error, error ? undefined : self);\n  });\n\n  return this;\n};\n\nmodule.exports = Role;\n","var SecurityDocument = require('./SecurityDocument');\n\nfunction Profile(Security, id, content, meta) {\n\n  SecurityDocument.call(this, Security, id, content, meta);\n\n  // Define properties\n  Object.defineProperties(this, {\n    // private properties\n    deleteActionName: {\n      value: 'deleteProfile'\n    },\n    updateActionName: {\n      value: 'updateProfile'\n    }\n  });\n\n  // promisifying\n  if (Security.kuzzle.bluebird) {\n    return Security.kuzzle.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var whitelist = ['hydrate', 'save'];\n\n        return passes && whitelist.indexOf(name) !== -1;\n      }\n    });\n  }\n\n}\n\nProfile.prototype = Object.create(SecurityDocument.prototype, {\n  constructor: {\n    value: Profile\n  }\n});\n\n/**\n * Persist to the persistent layer the current profile\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {Profile} this\n */\nProfile.prototype.save = function (options, cb) {\n  var\n    data,\n    self = this;\n\n  if (!this.content.policies) {\n    throw new Error('Argument \"policies\" is mandatory in a profile. This argument contains an array of objects.');\n  }\n\n  if (options && cb === undefined && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data = this.serialize();\n\n  self.kuzzle.query(self.Security.buildQueryArgs('createOrReplaceProfile'), data, options, cb && function (error) {\n    cb(error, error ? undefined : self);\n  });\n\n  return self;\n};\n\n\n/**\n * Add a policy in the policies list\n * @param {Object} policy - must be an object containing at least a \"roleId\" member which must be a string.\n *\n * @returns {Profile} this\n */\nProfile.prototype.addPolicy = function (policy) {\n\n  if (typeof policy !== 'object' || typeof policy.roleId !== 'string') {\n    throw new Error('Parameter \"policies\" must be an object containing at least a \"roleId\" member which must be a string.');\n  }\n\n  if (!this.content.policies) {\n    this.content.policies = [];\n  }\n\n  this.content.policies.push(policy);\n\n  return this;\n};\n\n/**\n * Set policies list\n * @param {Array} policies - must be an array of objects containing at least a \"roleId\" member which must be a string\n *\n * @returns {Profile} this\n */\nProfile.prototype.setPolicies = function (policies) {\n\n  if (!Array.isArray(policies)) {\n    throw new Error('Parameter \"policies\" must be an array of objects containing at least a \"roleId\" member which must be a string');\n  }\n\n  policies.map(function (policy) {\n    if (typeof policy !== 'object' || typeof policy.roleId !== 'string') {\n      throw new Error('Parameter \"policies\" must be an array of objects containing at least a \"roleId\" member which must be a string');\n    }\n  });\n\n  this.content.policies = policies;\n\n  return this;\n};\n\n/**\n * Serialize this object into a JSON object\n *\n * @return {object} JSON object representing this securityDocument\n */\nProfile.prototype.serialize = function () {\n  var\n    data = {};\n\n  if (this.id) {\n    data._id = this.id;\n  }\n\n  data.body = this.content;\n  data.meta = this.meta;\n\n  return data;\n};\n\n/**\n * Returns the list of policies associated to this profile.\n * Each policy element is an array of objects containing at least a \"roleId\" member which must be a string\n *\n * @return {object} an array of policies\n */\nProfile.prototype.getPolicies = function () {\n  return this.content.policies;\n};\n\nmodule.exports = Profile;\n","// Parameter mutualization\nvar\n  getId = {getter: true, required: ['_id']},\n  getIdField = {getter: true, required: ['_id', 'field']},\n  getKeys = {getter: true, required: ['keys']},\n  getMember = {getter: true, required: ['_id', 'member']},\n  getxScan = {\n    getter: true, \n    required: ['_id', 'cursor'], \n    opts: ['match', 'count'],\n    mapResults: mapScanResults\n  },\n  getZrange = {\n    getter: true,\n    required: ['_id', 'start', 'stop'],\n    opts: assignZrangeOptions,\n    mapResults: mapZrangeResults\n  },\n  getZrangeBy = {\n    getter: true,\n    required: ['_id', 'min', 'max'],\n    opts: assignZrangeOptions,\n    mapResults: mapZrangeResults\n  },\n  setId = {required: ['_id']},\n  setIdValue = {required: ['_id', 'value']};\n\n// Redis commands\nvar\n  commands = {\n    append: setIdValue,\n    bitcount: {getter: true, required: ['_id'], opts: ['start', 'end']},\n    bitop: {required: ['_id', 'operation', 'keys']},\n    bitpos: {getter: true, required: ['_id', 'bit'], opts: ['start', 'end']},\n    dbsize: {getter: true},\n    decr: setId,\n    decrby: setIdValue,\n    del: {required: ['keys']},\n    exists: getKeys,\n    expire: {required: ['_id', 'seconds'], mapResults: Boolean},\n    expireat: {required: ['_id', 'timestamp'], mapResults: Boolean},\n    flushdb: {mapResults: mapNoResult},\n    geoadd: {required: ['_id', 'points']},\n    geodist: {\n      getter: true,\n      required: ['_id', 'member1', 'member2'],\n      opts: ['unit'],\n      mapResults: parseFloat\n    },\n    geohash: {getter: true, required: ['_id', 'members']},\n    geopos: {getter: true, required: ['_id', 'members'], mapResults: mapGeoposResults},\n    georadius: {\n      getter: true,\n      required: ['_id', 'lon', 'lat', 'distance', 'unit'],\n      opts: assignGeoRadiusOptions,\n      mapResults: mapGeoRadiusResults\n    },\n    georadiusbymember: {\n      getter: true,\n      required: ['_id', 'member', 'distance', 'unit'],\n      opts: assignGeoRadiusOptions,\n      mapResults: mapGeoRadiusResults\n    },\n    get: getId,\n    getbit: {getter: true, required: ['_id', 'offset']},\n    getrange: {getter: true, required: ['_id', 'start', 'end']},\n    getset: setIdValue,\n    hdel: {required: ['_id', 'fields']},\n    hexists: {getter: true, required: ['_id', 'field'], mapResults: Boolean},\n    hget: getIdField,\n    hgetall: {getter: true, required: ['_id']},\n    hincrby: {required: ['_id', 'field', 'value']},\n    hincrbyfloat: {required: ['_id', 'field', 'value'], mapResults: parseFloat},\n    hkeys: getId,\n    hlen: getId,\n    hmget: {getter: true, required: ['_id', 'fields']},\n    hmset: {required: ['_id', 'entries'], mapResults: mapNoResult},\n    hscan: getxScan,\n    hset: {required: ['_id', 'field', 'value'], mapResults: Boolean},\n    hsetnx: {required: ['_id', 'field', 'value'], mapResults: Boolean},\n    hstrlen: getIdField,\n    hvals: getId,\n    incr: setId,\n    incrby: setIdValue,\n    incrbyfloat: {required: ['_id', 'value'], mapResults: parseFloat},\n    keys: {getter: true, required: ['pattern']},\n    lindex: {getter: true, required: ['_id', 'idx']},\n    linsert: {required: ['_id', 'position', 'pivot', 'value']},\n    llen: getId,\n    lpop: setId,\n    lpush: {required: ['_id', 'values']},\n    lpushx: setIdValue,\n    lrange: {getter: true, required: ['_id', 'start', 'stop']},\n    lrem: {required: ['_id', 'count', 'value']},\n    lset: {required: ['_id', 'index', 'value'], mapResults: mapNoResult},\n    ltrim: {required: ['_id', 'start', 'stop'], mapResults: mapNoResult},\n    mget: getKeys,\n    mset: {required: ['entries'], mapResults: mapNoResult},\n    msetnx: {required: ['entries'], mapResults: Boolean},\n    object: {getter: true, required: ['_id', 'subcommand']},\n    persist: {required: ['_id'], mapResults: Boolean},\n    pexpire: {required: ['_id', 'milliseconds'], mapResults: Boolean},\n    pexpireat: {required: ['_id', 'timestamp'], mapResults: Boolean},\n    pfadd: {required: ['_id', 'elements'], mapResults: Boolean},\n    pfcount: getKeys,\n    pfmerge: {required: ['_id', 'sources'], mapResults: mapNoResult},\n    ping: {getter: true},\n    psetex: {required: ['_id', 'value', 'milliseconds'], mapResults: mapNoResult},\n    pttl: getId,\n    randomkey: {getter: true},\n    rename: {required: ['_id', 'newkey'], mapResults: mapNoResult},\n    renamenx: {required: ['_id', 'newkey'], mapResults: Boolean},\n    rpop: setId,\n    rpoplpush: {required: ['source', 'destination']},\n    rpush: {required: ['_id', 'values']},\n    rpushx: setIdValue,\n    sadd: {required: ['_id', 'members']},\n    scan: {getter: true, required: ['cursor'], opts: ['match', 'count'], mapResults: mapScanResults},\n    scard: getId,\n    sdiff: {getter: true, required: ['_id', 'keys']},\n    sdiffstore: {required: ['_id', 'keys', 'destination']},\n    set: {required: ['_id', 'value'], opts: ['ex', 'px', 'nx', 'xx'], mapResults: mapNoResult},\n    setex: {required: ['_id', 'value', 'seconds'], mapResults: mapNoResult},\n    setnx: {required: ['_id', 'value'], mapResults: Boolean},\n    sinter: getKeys,\n    sinterstore: {required: ['destination', 'keys']},\n    sismember: {getter: true, required: ['_id', 'member'], mapResults: Boolean},\n    smembers: getId,\n    smove: {required: ['_id', 'destination', 'member'], mapResults: Boolean},\n    sort: {getter: true, required: ['_id'], opts: ['alpha', 'by', 'direction', 'get', 'limit']},\n    spop: {required: ['_id'], opts: ['count'], mapResults: mapStringToArray },\n    srandmember: {getter: true, required: ['_id'], opts: ['count'], mapResults: mapStringToArray},\n    srem: {required: ['_id', 'members']},\n    sscan: getxScan,\n    strlen: getId,\n    sunion: getKeys,\n    sunionstore: {required: ['destination', 'keys']},\n    time: {getter: true, mapResults: mapArrayStringToArrayInt},\n    touch: {required: ['keys']},\n    ttl: getId,\n    type: getId,\n    zadd: {required: ['_id', 'elements'], opts: ['nx', 'xx', 'ch', 'incr']},\n    zcard: getId,\n    zcount: {getter: true, required: ['_id', 'min', 'max']},\n    zincrby: {required: ['_id', 'member', 'value']},\n    zinterstore: {required: ['_id', 'keys'], opts: ['weights', 'aggregate']},\n    zlexcount: {getter: true, required: ['_id', 'min', 'max']},\n    zrange: getZrange,\n    zrangebylex: {getter: true, required: ['_id', 'min', 'max'], opts: ['limit']},\n    zrevrangebylex: {getter: true, required: ['_id', 'min', 'max'], opts: ['limit']},\n    zrangebyscore: getZrangeBy,\n    zrank: getMember,\n    zrem: {required: ['_id', 'members']},\n    zremrangebylex: {required: ['_id', 'min', 'max']},\n    zremrangebyrank: {required: ['_id', 'start', 'stop']},\n    zremrangebyscore: {required: ['_id', 'min', 'max']},\n    zrevrange: getZrange,\n    zrevrangebyscore: getZrangeBy,\n    zrevrank: getMember,\n    zscan: getxScan,\n    zscore: {getter: true, required: ['_id', 'member'], mapResults: parseFloat},\n    zunionstore: {required: ['_id', 'keys'], opts: ['weights', 'aggregate']}\n  };\n\n/**\n * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n *\n * @callback responseCallback\n * @param {Object} err - Error object, NULL if the query is successful\n * @param {Object} [data] - The content of the query response\n */\n\n\n/**\n * Kuzzle's memory storage is a separate data store from the database layer.\n * It is internaly based on Redis. You can access most of Redis functions (all\n * lowercased), except functions falling in the following categories:\n *\n *  - blocking functions\n *  - cluster commands\n *  - configuration commands\n *  - cursor functions\n *  - database administration commands\n *  - debugging functions\n *  - script based functions\n *  - transaction functions\n *\n * @param {object} kuzzle - Kuzzle instance to inherit from\n * @constructor\n */\nfunction MemoryStorage(kuzzle) {\n  Object.defineProperties(this, {\n    // read-only properties\n    kuzzle: {\n      value: kuzzle,\n      enumerable: true\n    }\n  });\n\n  if (this.kuzzle.bluebird) {\n    return this.kuzzle.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var blacklist = [];\n\n        return passes && blacklist.indexOf(name) === -1;\n      }\n    });\n  }\n\n  return this;\n}\n\n// Dynamically builds this class' prototypes using the \"commands\" global variable\n(function () {\n  Object.keys(commands).forEach(function (command) {\n    MemoryStorage.prototype[command] = function () {\n      var\n        args = Array.prototype.slice.call(arguments),\n        options = null,\n        cb,\n        query = {\n          controller: 'ms',\n          action: command\n        },\n        data = {};\n\n      if (args.length && typeof args[args.length - 1] === 'function') {\n        cb = args.pop();\n      }\n\n      commands[command].getter && this.kuzzle.callbackRequired('MemoryStorage.' + command, cb);\n\n      if (!commands[command].getter) {\n        data.body = {};\n      }\n\n      if (commands[command].required) {\n        commands[command].required.forEach(function (param) {\n          var value = args.shift();\n\n          if (value === undefined) {\n            throw new Error('MemoryStorage.' + command + ': Missing parameter \"' + param + '\"');\n          }\n\n          assignParameter(data, commands[command].getter, param, value);\n        });\n      }\n\n      if (args.length > 1) {\n        throw new Error('MemoryStorage.' + command + ': Too many parameters provided');\n      }\n\n      if (args.length === 1 && typeof args[0] !== 'object' || Array.isArray(args[0])) {\n        throw new Error('MemoryStorage.' + command + ': Invalid optional parameter (expected an object)');\n      }\n\n      if (args.length) {\n        options = Object.assign({}, args[0]);\n\n        if (Array.isArray(commands[command].opts)) {\n          commands[command].opts.forEach(function (opt) {\n            if (options[opt] !== null && options[opt] !== undefined) {\n              assignParameter(data, commands[command].getter, opt, options[opt]);\n              delete options[opt];\n            }\n          });\n        }\n      }\n\n      /*\n       Options function mapper does not necessarily need\n       options to be passed by clients.\n       */\n      if (typeof commands[command].opts === 'function') {\n        commands[command].opts(data, options || {});\n      }\n\n      this.kuzzle.query(query, data, options, cb && function (err, res) {\n        if (err) {\n          return cb(err);\n        }\n\n        if (commands[command].mapResults) {\n          return cb(null, commands[command].mapResults(res.result));\n        }\n\n        cb(null, res.result);\n      });\n\n      if (!commands[command].getter) {\n        return this;\n      }\n    };\n  });\n})();\n\n/**\n *\n * @param {object} data - target data object\n * @param {boolean} getter - tells if the command is a getter one\n * @param {string} name - parameter name\n * @param {*} value - parameter value\n */\nfunction assignParameter(data, getter, name, value) {\n  if (getter || name === '_id') {\n    data[name] = value;\n  }\n  else {\n    data.body[name] = value;\n  }\n}\n\n/**\n * Assign the provided options for the georadius* redis functions\n * to the request object, as expected by Kuzzle API\n *\n * Mutates the provided data and options objects\n *\n * @param {object} data\n * @param {object} options\n */\nfunction assignGeoRadiusOptions(data, options) {\n  var parsed = [];\n\n  Object.keys(options)\n    .filter(function (opt) {\n      return options[opt] && ['withcoord', 'withdist', 'count', 'sort'].indexOf(opt) !== -1;\n    })\n    .forEach(function (opt) {\n      if (opt === 'withcoord' || opt === 'withdist') {\n        parsed.push(opt);\n        delete options[opt];\n      }\n      else if (opt === 'count' || opt === 'sort') {\n        if (opt === 'count') {\n          parsed.push('count');\n        }\n\n        parsed.push(options[opt]);\n      }\n\n      delete options[opt];\n    });\n\n  if (parsed.length > 0) {\n    data.options = parsed;\n  }\n}\n\n/**\n * Force the WITHSCORES option on z*range* routes\n *\n * Mutates the provided data and options objects\n *\n * @param {object} data\n * @param {object} options\n */\nfunction assignZrangeOptions(data, options) {\n  data.options = ['withscores'];\n\n  if (options.limit) {\n    data.limit = options.limit;\n    delete options.limit;\n  }\n}\n\n/**\n * Maps geopos results, from array<array<string>> to array<array<number>>\n *\n * @param {Array.<Array.<string>>} results\n * @return {Array.<Array.<Number>>}\n */\nfunction mapGeoposResults(results) {\n  return results.map(function (coords) {\n    return coords.map(function (latlon) {\n      return parseFloat(latlon);\n    });\n  });\n}\n\n\n/**\n * Maps georadius results to the format specified in the SDK documentation,\n * preventing different formats depending on the passed options\n *\n * Results can be either an array of point names, or an array\n * of arrays, each one of them containing the point name,\n * and additional informations depending on the passed options\n * (coordinates, distances)\n *\n * @param {Array} results\n * @return {Array.<Object>}\n */\nfunction mapGeoRadiusResults(results) {\n  // Simple array of point names (no options provided)\n  if (!Array.isArray(results[0])) {\n    return results.map(function (point) {\n      return {name: point};\n    });\n  }\n\n  return results.map(function (point) {\n    // The point id is always the first item\n    var p = {\n        name: point[0]\n      },\n      i;\n\n    for (i = 1; i < point.length; i++) {\n      // withcoord result are in an array...\n      if (Array.isArray(point[i])) {\n        p.coordinates = point[i].map(function (coord) {\n          return parseFloat(coord);\n        });\n      }\n      else {\n        // ... and withdist are not\n        p.distance = parseFloat(point[i]);\n      }\n    }\n\n    return p;\n  });\n}\n\n/**\n * Map a string result to an array of strings.\n * Used to uniformize polymorphic results from redis\n *\n * @param {Array|string} results\n * @return {Array.<string>}\n */\nfunction mapStringToArray(results) {\n  return Array.isArray(results) ? results : [results];\n}\n\n/**\n * Map an array of strings to an array of integers\n *\n * @param {Array.<string>} results\n * @return {Array.<Number>}\n */\nfunction mapArrayStringToArrayInt(results) {\n  return results.map(function (value) {\n    return parseInt(value);\n  });\n}\n\n/**\n * Disable results for routes like flushdb\n * @return {undefined}\n */\nfunction mapNoResult() {\n  return undefined;\n}\n\n/**\n * Map zrange results with WITHSCORES:\n * [\n *  \"member1\",\n *  \"score of member1\",\n *  \"member2\",\n *  \"score of member2\"\n * ]\n *\n * into the following format:\n * [\n *  {\"member\": \"member1\", \"score\": <score of member1>},\n *  {\"member\": \"member2\", \"score\": <score of member2>},\n * ]\n *\n *\n * @param {Array.<string>} results\n * @return {Array.<Object>}\n */\nfunction mapZrangeResults(results) {\n  var\n    buffer = null,\n    mapped = [];\n\n  results.forEach(function (value) {\n    if (buffer === null) {\n      buffer = value;\n    }\n    else {\n      mapped.push({member: buffer, score: parseFloat(value)});\n      buffer = null;\n    }\n  });\n\n  return mapped;\n}\n\n/**\n * Map *scan calls results, from:\n * [\n *   \"<cursor>\",\n *   [\n *     \"value1\",\n *     \"value2\", \n *     \"...\"\n *   ]\n * ]\n *\n * To:\n * {\n *   cursor: <cursor>,\n *   values: [\n *     \"value1\",\n *     \"value2\",\n *     \"...\"\n *   ]\n * }\n * \n * @param  {array.<string|array>} results \n * @return {object}\n */\nfunction mapScanResults(results) {\n  return {\n    cursor: results[0],\n    values: results[1]\n  };\n}\n\nmodule.exports = MemoryStorage;\n","/**\n *\n * @param protocol\n * @param host\n * @param options\n * @returns {Object} Instantiated WebSocket/Socket.IO object\n */\n\nfunction network(protocol, host, options) {\n  switch (protocol) {\n    case 'websocket':\n      if (typeof window !== 'undefined' && typeof WebSocket === 'undefined') {\n        throw new Error('Aborting: no websocket support detected.');\n      }\n      return new (require('./protocols/websocket'))(host, options);\n    case 'socketio':\n      if (!window.io) {\n        throw new Error('Aborting: no socket.io library loaded.');\n      }\n      return new (require('./protocols/socketio'))(host, options);\n    default:\n      throw new Error('Aborting: unknown protocol \"' + protocol + '\" (only \"websocket\" and \"socketio\" are available).');\n  }\n}\n\nmodule.exports = network;\n","'use strict';\n\nconst\n  RTWrapper = require('./abstract/realtime');\n\nlet WebSocketClient;\n\nclass WSNode extends RTWrapper {\n\n  constructor(host, options) {\n    super(host, options);\n\n    WebSocketClient = typeof WebSocket !== 'undefined' ? WebSocket : require('uws');\n    this.client = null;\n    this.lasturl = null;\n  }\n\n  /**\n   * Connect to the websocket server\n   */\n  connect () {\n    const\n      url = (this.ssl ? 'wss://' : 'ws://') + this.host + ':' + this.port,\n      opts = typeof window !== 'undefined' ? undefined : {perMessageDeflate: false};\n\n    super.connect();\n\n    if (url !== this.lasturl) {\n      this.wasConnected = false;\n      this.lasturl = url;\n    }\n\n    this.client = new WebSocketClient(url, opts);\n\n    this.client.onopen = () => {\n      this.clientConnected();\n    };\n\n    this.client.onclose = (closeEvent, message) => {\n      let\n        status,\n        reason = message;\n\n      if (typeof closeEvent === 'number') {\n        status = closeEvent;\n      }\n      else {\n        status = closeEvent.code;\n\n        if (closeEvent.reason) {\n          reason = closeEvent.reason;\n        }\n      }\n\n      if (status === 1000) {\n        this.clientDisconnected();\n      }\n      // do not forward a connection close error if no \n      // connection has been previously established\n      else if (this.wasConnected) {\n        const error = new Error(reason);\n        error.status = status;\n\n        this.clientNetworkError(error);\n      }\n    };\n\n    this.client.onerror = error => {\n      const err = (error instanceof Error) && error || new Error(error);\n\n      this.clientNetworkError(err);\n    };\n\n    this.client.onmessage = payload => {\n      const data = JSON.parse(payload.data || payload);\n\n      if (data.room) {\n        this.emit(data.room, data);\n      }\n      else {\n        this.emit('discarded', data);\n      }\n    };\n  }\n\n  /**\n   * Sends a payload to the connected server\n   *\n   * @param {Object} payload\n   */\n  send (payload) {\n    if (this.client && this.client.readyState === this.client.OPEN) {\n      this.client.send(JSON.stringify(payload));\n    }\n  }\n\n  /**\n   * Closes the connection\n   */\n  close () {\n    this.state = 'offline';\n    this.removeAllListeners();\n    this.wasConnected = false;\n    if (this.client) {\n      this.client.close();\n    }\n    this.client = null;\n    this.stopRetryingToConnect = true;\n  }\n}\n\nmodule.exports = WSNode;\n","'use strict';\n\nconst\n  RTWrapper = require('./abstract/realtime');\n\nclass SocketIO extends RTWrapper {\n\n  constructor(host, options) {\n    super(host, options);\n\n    this.socket = null;\n    this.forceDisconnect = false;\n    this.eventsWrapper = {};\n  }\n\n  /**\n   * Connect to the SocketIO server\n   */\n  connect() {\n    super.connect();\n\n    this.socket = window.io((this.ssl ? 'https://' : 'http://') + this.host + ':' + this.port, {\n      reconnection: this.autoReconnect,\n      reconnectionDelay: this.reconnectionDelay,\n      forceNew: true\n    });\n\n    this.socket.on('connect', () => this.clientConnected());\n    this.socket.on('connect_error', error => this.clientNetworkError(error));\n\n    this.socket.on('disconnect', () => {\n      if (this.forceDisconnect) {\n        this.clientDisconnected();\n      } else {\n        const error = new Error('An error occurred, kuzzle may not be ready yet');\n        error.status = 500;\n\n        this.clientNetworkError(error);\n      }\n\n      this.forceDisconnect = false;\n    });\n  }\n\n  /**\n   * Registers a callback on an event.\n   *\n   * @param {string} event\n   * @param {function} callback\n   */\n  addListener(event, callback, once = false) {\n    this._addEventWrapper(event, callback, once);\n    super.addListener(event, callback, once);\n\n    return this;\n  }\n\n  prependListener(event, callback, once = false) {\n    this._addEventWrapper(event, callback, once);\n    return super.prependListener(event, callback, once);\n  }\n\n  /**\n   * Unregisters a callback from an event.\n   *\n   * @param {string} event\n   * @param {function} callback\n   */\n  removeListener(event, callback) {\n    if (this.eventsWrapper[event]) {\n      this.eventsWrapper[event].listeners.delete(callback);\n\n      if (this.eventsWrapper[event].listeners.size === 0) {\n        this.socket.off(event, this.eventsWrapper[event].wrapper);\n        delete this.eventsWrapper[event];\n      }\n\n      super.removeListener(event, callback);\n    }\n\n    return this;\n  }\n\n  /**\n   * Unregisters all listeners either from an event, or from all events\n   *\n   * @param {string} [event]\n   */\n  removeAllListeners(event) {\n    if (event !== undefined) {\n      if (this.eventsWrapper[event] !== undefined) {\n        for (const listener of this.eventsWrapper[event].listeners) {\n          this.removeListener(event, listener);\n        }\n      }\n    } else {\n      for (const _event of Object.keys(this.eventsWrapper)) {\n        this.removeAllListeners(_event);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Sends a payload to the connected server\n   *\n   * @param {Object} payload\n   */\n  send(payload) {\n    this.socket.emit('kuzzle', payload);\n  }\n\n  /**\n   * Closes the connection\n   */\n  close() {\n    this.forceDisconnect = true;\n    this.state = 'offline';\n    this.socket.close();\n    this.socket = null;\n  }\n\n  _addEventWrapper(event, callback, once = false) {\n    if (!this.eventsWrapper[event]) {\n      const wrapper = (...args) => this.emit(event, ...args);\n\n      this.eventsWrapper[event] = {\n        wrapper,\n        listeners: new Set()\n      };\n\n      if (['connect', 'connect_error', 'disconnect'].indexOf(event) === -1) {\n        if (once) {\n          this.socket.once(event, wrapper);\n        } else {\n          this.socket.on(event, wrapper);\n        }\n      }\n    }\n\n    this.eventsWrapper[event].listeners.add(callback);\n  }\n}\n\nmodule.exports = SocketIO;\n"],"sourceRoot":""}