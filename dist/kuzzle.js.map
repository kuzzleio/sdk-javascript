{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///kuzzle.js","webpack:///webpack/bootstrap f340330cbc588882f8a5","webpack:///./src/Kuzzle.js","webpack:///./src/security/SecurityDocument.js","webpack:///./src/Document.js","webpack:///./src/networkWrapper/wrappers/websocket.js","webpack:///./src/security/User.js","webpack:///./~/uuid/index.js","webpack:///./~/uuid/lib/bytesToUuid.js","webpack:///./~/uuid/lib/rng-browser.js","webpack:///./src/Collection.js","webpack:///./src/CollectionMapping.js","webpack:///./src/MemoryStorage.js","webpack:///./src/Room.js","webpack:///./src/SearchResult.js","webpack:///./src/SubscribeResult.js","webpack:///./src/networkWrapper/index.js","webpack:///./src/networkWrapper/wrappers/socketio.js","webpack:///./src/security/Profile.js","webpack:///./src/security/Role.js","webpack:///./src/security/Security.js","webpack:///./~/uuid/v1.js","webpack:///./~/uuid/v4.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","Kuzzle","host","options","cb","self","Error","Object","defineProperties","collections","value","writable","connectCB","eventListeners","connected","lastEmitted","listeners","error","disconnected","reconnected","jwtTokenExpired","loginAttempt","offlineQueuePush","offlineQueuePop","queryError","discarded","eventTimeout","queuing","requestHistory","state","subscriptions","pending","autoReconnect","enumerable","defaultIndex","undefined","reconnectionDelay","port","sslConnection","autoQueue","autoReplay","autoResubscribe","headers","volatile","offlineQueue","queueFilter","queueMaxSize","queueTTL","replayInterval","jwtToken","offlineQueueLoader","keys","forEach","opt","hasOwnProperty","getOwnPropertyDescriptor","offlineMode","defineProperty","query","header","errorMessagePrefix","callback","Security","event","now","Date","args","Array","prototype","slice","arguments","eventProperties","listener","setTimeout","fn","apply","MemoryStorage","connect","cleanHistory","bluebird","promisifyAll","suffix","filter","name","func","target","passes","whitelist","indexOf","cleanQueue","lastDocumentIndex","index","ts","splice","droppedRequest","emitEvent","length","key","emitRequest","request","network","once","requestId","response","action","message","assign","status","send","dequeue","additionalQueue","uniqueQueue","dequeuingProcess","shift","Math","max","isArray","concat","controller","renewAllSubscriptions","roomId","subscriptionId","subscription","renew","removeAllSubscriptions","unsubscribe","discardRequest","object","JSON","stringify","uuid","Collection","User","networkWrapper","disconnect","onConnect","on","data","onConnectError","connectionError","internal","onDisconnect","onReconnect","reconnect","checkToken","err","res","valid","setJwtToken","token","success","result","jwt","unsetJwtToken","getJwtToken","login","strategy","credentials","expiresIn","body","queuable","createIndex","logout","v4","callbackRequired","whoAmI","security","_id","_source","getMyRights","hits","updateSelf","content","queryArgs","addListener","listenerId","knownEvents","listenerType","isValid","toString","push","getAllStatistics","getStatistics","timestamp","queryCB","startTime","collection","flushQueue","listCollections","collectionType","arg","type","from","size","listIndexes","indexes","close","getServerInfo","serverInfo","refreshIndex","getAutoRefresh","setAutoRefresh","autoRefresh","attr","refresh","scroll","scrollId","meta","addHeaders","removeAllListeners","eventName","removeListener","replayQueue","setDefaultIndex","setHeaders","replace","startQueuing","stopQueuing","SecurityDocument","kuzzle","setContent","serialize","delete","buildQueryArgs","deleteActionName","update","updateActionName","Document","documentId","dataCollection","parse","version","_version","newDocument","save","publish","subscribe","filters","ids","values","WSNode","ssl","WebSocket","e","code","client","wasConnected","retrying","lasturl","stopRetryingToConnect","url","window","perMessageDeflate","onopen","poke","onclose","onClientError","onerror","onmessage","payload","room","keep","off","some","i","readyState","OPEN","KuzzleSecurityDocument","create","constructor","setProfiles","profileIds","addProfile","profileId","saveRestricted","getProfiles","v1","bytesToUuid","buf","offset","bth","byteToHex","substr","rng","crypto","msCrypto","getRandomValues","rnds8","Uint8Array","rnds","r","random","blacklist","KuzzleSearchResult","CollectionMapping","Room","SubscribeResult","count","createDocument","document","ifExist","doc","deleteDocument","fetchDocument","fetchAllDocuments","warnEmitted","documents","search","fetchNextDocuments","searchResult","total","console","warn","fetchNext","getMapping","kuzzleMapping","publishMessage","replaceDocument","_scroll_id","aggregations","previous","subscribeResult","done","bind","truncate","updateDocument","retryOnConflict","collectionMapping","mapping","properties","mappings","set","field","assignParameter","getter","assignGeoRadiusOptions","parsed","assignZrangeOptions","limit","mapGeoposResults","results","map","coords","latlon","parseFloat","mapGeoRadiusResults","point","coordinates","coord","distance","mapStringToArray","mapArrayStringToArrayInt","parseInt","mapZrangeResults","buffer","mapped","member","score","getId","required","getIdField","getKeys","getMember","getxScan","opts","getZrange","mapResults","getZrangeBy","setId","setIdValue","setIdFieldValue","setEntries","commands","append","bitcount","bitop","bitpos","dbsize","decr","decrby","del","exists","expire","expireat","flushdb","geoadd","geodist","geohash","geopos","georadius","georadiusbymember","get","getbit","getrange","getset","hdel","hexists","hget","hgetall","hincrby","hincrbyfloat","hkeys","hlen","hmget","hmset","hscan","hset","hsetnx","hstrlen","hvals","incr","incrby","incrbyfloat","lindex","linsert","llen","lpop","lpush","lpushx","lrange","lrem","lset","ltrim","mget","mset","msetnx","persist","pexpire","pexpireat","pfadd","pfcount","pfmerge","ping","psetex","pttl","randomkey","rename","renamenx","rpop","rpoplpush","rpush","rpushx","sadd","scan","scard","sdiff","sdiffstore","setex","setnx","sinter","sinterstore","sismember","smembers","smove","sort","spop","srandmember","srem","sscan","strlen","sunion","sunionstore","time","touch","ttl","zadd","zcard","zcount","zincrby","zinterstore","zlexcount","zrange","zrangebylex","zrevrangebylex","zrangebyscore","zrank","zrem","zremrangebylex","zremrangebyrank","zremrangebyscore","zrevrange","zrevrangebyscore","zrevrank","zscan","zscore","zunionstore","command","pop","param","channel","lastRenewal","notifier","onDoneCB","queue","renewalDelay","scope","subscribing","users","subscribeToSelf","notificationCallback","user","element","isReady","notificationCB","subscribeQuery","interval","setInterval","clearInterval","SearchResult","fetchedDocument","getTotal","getDocuments","getAggregations","getOptions","getFilters","getCollection","getFetchedDocument","cbs","onDone","io","SocketIO","socket","reconnection","forceNew","emit","Profile","policies","addPolicy","policy","roleId","setPolicies","getPolicies","Role","fetchRole","searchRoles","roles","createRole","replaceIfExist","updateRole","deleteRole","role","fetchProfile","searchProfiles","profiles","createProfile","updateProfile","updatedContent","property","deleteProfile","profile","fetchUser","searchUsers","createUser","createRestrictedUser","updateUser","deleteUser","isActionAllowed","rights","filteredRights","right","item","getUserRights","userId","b","clockseq","_clockseq","msecs","getTime","nsecs","_lastNSecs","dt","_lastMSecs","tl","tmh","node","_nodeId","n","_seedBytes","ii"],"mappings":"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","file":"kuzzle.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Kuzzle\"] = factory();\n\telse\n\t\troot[\"Kuzzle\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","/*! Kuzzle javascript SDK version 4.0.0 */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Kuzzle\"] = factory();\n\telse\n\t\troot[\"Kuzzle\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar\n\t  uuid = __webpack_require__(5),\n\t  Collection = __webpack_require__(8),\n\t  Security = __webpack_require__(18),\n\t  MemoryStorage = __webpack_require__(10),\n\t  User = __webpack_require__(4),\n\t  networkWrapper = __webpack_require__(14);\n\t\n\t/**\n\t * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n\t *\n\t * @callback responseCallback\n\t * @param {Object} err - Error object, NULL if the query is successful\n\t * @param {Object} [data] - The content of the query response\n\t */\n\t\n\t/**\n\t * Kuzzle object constructor.\n\t *\n\t * @constructor\n\t * @param host - Server name or IP Address to the Kuzzle instance\n\t * @param [options] - Connection options\n\t * @param {responseCallback} [cb] - Handles connection response\n\t * @constructor\n\t */\n\tfunction Kuzzle (host, options, cb) {\n\t  var self = this;\n\t\n\t  if (!(this instanceof Kuzzle)) {\n\t    return new Kuzzle(host, options, cb);\n\t  }\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  if (!host || host === '') {\n\t    throw new Error('host argument missing');\n\t  }\n\t\n\t  Object.defineProperties(this, {\n\t    // 'private' properties\n\t    collections: {\n\t      value: {},\n\t      writable: true\n\t    },\n\t    connectCB: {\n\t      value: cb\n\t    },\n\t    eventListeners: {\n\t      value: {\n\t        connected: {lastEmitted: null, listeners: []},\n\t        error: {lastEmitted: null, listeners: []},\n\t        disconnected: {lastEmitted: null, listeners: []},\n\t        reconnected: {lastEmitted: null, listeners: []},\n\t        jwtTokenExpired: {lastEmitted: null, listeners: []},\n\t        loginAttempt: {lastEmitted: null, listeners: []},\n\t        offlineQueuePush: {listeners: []},\n\t        offlineQueuePop: {listeners: []},\n\t        queryError: {listeners: []},\n\t        discarded: {listeners: []}\n\t      }\n\t    },\n\t    eventTimeout: {\n\t      value: 200\n\t    },\n\t    queuing: {\n\t      value: false,\n\t      writable: true\n\t    },\n\t    requestHistory: {\n\t      value: {},\n\t      writable: true\n\t    },\n\t    state: {\n\t      value: 'initializing',\n\t      writable: true\n\t    },\n\t    subscriptions: {\n\t      /*\n\t       Contains the centralized subscription list in the following format:\n\t          pending: <number of pending subscriptions>\n\t          'roomId': {\n\t            kuzzleRoomID_1: kuzzleRoomInstance_1,\n\t            kuzzleRoomID_2: kuzzleRoomInstance_2,\n\t            kuzzleRoomID_...: kuzzleRoomInstance_...\n\t          }\n\t\n\t       This was made to allow multiple subscriptions on the same set of filters, something that Kuzzle does not permit.\n\t       This structure also allows renewing subscriptions after a connection loss\n\t       */\n\t      value: {\n\t        pending: {}\n\t      },\n\t      writable: true\n\t    },\n\t    // configuration properties\n\t    autoReconnect: {\n\t      value: (options && typeof options.autoReconnect === 'boolean') ? options.autoReconnect : true,\n\t      writable: true,\n\t      enumerable: true\n\t    },\n\t    defaultIndex: {\n\t      value: (options && typeof options.defaultIndex === 'string') ? options.defaultIndex : undefined,\n\t      writable: true,\n\t      enumerable: true\n\t    },\n\t    reconnectionDelay: {\n\t      value: (options && typeof options.reconnectionDelay === 'number') ? options.reconnectionDelay : 1000,\n\t      writable: true,\n\t      enumerable: true\n\t    },\n\t    host: {\n\t      value: host,\n\t      writable: true,\n\t      enumerable: true\n\t    },\n\t    port: {\n\t      value: (options && typeof options.port === 'number') ? options.port : 7512,\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    sslConnection: {\n\t      value: (options && typeof options.sslConnection === 'boolean') ? options.sslConnection : false,\n\t      writable: true,\n\t      enumerable: true\n\t    },\n\t    autoQueue: {\n\t      value: false,\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    autoReplay: {\n\t      value: false,\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    autoResubscribe: {\n\t      value: true,\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    headers: {\n\t      value: {},\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    volatile: {\n\t      value: {},\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    /*\n\t      Offline queue use the following format:\n\t            [\n\t              {\n\t                ts: <query timestamp>,\n\t                query: 'query',\n\t                cb: callbackFunction\n\t              }\n\t            ]\n\t     */\n\t    offlineQueue: {\n\t      value: [],\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    queueFilter: {\n\t      value: null,\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    queueMaxSize: {\n\t      value: 500,\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    queueTTL: {\n\t      value: 120000,\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    replayInterval: {\n\t      value: 10,\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    jwtToken: {\n\t      value: undefined,\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    offlineQueueLoader: {\n\t      value: null,\n\t      enumerable: true,\n\t      writable: true\n\t    }\n\t  });\n\t\n\t  if (options) {\n\t    Object.keys(options).forEach(function (opt) {\n\t      if (self.hasOwnProperty(opt) && Object.getOwnPropertyDescriptor(self, opt).writable) {\n\t        self[opt] = options[opt];\n\t      }\n\t    });\n\t\n\t    if (options.offlineMode === 'auto' && this.autoReconnect) {\n\t      this.autoQueue = this.autoReplay = this.autoResubscribe = true;\n\t    }\n\t  }\n\t\n\t  // Helper function ensuring that this Kuzzle object is still valid before performing a query\n\t  Object.defineProperty(this, 'isValid', {\n\t    value: function () {\n\t      if (self.state === 'disconnected') {\n\t        throw new Error('This Kuzzle object has been invalidated. Did you try to access it after a disconnect call?');\n\t      }\n\t    }\n\t  });\n\t\n\t  // Helper function copying headers to the query data\n\t  Object.defineProperty(this, 'addHeaders', {\n\t    value: function (query, headers) {\n\t      Object.keys(headers).forEach(function (header) {\n\t        if (!query[header]) {\n\t          query[header] = headers[header];\n\t        }\n\t      });\n\t\n\t      return query;\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Some methods (mainly read queries) require a callback function. This function exists to avoid repetition of code,\n\t   * and is called by these methods\n\t   */\n\t  Object.defineProperty(this, 'callbackRequired', {\n\t    value: function (errorMessagePrefix, callback) {\n\t      if (!callback || typeof callback !== 'function') {\n\t        throw new Error(errorMessagePrefix + ': a callback argument is required for read queries');\n\t      }\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Create an attribute security that embed all methods to manage Role, Profile and User\n\t   */\n\t  Object.defineProperty(this, 'security', {\n\t    value: new Security(this),\n\t    enumerable: true\n\t  });\n\t\n\t  /**\n\t   * Emit an event to all registered listeners\n\t   * An event cannot be emitted multiple times before a timeout has been reached.\n\t   */\n\t  Object.defineProperty(this, 'emitEvent', {\n\t    value: function emitEvent(event) {\n\t      var\n\t        now = Date.now(),\n\t        args = Array.prototype.slice.call(arguments, 1),\n\t        eventProperties = this.eventListeners[event];\n\t\n\t      if (eventProperties.lastEmitted && eventProperties.lastEmitted >= now - this.eventTimeout) {\n\t        return false;\n\t      }\n\t\n\t      eventProperties.listeners.forEach(function (listener) {\n\t        setTimeout(function () {\n\t          listener.fn.apply(undefined, args);\n\t        }, 0);\n\t      });\n\t\n\t      // Events without the 'lastEmitted' property can be emitted without minimum time between emissions\n\t      if (eventProperties.lastEmitted !== undefined) {\n\t        eventProperties.lastEmitted = now;\n\t      }\n\t    }\n\t  });\n\t\n\t  Object.defineProperty(this, 'memoryStorage', {\n\t    value: new MemoryStorage(this),\n\t    enumerable: true\n\t  });\n\t\n\t\n\t  if (!options || !options.connect || options.connect === 'auto') {\n\t    this.connect();\n\t  } else {\n\t    this.state = 'ready';\n\t  }\n\t\n\t  cleanHistory(this.requestHistory);\n\t\n\t  if (this.bluebird) {\n\t    return this.bluebird.promisifyAll(this, {\n\t      suffix: 'Promise',\n\t      filter: function (name, func, target, passes) {\n\t        var whitelist = ['getAllStatistics', 'getServerInfo', 'getStatistics',\n\t          'listCollections', 'listIndexes', 'login', 'logout', 'now', 'query',\n\t          'checkToken', 'whoAmI', 'updateSelf', 'getMyRights',\n\t          'refreshIndex', 'getAutoRefresh', 'setAutoRefresh'\n\t        ];\n\t\n\t        return passes && whitelist.indexOf(name) !== -1;\n\t      }\n\t    });\n\t  }\n\t}\n\t\n\t/**\n\t * Connects to a Kuzzle instance using the provided host name.\n\t * @returns {Object} this\n\t */\n\tKuzzle.prototype.connect = function () {\n\t  var self = this;\n\t\n\t  if (self.network) {\n\t    self.disconnect();\n\t  }\n\t\n\t  self.network = networkWrapper(self.host, self.port, self.sslConnection);\n\t\n\t  if (['initializing', 'ready', 'disconnected', 'error', 'offline'].indexOf(this.state) === -1) {\n\t    if (self.connectCB) {\n\t      self.connectCB(null, self);\n\t    }\n\t    return self;\n\t  }\n\t\n\t  self.state = 'connecting';\n\t  self.network.connect(self.autoReconnect, self.reconnectionDelay);\n\t\n\t  self.network.onConnect(function () {\n\t    self.state = 'connected';\n\t    renewAllSubscriptions.call(self);\n\t    dequeue.call(self);\n\t    self.emitEvent('connected');\n\t\n\t    if (self.connectCB) {\n\t      self.connectCB(null, self);\n\t    }\n\t  });\n\t\n\t  self.network.on('discarded', function (data) {\n\t    self.emitEvent('discarded', data);\n\t  });\n\t\n\t  self.network.onConnectError(function (error) {\n\t    var connectionError = new Error('Unable to connect to kuzzle proxy server at \"' + self.host + '\"');\n\t\n\t    connectionError.internal = error;\n\t    self.state = 'error';\n\t    self.emitEvent('error', connectionError);\n\t\n\t    if (self.connectCB) {\n\t      self.connectCB(connectionError);\n\t    }\n\t  });\n\t\n\t  self.network.onDisconnect(function () {\n\t    self.state = 'offline';\n\t\n\t    if (!self.autoReconnect) {\n\t      self.disconnect();\n\t    }\n\t\n\t    if (self.autoQueue) {\n\t      self.queuing = true;\n\t    }\n\t\n\t    self.emitEvent('disconnected');\n\t  });\n\t\n\t  self.network.onReconnect(function () {\n\t    var reconnect = function () {\n\t      // renew subscriptions\n\t      if (self.autoResubscribe) {\n\t        renewAllSubscriptions.call(self);\n\t      }\n\t\n\t      // replay queued requests\n\t      if (self.autoReplay) {\n\t        cleanQueue.call(self);\n\t        dequeue.call(self);\n\t      }\n\t\n\t      // alert listeners\n\t      self.emitEvent('reconnected');\n\t    };\n\t\n\t    self.state = 'connected';\n\t\n\t    if (self.jwtToken) {\n\t      self.checkToken(self.jwtToken, function (err, res) {\n\t        // shouldn't obtain an error but let's invalidate the token anyway\n\t        if (err || !res.valid) {\n\t          self.jwtToken = undefined;\n\t          self.emitEvent('jwtTokenExpired');\n\t        }\n\t\n\t        reconnect();\n\t      });\n\t    } else {\n\t      reconnect();\n\t    }\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Set the jwtToken used to query kuzzle\n\t * @param token\n\t * @returns {Kuzzle}\n\t */\n\tKuzzle.prototype.setJwtToken = function(token) {\n\t  if (typeof token === 'string') {\n\t    this.jwtToken = token;\n\t  } else if (typeof token === 'object') {\n\t    if (token.result && token.result.jwt && typeof token.result.jwt === 'string') {\n\t      this.jwtToken = token.result.jwt;\n\t    } else {\n\t      this.emitEvent('loginAttempt', {\n\t        success: false,\n\t        error: 'Cannot find a valid JWT token in the following object: ' + JSON.stringify(token)\n\t      });\n\t\n\t      return this;\n\t    }\n\t  } else {\n\t    this.emitEvent('loginAttempt', {success: false, error: 'Invalid token argument: ' + token});\n\t    return this;\n\t  }\n\t\n\t  renewAllSubscriptions.call(this);\n\t  this.emitEvent('loginAttempt', {success: true});\n\t  return this;\n\t};\n\t\n\t/**\n\t * Unset the jwtToken used to query kuzzle\n\t * @returns {Kuzzle}\n\t */\n\tKuzzle.prototype.unsetJwtToken = function() {\n\t  this.jwtToken = undefined;\n\t\n\t  removeAllSubscriptions.call(this);\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Get the jwtToken used by kuzzle\n\t * @returns {Kuzzle}\n\t */\n\tKuzzle.prototype.getJwtToken = function() {\n\t  return this.jwtToken;\n\t};\n\t\n\t/**\n\t * Send login request to kuzzle with credentials\n\t * If login success, store the jwtToken into kuzzle object\n\t *\n\t * @param strategy\n\t * @param credentials\n\t * @param expiresIn\n\t * @param cb\n\t */\n\tKuzzle.prototype.login = function (strategy) {\n\t  var\n\t    self = this,\n\t    request = {\n\t      strategy: strategy\n\t    },\n\t    credentials,\n\t    cb = null;\n\t\n\t  // Handle arguments (credentials, expiresIn, cb)\n\t  if (arguments[1]) {\n\t    if (typeof arguments[1] === 'object') {\n\t      credentials = arguments[1];\n\t    } else if (typeof arguments[1] === 'number' || typeof arguments[1] === 'string') {\n\t      request.expiresIn = arguments[1];\n\t    } else if (typeof arguments[1] === 'function') {\n\t      cb = arguments[1];\n\t    }\n\t  }\n\t  if (arguments[2]) {\n\t    if (typeof arguments[2] === 'number' || typeof arguments[2] === 'string') {\n\t      request.expiresIn = arguments[2];\n\t    } else if (typeof arguments[2] === 'function') {\n\t      cb = arguments[2];\n\t    }\n\t  }\n\t  if (arguments[3] && typeof arguments[3] === 'function') {\n\t    cb = arguments[3];\n\t  }\n\t\n\t  if (typeof credentials === 'object') {\n\t    Object.keys(credentials).forEach(function (key) {\n\t      request[key] = credentials[key];\n\t    });\n\t  }\n\t\n\t  this.query({controller: 'auth', action: 'login'}, {body: request}, {queuable: false}, function(error, response) {\n\t    if (!error) {\n\t      if (response.result.jwt) {\n\t        self.setJwtToken(response.result.jwt);\n\t      }\n\t\n\t      cb && cb(null, response.result);\n\t    }\n\t    else {\n\t      cb && cb(error);\n\t      self.emitEvent('loginAttempt', {success: false, error: error.message});\n\t    }\n\t  });\n\t};\n\t\n\t/**\n\t * Create a kuzzle index\n\t *\n\t * @param {string} index\n\t * @param {object} [options]\n\t * @param {responseCallback} cb\n\t * @returns {Kuzzle}\n\t */\n\tKuzzle.prototype.createIndex = function (index, options, cb) {\n\t  if (!index) {\n\t    if (!this.defaultIndex) {\n\t      throw new Error('Kuzzle.createIndex: index required');\n\t    }\n\t    index = this.defaultIndex;\n\t  }\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  this.query({controller: 'index', action: 'create'}, {index: index}, options, typeof cb !== 'function' ? null : cb);\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Send logout request to kuzzle with jwtToken.\n\t *\n\t * @param cb\n\t * @returns {Kuzzle}\n\t */\n\tKuzzle.prototype.logout = function (cb) {\n\t  var\n\t    self = this,\n\t    request = {\n\t      action: 'logout',\n\t      controller: 'auth',\n\t      requestId: uuid.v4(),\n\t      body: {}\n\t    };\n\t\n\t  this.query({controller: 'auth', action: 'logout'}, request, {queuable: false}, typeof cb !== 'function' ? null : function(error) {\n\t    cb(error, self);\n\t  });\n\t\n\t  self.unsetJwtToken();\n\t\n\t  return self;\n\t};\n\t\n\t/**\n\t * Checks whether a given jwt token still represents a valid session in Kuzzle.\n\t *\n\t * @param  {string}   token     The jwt token to check\n\t * @param  {function} callback  The callback to be called when the response is\n\t *                              available. The signature is `function(error, response)`.\n\t */\n\tKuzzle.prototype.checkToken = function (token, callback) {\n\t  var\n\t    request = {\n\t      body: {\n\t        token: token\n\t      }\n\t    };\n\t\n\t  this.callbackRequired('Kuzzle.checkToken', callback);\n\t\n\t  this.query({controller: 'auth', action: 'checkToken'}, request, {queuable: false}, function (err, response) {\n\t    if (err) {\n\t      return callback(err);\n\t    }\n\t\n\t    callback(null, response.result);\n\t  });\n\t};\n\t\n\t/**\n\t * Fetches the current user.\n\t *\n\t * @param  {function} callback  The callback to be called when the response is\n\t *                              available. The signature is `function(error, response)`.\n\t */\n\tKuzzle.prototype.whoAmI = function (callback) {\n\t  var self = this;\n\t\n\t  self.callbackRequired('Kuzzle.whoAmI', callback);\n\t\n\t  self.query({controller: 'auth', action: 'getCurrentUser'}, {}, {}, function (err, response) {\n\t    if (err) {\n\t      return callback(err);\n\t    }\n\t\n\t    callback(null, new User(self.security, response.result._id, response.result._source));\n\t  });\n\t};\n\t\n\t/**\n\t * Gets the rights array of the currently logged user.\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param  {function} cb The callback containing the normalized array of rights.\n\t */\n\tKuzzle.prototype.getMyRights = function (options, cb) {\n\t  var self = this;\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.callbackRequired('Kuzzle.getMyRights', cb);\n\t\n\t  self.query({controller: 'auth', action:'getMyRights'}, {}, options, function (err, res) {\n\t    if (err) {\n\t      return cb(err);\n\t    }\n\t\n\t    cb(null, res.result.hits);\n\t  });\n\t};\n\t\n\t/**\n\t * Update current user in Kuzzle.\n\t *\n\t * @param {object} content - a plain javascript object representing the user's modification\n\t * @param {object} [options] - (optional) arguments\n\t * @param {responseCallback} [cb] - (optional) Handles the query response\n\t * @returns {Kuzzle} this object\n\t */\n\tKuzzle.prototype.updateSelf = function (content, options, cb) {\n\t  var\n\t    self = this,\n\t    data = {},\n\t    queryArgs = {controller: 'auth', action: 'updateSelf'};\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  data.body = content;\n\t\n\t  self.query(queryArgs, data, options, cb && function (err, res) {\n\t    cb(err, err ? undefined : res.result);\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Clean up the queue, ensuring the queryTTL and queryMaxSize properties are respected\n\t */\n\tfunction cleanQueue () {\n\t  var\n\t    self = this,\n\t    now = Date.now(),\n\t    lastDocumentIndex = -1;\n\t\n\t  if (self.queueTTL > 0) {\n\t    self.offlineQueue.forEach(function (query, index) {\n\t      if (query.ts < now - self.queueTTL) {\n\t        lastDocumentIndex = index;\n\t      }\n\t    });\n\t\n\t    if (lastDocumentIndex !== -1) {\n\t      self.offlineQueue\n\t        .splice(0, lastDocumentIndex + 1)\n\t        .forEach(function (droppedRequest) {\n\t          self.emitEvent('offlineQueuePop', droppedRequest.query);\n\t        });\n\t    }\n\t  }\n\t\n\t  if (self.queueMaxSize > 0 && self.offlineQueue.length > self.queueMaxSize) {\n\t    self.offlineQueue\n\t      .splice(0, self.offlineQueue.length - self.queueMaxSize)\n\t      .forEach(function (droppedRequest) {\n\t        self.emitEvent('offlineQueuePop', droppedRequest.query);\n\t      });\n\t  }\n\t}\n\t\n\t\n\t/**\n\t * Clean history from requests made more than 10s ago\n\t */\n\tfunction cleanHistory (requestHistory) {\n\t  var\n\t    now = Date.now();\n\t\n\t  Object.keys(requestHistory).forEach(function (key) {\n\t    if (requestHistory[key] < now - 10000) {\n\t      delete requestHistory[key];\n\t    }\n\t  });\n\t\n\t  setTimeout(function () {\n\t    cleanHistory(requestHistory);\n\t  }, 1000);\n\t}\n\t\n\t/**\n\t * Emit a request to Kuzzle\n\t *\n\t * @param {object} request\n\t * @param {responseCallback} [cb]\n\t */\n\tfunction emitRequest (request, cb) {\n\t  var\n\t    self = this;\n\t\n\t  if (self.jwtToken !== undefined || cb) {\n\t    self.network.once(request.requestId, function (response) {\n\t      var error = null;\n\t\n\t      if (request.action !== 'logout' && response.error && response.error.message === 'Token expired') {\n\t        self.jwtToken = undefined;\n\t        self.emitEvent('jwtTokenExpired', request, cb);\n\t      }\n\t\n\t      if (response.error) {\n\t        error = new Error(response.error.message);\n\t        Object.assign(error, response.error);\n\t        error.status = response.status;\n\t        self.emitEvent('queryError', error, request, cb);\n\t      }\n\t\n\t      if (cb) {\n\t        cb(error, response);\n\t      }\n\t    });\n\t  }\n\t\n\t  this.network.send(request);\n\t\n\t  // Track requests made to allow Room.subscribeToSelf to work\n\t  self.requestHistory[request.requestId] = Date.now();\n\t}\n\t\n\t/**\n\t * Play all queued requests, in order.\n\t */\n\tfunction dequeue () {\n\t  var\n\t    self = this,\n\t    additionalQueue,\n\t    uniqueQueue = {},\n\t    dequeuingProcess = function () {\n\t      if (self.offlineQueue.length > 0) {\n\t        emitRequest.call(self, self.offlineQueue[0].query, self.offlineQueue[0].cb);\n\t        self.emitEvent('offlineQueuePop', self.offlineQueue.shift());\n\t\n\t        setTimeout(function () {\n\t          dequeuingProcess();\n\t        }, Math.max(0, self.replayInterval));\n\t      } else {\n\t        self.queuing = false;\n\t      }\n\t    };\n\t\n\t  if (self.offlineQueueLoader) {\n\t    if (typeof self.offlineQueueLoader !== 'function') {\n\t      throw new Error('Invalid value for offlineQueueLoader property. Expected: function. Got: ' + typeof self.offlineQueueLoader);\n\t    }\n\t\n\t    additionalQueue = self.offlineQueueLoader();\n\t    if (Array.isArray(additionalQueue)) {\n\t      self.offlineQueue = additionalQueue\n\t        .concat(self.offlineQueue)\n\t        .filter(function (request) {\n\t          // throws if the query object does not contain required attributes\n\t          if (!request.query || request.query.requestId === undefined || !request.query.action || !request.query.controller) {\n\t            throw new Error('Invalid offline queue request. One or more missing properties: requestId, action, controller.');\n\t          }\n\t\n\t          return uniqueQueue.hasOwnProperty(request.query.requestId) ? false : (uniqueQueue[request.query.requestId] = true);\n\t        });\n\t    } else {\n\t      throw new Error('Invalid value returned by the offlineQueueLoader function. Expected: array. Got: ' + typeof additionalQueue);\n\t    }\n\t  }\n\t\n\t  dequeuingProcess();\n\t}\n\t\n\t/**\n\t * Renew all registered subscriptions. Triggered either by a successful connection/reconnection or by a\n\t * successful login attempt\n\t */\n\tfunction renewAllSubscriptions() {\n\t  var self = this;\n\t\n\t  Object.keys(self.subscriptions).forEach(function (roomId) {\n\t    Object.keys(self.subscriptions[roomId]).forEach(function (subscriptionId) {\n\t      var subscription = self.subscriptions[roomId][subscriptionId];\n\t      subscription.renew(subscription.callback);\n\t    });\n\t  });\n\t}\n\t\n\t/**\n\t * Remove all registered subscriptions. Triggered either by a logout query or by un-setting the token\n\t */\n\tfunction removeAllSubscriptions() {\n\t  var self = this;\n\t\n\t  Object.keys(self.subscriptions).forEach(function (roomId) {\n\t    Object.keys(self.subscriptions[roomId]).forEach(function (subscriptionId) {\n\t      var subscription = self.subscriptions[roomId][subscriptionId];\n\t      subscription.unsubscribe();\n\t    });\n\t  });\n\t}\n\t\n\t/**\n\t * Adds a listener to a Kuzzle global event. When an event is fired, listeners are called in the order of their\n\t * insertion.\n\t *\n\t * The ID returned by this function is required to remove this listener at a later time.\n\t *\n\t * @param {string} event - name of the global event to subscribe to (see the 'eventListeners' object property)\n\t * @param {function} listener - callback to invoke each time an event is fired\n\t * @returns {string} Unique listener ID\n\t */\n\tKuzzle.prototype.addListener = function(event, listener) {\n\t  var\n\t    knownEvents = Object.keys(this.eventListeners),\n\t    listenerType = typeof listener,\n\t    listenerId;\n\t\n\t  this.isValid();\n\t\n\t  if (knownEvents.indexOf(event) === -1) {\n\t    throw new Error('[' + event + '] is not a known event. Known events: ' + knownEvents.toString());\n\t  }\n\t\n\t  if (listenerType !== 'function') {\n\t    throw new Error('Invalid listener type: expected a function, got a ' + listenerType);\n\t  }\n\t\n\t  listenerId = uuid.v4();\n\t  this.eventListeners[event].listeners.push({id: listenerId, fn: listener});\n\t  return listenerId;\n\t};\n\t\n\t\n\t/**\n\t * Kuzzle monitors active connections, and ongoing/completed/failed requests.\n\t * This method returns all available statistics from Kuzzle.\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} cb - Handles the query response\n\t */\n\tKuzzle.prototype.getAllStatistics = function (options, cb) {\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  this.callbackRequired('Kuzzle.getAllStatistics', cb);\n\t\n\t  this.query({controller:'server', action: 'getAllStats'}, {}, options, function (err, res) {\n\t    if (err) {\n\t      return cb(err);\n\t    }\n\t\n\t    cb(null, res.result.hits);\n\t  });\n\t};\n\t\n\t/**\n\t * Kuzzle monitors active connections, and ongoing/completed/failed requests.\n\t * This method allows getting either the last statistics frame, or a set of frames starting from a provided timestamp.\n\t *\n\t * @param {number} timestamp -  Epoch time. Starting time from which the frames are to be retrieved\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} cb - Handles the query response\n\t */\n\tKuzzle.prototype.getStatistics = function (timestamp, options, cb) {\n\t  var\n\t    queryCB,\n\t    body;\n\t\n\t  if (!cb) {\n\t    if (arguments.length === 1) {\n\t      cb = arguments[0];\n\t      options = null;\n\t      timestamp = null;\n\t    } else {\n\t      cb = arguments[1];\n\t      if (typeof arguments[0] === 'object') {\n\t        options = arguments[0];\n\t        timestamp = null;\n\t      } else {\n\t        timestamp = arguments[0];\n\t        options = null;\n\t      }\n\t    }\n\t  }\n\t\n\t  queryCB = function (err, res) {\n\t    if (err) {\n\t      return cb(err);\n\t    }\n\t\n\t    cb(null, timestamp ? res.result.hits : [res.result]);\n\t  };\n\t\n\t  this.callbackRequired('Kuzzle.getStatistics', cb);\n\t\n\t  body = timestamp ? {body: {startTime: timestamp}} : {};\n\t  this.query({controller: 'server', action: timestamp ? 'getStats' : 'getLastStats'}, body, options, queryCB);\n\t};\n\t\n\t/**\n\t * Create a new instance of a Collection object.\n\t * If no index is specified, takes the default index.\n\t *\n\t * @param {string} collection - The name of the data collection you want to manipulate\n\t * @param {string} [index] - The name of the data index containing the data collection\n\t * @returns {Collection} A Collection instance\n\t */\n\tKuzzle.prototype.collection = function(collection, index) {\n\t  this.isValid();\n\t\n\t  if (!index) {\n\t    if (!this.defaultIndex) {\n\t      throw new Error('Unable to create a new data collection object: no index specified');\n\t    }\n\t\n\t    index = this.defaultIndex;\n\t  }\n\t\n\t  if (typeof index !== 'string' || typeof collection !== 'string') {\n\t    throw new Error('Invalid index or collection argument: string expected');\n\t  }\n\t\n\t  if (!this.collections[index]) {\n\t    this.collections[index] = {};\n\t  }\n\t\n\t  if (!this.collections[index][collection]) {\n\t    this.collections[index][collection] = new Collection(this, collection, index);\n\t  }\n\t\n\t  return this.collections[index][collection];\n\t};\n\t\n\t/**\n\t * Empties the offline queue without replaying it.\n\t *\n\t * @returns {Kuzzle}\n\t */\n\tKuzzle.prototype.flushQueue = function () {\n\t  this.offlineQueue = [];\n\t  return this;\n\t};\n\t\n\t/**\n\t * Returns the list of known persisted data collections.\n\t *\n\t * @param {string} [index] - Index containing collections to be listed\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} cb - Handles the query response\n\t */\n\tKuzzle.prototype.listCollections = function () {\n\t  var\n\t    collectionType = 'all',\n\t    index,\n\t    options,\n\t    cb,\n\t    args = Array.prototype.slice.call(arguments),\n\t    query;\n\t\n\t  args.forEach(function(arg) {\n\t    switch (typeof arg) {\n\t      case 'string':\n\t        index = arg;\n\t        break;\n\t      case 'object':\n\t        options = arg;\n\t        break;\n\t      case 'function':\n\t        cb = arg;\n\t        break;\n\t    }\n\t  });\n\t\n\t  if (!index) {\n\t    if (!this.defaultIndex) {\n\t      throw new Error('Kuzzle.listCollections: index required');\n\t    }\n\t\n\t    index = this.defaultIndex;\n\t  }\n\t\n\t  this.callbackRequired('Kuzzle.listCollections', cb);\n\t\n\t  if (options && options.type) {\n\t    collectionType = options.type;\n\t  }\n\t\n\t  query = {body: {type: collectionType}};\n\t\n\t  if (options && options.from) {\n\t    query.body.from = options.from;\n\t  }\n\t\n\t  if (options && options.size) {\n\t    query.body.size = options.size;\n\t  }\n\t\n\t  this.query({index: index, controller: 'collection', action: 'list'}, query, options, function (err, res) {\n\t    if (err) {\n\t      return cb(err);\n\t    }\n\t\n\t    cb(null, res.result.collections);\n\t  });\n\t};\n\t\n\t/**\n\t * Returns the list of existing indexes in Kuzzle\n\t *\n\t * @param {object} [options] - Optional arguments\n\t * @param {responseCallback} cb - Handles the query response\n\t */\n\tKuzzle.prototype.listIndexes = function (options, cb) {\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  this.callbackRequired('Kuzzle.listIndexes', cb);\n\t\n\t  this.query({controller: 'index', action: 'list'}, {}, options, function (err, res) {\n\t    cb(err, err ? undefined : res.result.indexes);\n\t  });\n\t};\n\t\n\t/**\n\t * Disconnects from Kuzzle and invalidate this instance.\n\t */\n\tKuzzle.prototype.disconnect = function () {\n\t  var collection;\n\t\n\t  this.state = 'disconnected';\n\t  this.network.close();\n\t  this.network = null;\n\t\n\t  for (collection in this.collections) {\n\t    if (this.collections.hasOwnProperty(collection)) {\n\t      delete this.collections[collection];\n\t    }\n\t  }\n\t};\n\t\n\t/**\n\t * Returns the server informations\n\t *\n\t * @param {object} [options] - Optional arguments\n\t * @param {responseCallback} cb - Handles the query response\n\t */\n\tKuzzle.prototype.getServerInfo = function (options, cb) {\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  this.callbackRequired('Kuzzle.getServerInfo', cb);\n\t\n\t  this.query({controller: 'server', action: 'info'}, {}, options, function (err, res) {\n\t    if (err) {\n\t      return cb(err);\n\t    }\n\t\n\t    cb(null, res.result.serverInfo);\n\t  });\n\t};\n\t\n\t/**\n\t * Forces an index refresh\n\t *\n\t * @param {string} index - The index to refresh. Defaults to Kuzzle.defaultIndex\n\t * @param {object} options - Optional arguments\n\t * @param {responseCallback} cb - Handles the query response\n\t * @returns {Kuzzle}\n\t */\n\tKuzzle.prototype.refreshIndex = function () {\n\t  var\n\t    index,\n\t    options,\n\t    cb;\n\t\n\t  Array.prototype.slice.call(arguments).forEach(function(arg) {\n\t    switch (typeof arg) {\n\t      case 'string':\n\t        index = arg;\n\t        break;\n\t      case 'object':\n\t        options = arg;\n\t        break;\n\t      case 'function':\n\t        cb = arg;\n\t        break;\n\t    }\n\t  });\n\t\n\t  if (!index) {\n\t    if (!this.defaultIndex) {\n\t      throw new Error('Kuzzle.refreshIndex: index required');\n\t    }\n\t    index = this.defaultIndex;\n\t  }\n\t\n\t  this.query({ index: index, controller: 'index', action: 'refresh'}, {}, options, cb);\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Returns de current autoRefresh status for the given index\n\t *\n\t * @param {string} index - The index to get the status from. Defaults to Kuzzle.defaultIndex\n\t * @param {object} options - Optinal arguments\n\t * @param {responseCallback} cb - Handles the query response\n\t */\n\tKuzzle.prototype.getAutoRefresh = function () {\n\t  var\n\t    index,\n\t    options,\n\t    cb;\n\t\n\t  Array.prototype.slice.call(arguments).forEach(function (arg) {\n\t    switch (typeof arg) {\n\t      case 'string':\n\t        index = arg;\n\t        break;\n\t      case 'object':\n\t        options = arg;\n\t        break;\n\t      case 'function':\n\t        cb = arg;\n\t        break;\n\t    }\n\t  });\n\t\n\t  if (!index) {\n\t    if (!this.defaultIndex) {\n\t      throw new Error('Kuzzle.getAutoRefresh: index required');\n\t    }\n\t    index = this.defaultIndex;\n\t  }\n\t\n\t  this.callbackRequired('Kuzzle.getAutoRefresh', cb);\n\t  this.query({ index: index, controller: 'index', action: 'getAutoRefresh'}, {}, options, cb);\n\t};\n\t\n\t/**\n\t * (Un)Sets the autoRefresh flag on the given index\n\t *\n\t * @param {string} index - the index to modify. Defaults to Kuzzle.defaultIndex\n\t * @param {boolean} autoRefresh - The autoRefresh value to set\n\t * @param {object} options - Optional arguments\n\t * @param {responseCallback} cb - Handles the query result\n\t * @returns {object} this\n\t */\n\tKuzzle.prototype.setAutoRefresh = function () {\n\t  var\n\t    index,\n\t    autoRefresh,\n\t    options,\n\t    cb;\n\t\n\t  Array.prototype.slice.call(arguments).forEach(function (arg) {\n\t    switch (typeof arg) {\n\t      case 'string':\n\t        index = arg;\n\t        break;\n\t      case 'boolean':\n\t        autoRefresh = arg;\n\t        break;\n\t      case 'object':\n\t        options = arg;\n\t        break;\n\t      case 'function':\n\t        cb = arg;\n\t        break;\n\t    }\n\t  });\n\t\n\t  if (!index) {\n\t    if (!this.defaultIndex) {\n\t      throw new Error('Kuzzle.setAutoRefresh: index required');\n\t    }\n\t    index = this.defaultIndex;\n\t  }\n\t\n\t  if (autoRefresh === undefined) {\n\t    throw new Error('Kuzzle.setAutoRefresh: autoRefresh value is required');\n\t  }\n\t\n\t  this.query({ index: index, controller: 'index', action: 'setAutoRefresh'}, { body: { autoRefresh: autoRefresh }}, options, cb);\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Return the current Kuzzle's UTC Epoch time, in milliseconds\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} cb - Handles the query response\n\t */\n\tKuzzle.prototype.now = function (options, cb) {\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  this.callbackRequired('Kuzzle.now', cb);\n\t\n\t  this.query({controller: 'server', action: 'now'}, {}, options, function (err, res) {\n\t    cb(err, res && res.result.now);\n\t  });\n\t};\n\t\n\t/**\n\t * This is a low-level method, exposed to allow advanced SDK users to bypass high-level methods.\n\t * Base method used to send read queries to Kuzzle\n\t *\n\t * Takes an optional argument object with the following properties:\n\t *    - volatile (object, default: null):\n\t *        Additional information passed to notifications to other users\n\t *\n\t * @param {object} queryArgs - Query configuration\n\t * @param {object} query - The query data\n\t * @param {object} [options] - Optional arguments\n\t * @param {responseCallback} [cb] - Handles the query response\n\t */\n\tKuzzle.prototype.query = function (queryArgs, query, options, cb) {\n\t  var\n\t    attr,\n\t    object = {\n\t      action: queryArgs.action,\n\t      controller: queryArgs.controller,\n\t      volatile: this.volatile\n\t    },\n\t    self = this;\n\t\n\t  this.isValid();\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  if (options) {\n\t    if (options.queuable === false && self.state === 'offline') {\n\t      return self;\n\t    }\n\t\n\t    if (options.refresh) {\n\t      object.refresh = options.refresh;\n\t    }\n\t\n\t    if (typeof options.from !== 'undefined' && options.from !== null) {\n\t      object.from = options.from;\n\t    }\n\t\n\t    if (options.size) {\n\t      object.size = options.size;\n\t    }\n\t\n\t    if (options.scroll) {\n\t      object.scroll = options.scroll;\n\t    }\n\t\n\t    if (options.scrollId) {\n\t      object.scrollId = options.scrollId;\n\t    }\n\t\n\t    if (options.volatile) {\n\t      Object.keys(options.volatile).forEach(function (meta) {\n\t        object.volatile[meta] = options.volatile[meta];\n\t      });\n\t    }\n\t  }\n\t\n\t  if (!query || typeof query !== 'object' || Array.isArray(query)) {\n\t    throw new Error('Invalid query parameter: ' + query);\n\t  }\n\t\n\t  if (query.volatile) {\n\t    Object.keys(query.volatile).forEach(function (meta) {\n\t      object.volatile[meta] = query.volatile[meta];\n\t    });\n\t  }\n\t\n\t  for (attr in query) {\n\t    if (attr !== 'volatile' && query.hasOwnProperty(attr)) {\n\t      object[attr] = query[attr];\n\t    }\n\t  }\n\t\n\t  object = self.addHeaders(object, this.headers);\n\t\n\t  /*\n\t   * Do not add the token for the checkToken route, to avoid getting a token error when\n\t   * a developer simply wish to verify his token\n\t   */\n\t  if (self.jwtToken !== undefined && !(object.controller === 'auth' && object.action === 'checkToken')) {\n\t    object.jwt = self.jwtToken;\n\t  }\n\t\n\t  if (queryArgs.collection) {\n\t    object.collection = queryArgs.collection;\n\t  }\n\t\n\t  if (queryArgs.index) {\n\t    object.index = queryArgs.index;\n\t  }\n\t\n\t  if (!object.requestId) {\n\t    object.requestId = uuid.v4();\n\t  }\n\t\n\t  if (self.state === 'connected' || (options && options.queuable === false)) {\n\t    if (self.state === 'connected') {\n\t      emitRequest.call(this, object, cb);\n\t    } else {\n\t      discardRequest(object, cb);\n\t    }\n\t  } else if (self.queuing || (options && options.queuable === true) || ['initializing', 'connecting'].indexOf(self.state) !== -1) {\n\t    cleanQueue.call(this, object, cb);\n\t    if (!self.queueFilter || self.queueFilter(object)) {\n\t      self.offlineQueue.push({ts: Date.now(), query: object, cb: cb});\n\t      self.emitEvent('offlineQueuePush', {query: object, cb: cb});\n\t    }\n\t  }\n\t  else {\n\t    discardRequest(object, cb);\n\t  }\n\t\n\t  return self;\n\t};\n\t\n\t/**\n\t * Removes all listeners, either from a specific event or from all events\n\t *\n\t * @param {string} event - One of the event described in the Event Handling section of this documentation\n\t * @returns {Kuzzle} this object\n\t */\n\tKuzzle.prototype.removeAllListeners = function (event) {\n\t  var\n\t    knownEvents = Object.keys(this.eventListeners),\n\t    self = this;\n\t\n\t  if (event) {\n\t    if (knownEvents.indexOf(event) === -1) {\n\t      throw new Error('[' + event + '] is not a known event. Known events: ' + knownEvents.toString());\n\t    }\n\t\n\t    this.eventListeners[event].listeners = [];\n\t  } else {\n\t    knownEvents.forEach(function (eventName) {\n\t      self.eventListeners[eventName].listeners = [];\n\t    });\n\t  }\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Removes a listener from an event.\n\t *\n\t * @param {string} event - One of the event described in the Event Handling section of this documentation\n\t * @param {string} listenerId - The ID returned by addListener\n\t * @returns {Kuzzle} this object\n\t */\n\tKuzzle.prototype.removeListener = function (event, listenerId) {\n\t  var\n\t    knownEvents = Object.keys(this.eventListeners),\n\t    self = this;\n\t\n\t  if (knownEvents.indexOf(event) === -1) {\n\t    throw new Error('[' + event + '] is not a known event. Known events: ' + knownEvents.toString());\n\t  }\n\t\n\t  this.eventListeners[event].listeners.forEach(function (listener, index) {\n\t    if (listener.id === listenerId) {\n\t      self.eventListeners[event].listeners.splice(index, 1);\n\t    }\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Replays the requests queued during offline mode.\n\t * Works only if the SDK is not in a disconnected state, and if the autoReplay option is set to false.\n\t */\n\tKuzzle.prototype.replayQueue = function () {\n\t  if (this.state !== 'offline' && !this.autoReplay) {\n\t    cleanQueue.call(this);\n\t    dequeue.call(this);\n\t  }\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Sets the default Kuzzle index\n\t *\n\t * @param index\n\t * @returns this\n\t */\n\tKuzzle.prototype.setDefaultIndex = function (index) {\n\t  if (typeof index !== 'string') {\n\t    throw new Error('Invalid default index: [' + index + '] (an index name is expected)');\n\t  }\n\t\n\t  if (index.length === 0) {\n\t    throw new Error('Cannot set an empty index as the default index');\n\t  }\n\t\n\t  this.defaultIndex = index;\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Helper function allowing to set headers while chaining calls.\n\t *\n\t * If the replace argument is set to true, replace the current headers with the provided content.\n\t * Otherwise, it appends the content to the current headers, only replacing already existing values\n\t *\n\t * @param content - new headers content\n\t * @param [replace] - default: false = append the content. If true: replace the current headers with tj\n\t */\n\tKuzzle.prototype.setHeaders = function (content, replace) {\n\t  var self = this;\n\t\n\t  if (typeof content !== 'object' || Array.isArray(content)) {\n\t    throw new Error('Expected a content object, received a ' + typeof content);\n\t  }\n\t\n\t  if (replace) {\n\t    self.headers = content;\n\t  } else {\n\t    Object.keys(content).forEach(function (key) {\n\t      self.headers[key] = content[key];\n\t    });\n\t  }\n\t\n\t  return self;\n\t};\n\t\n\t/**\n\t * Starts the requests queuing. Works only during offline mode, and if the autoQueue option is set to false.\n\t */\n\tKuzzle.prototype.startQueuing = function () {\n\t  if (this.state === 'offline' && !this.autoQueue) {\n\t    this.queuing = true;\n\t  }\n\t  return this;\n\t};\n\t\n\t/**\n\t * Stops the requests queuing. Works only during offline mode, and if the autoQueue option is set to false.\n\t */\n\tKuzzle.prototype.stopQueuing = function () {\n\t  if (this.state === 'offline' && !this.autoQueue) {\n\t    this.queuing = false;\n\t  }\n\t\n\t  return this;\n\t};\n\t\n\tfunction discardRequest(object, cb) {\n\t  if (cb) {\n\t    cb(new Error('Unable to execute request: not connected to a Kuzzle server.\\nDiscarded request: ' + JSON.stringify(object)));\n\t  }\n\t}\n\t\n\tmodule.exports = Kuzzle;\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tfunction SecurityDocument(Security, id, content) {\n\t\n\t  if (!id) {\n\t    throw new Error('A security document must have an id');\n\t  }\n\t\n\t  // Define properties\n\t  Object.defineProperties(this, {\n\t    // private properties\n\t    kuzzle: {\n\t      value: Security.kuzzle\n\t    },\n\t    Security: {\n\t      value: Security\n\t    },\n\t    // read-only properties\n\t    // writable properties\n\t    id: {\n\t      value: id,\n\t      enumerable: true\n\t    },\n\t    content: {\n\t      value: {},\n\t      writable: true,\n\t      enumerable: true\n\t    }\n\t  });\n\t\n\t  if (content) {\n\t    this.setContent(content, true);\n\t  }\n\t\n\t  // promisifying\n\t  if (Security.kuzzle.bluebird) {\n\t    return Security.kuzzle.bluebird.promisifyAll(this, {\n\t      suffix: 'Promise',\n\t      filter: function (name, func, target, passes) {\n\t        var whitelist = ['delete', 'update'];\n\t\n\t        return passes && whitelist.indexOf(name) !== -1;\n\t      }\n\t    });\n\t  }\n\t}\n\t\n\t/**\n\t * Replaces the current content with new data.\n\t * Changes made by this function won’t be applied until the save method is called.\n\t *\n\t * @param {Object} data - New securityDocument content\n\t * @return {SecurityDocument} this\n\t */\n\tSecurityDocument.prototype.setContent = function (data) {\n\t  this.content = data;\n\t  return this;\n\t};\n\t\n\t/**\n\t * Serialize this object into a pojo\n\t *\n\t * @return {object} pojo representing this securityDocument\n\t */\n\tSecurityDocument.prototype.serialize = function () {\n\t  var\n\t    data = {};\n\t\n\t  if (this.id) {\n\t    data._id = this.id;\n\t  }\n\t\n\t  data.body = this.content;\n\t\n\t  return data;\n\t};\n\t\n\t/**\n\t * Delete the current KuzzleSecurityDocument into Kuzzle.\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - Handles the query response\n\t */\n\tSecurityDocument.prototype.delete = function (options, cb) {\n\t  var\n\t    self = this;\n\t\n\t  if (options && cb === undefined && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.query(this.Security.buildQueryArgs(this.deleteActionName), {_id: this.id}, options, function (error, res) {\n\t    if (error) {\n\t      return cb ? cb(error) : false;\n\t    }\n\t\n\t    if (cb) {\n\t      cb(null, res.result._id);\n\t    }\n\t  });\n\t};\n\t\n\t/**\n\t * Update the current KuzzleSecurityDocument into Kuzzle.\n\t *\n\t * @param {object} content - Content to add to KuzzleSecurityDocument\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @returns {SecurityDocument} this\n\t */\n\tSecurityDocument.prototype.update = function (content, options, cb) {\n\t  var\n\t    data = {},\n\t    self = this;\n\t\n\t  if (typeof content !== 'object') {\n\t    throw new Error('Parameter \"content\" must be a object');\n\t  }\n\t\n\t  if (options && cb === undefined && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  data._id = self.id;\n\t  data.body = content;\n\t\n\t  self.kuzzle.query(this.Security.buildQueryArgs(this.updateActionName), data, options, function (error, response) {\n\t    if (error) {\n\t      return cb ? cb(error) : false;\n\t    }\n\t\n\t    self.setContent(response.result._source);\n\t\n\t    if (cb) {\n\t      cb(null, self);\n\t    }\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\tmodule.exports = SecurityDocument;\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t/**\n\t * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n\t *\n\t * @callback responseCallback\n\t * @param {Object} err - Error object, NULL if the query is successful\n\t * @param {Object} [data] - The content of the query response\n\t */\n\t\n\t/**\n\t * Kuzzle handles documents either as realtime messages or as stored documents.\n\t * Document is the object representation of one of these documents.\n\t *\n\t * Notes:\n\t *   - this constructor may be called either with a documentId, a content, neither or both.\n\t *   - providing a documentID to the constructor will automatically call refresh, unless a content is also provided\n\t *\n\t *\n\t * @param {Collection} collection - an instanciated Collection object\n\t * @param {string} [documentId] - ID of an existing document\n\t * @param {object} [content] - Initializes this document with the provided content\n\t * @constructor\n\t */\n\tfunction Document(collection, documentId, content) {\n\t  Object.defineProperties(this, {\n\t    // read-only properties\n\t    collection: {\n\t      value: collection.collection,\n\t      enumerable: true\n\t    },\n\t    dataCollection: {\n\t      value: collection,\n\t      enumerable: false\n\t    },\n\t    kuzzle: {\n\t      value: collection.kuzzle,\n\t      enumerable: false\n\t    },\n\t    // writable properties\n\t    id: {\n\t      value: undefined,\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    content: {\n\t      value: {},\n\t      writable: true,\n\t      enumerable: true\n\t    },\n\t    headers: {\n\t      value: JSON.parse(JSON.stringify(collection.headers)),\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    version: {\n\t      value: undefined,\n\t      enumerable: true,\n\t      writable: true\n\t    }\n\t  });\n\t\n\t  // handling provided arguments\n\t  if (!content && documentId && typeof documentId === 'object') {\n\t    content = documentId;\n\t    documentId = null;\n\t  }\n\t\n\t  if (content) {\n\t    if (content._version) {\n\t      this.version = content._version;\n\t      delete content._version;\n\t    }\n\t    this.setContent(content, true);\n\t  }\n\t\n\t  if (documentId) {\n\t    Object.defineProperty(this, 'id', {\n\t      value: documentId,\n\t      enumerable: true\n\t    });\n\t  }\n\t\n\t  // promisifying\n\t  if (this.kuzzle.bluebird) {\n\t    return this.kuzzle.bluebird.promisifyAll(this, {\n\t      suffix: 'Promise',\n\t      filter: function (name, func, target, passes) {\n\t        var whitelist = ['delete', 'refresh', 'save'];\n\t\n\t        return passes && whitelist.indexOf(name) !== -1;\n\t      }\n\t    });\n\t  }\n\t\n\t  return this;\n\t}\n\t\n\t/**\n\t * Serialize this object into a JSON object\n\t *\n\t * @return {object} JSON object representing this document\n\t */\n\tDocument.prototype.serialize = function () {\n\t  var\n\t    data = {};\n\t\n\t  if (this.id) {\n\t    data._id = this.id;\n\t  }\n\t\n\t  data.body = this.content;\n\t  data._version = this.version;\n\t  data = this.kuzzle.addHeaders(data, this.headers);\n\t\n\t  return data;\n\t};\n\t\n\t/**\n\t * Overrides the toString() method in order to return a serialized version of the document\n\t *\n\t * @return {string} serialized version of this object\n\t */\n\tDocument.prototype.toString = function () {\n\t  return JSON.stringify(this.serialize());\n\t};\n\t\n\t/**\n\t * Deletes this document in Kuzzle.\n\t *\n\t * Takes an optional argument object with the following properties:\n\t *    - volatile (object, default: null):\n\t *        Additional information passed to notifications to other users\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @returns {*} this\n\t */\n\tDocument.prototype.delete = function (options, cb) {\n\t  var self = this;\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  if (!self.id) {\n\t    throw new Error('Document.delete: cannot delete a document without a document ID');\n\t  }\n\t\n\t  this.kuzzle.query(this.dataCollection.buildQueryArgs('document', 'delete'), this.serialize(), options, cb && function (err) {\n\t    cb(err, err ? undefined : self.id);\n\t  });\n\t};\n\t\n\t/**\n\t * Replaces the current content with the last version of this document stored in Kuzzle.\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @returns {*} this\n\t */\n\tDocument.prototype.refresh = function (options, cb) {\n\t  var self = this;\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  if (!self.id) {\n\t    throw new Error('Document.refresh: cannot retrieve a document if no ID has been provided');\n\t  }\n\t\n\t  this.kuzzle.callbackRequired('Document.refresh', cb);\n\t\n\t  self.kuzzle.query(self.dataCollection.buildQueryArgs('document', 'get'), {_id: self.id}, options, function (error, res) {\n\t    var newDocument;\n\t\n\t    if (error) {\n\t      return cb(error);\n\t    }\n\t\n\t    newDocument = new Document(self.dataCollection, self.id, res.result._source);\n\t    newDocument.version = res.result._version;\n\t\n\t    cb(null, newDocument);\n\t  });\n\t};\n\t\n\t/**\n\t * Saves this document into Kuzzle.\n\t *\n\t * If this is a new document, this function will create it in Kuzzle and the id property will be made available.\n\t * Otherwise, this method will replace the latest version of this document in Kuzzle by the current content\n\t * of this object.\n\t *\n\t * Takes an optional argument object with the following properties:\n\t *    - volatile (object, default: null):\n\t *        Additional information passed to notifications to other users\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @returns {*} this\n\t */\n\tDocument.prototype.save = function (options, cb) {\n\t  var\n\t    data = this.serialize(),\n\t    self = this;\n\t\n\t  if (options && cb === undefined && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.query(this.dataCollection.buildQueryArgs('document', 'createOrReplace'), data, options, function (error, res) {\n\t    if (error) {\n\t      return cb && cb(error);\n\t    }\n\t\n\t    self.id = res.result._id;\n\t    self.version = res.result._version;\n\t\n\t    if (cb) {\n\t      cb(null, self);\n\t    }\n\t  });\n\t\n\t  return self;\n\t};\n\t\n\t/**\n\t * Sends the content of this document as a realtime message.\n\t *\n\t * Takes an optional argument object with the following properties:\n\t *    - volatile (object, default: null):\n\t *        Additional information passed to notifications to other users\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @returns {*} this\n\t */\n\tDocument.prototype.publish = function (options) {\n\t  var data = this.serialize();\n\t\n\t  this.kuzzle.query(this.dataCollection.buildQueryArgs('realtime', 'publish'), data, options);\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Replaces the current content with new data.\n\t * Changes made by this function won’t be applied until the save method is called.\n\t *\n\t * @param {object} data - New content\n\t * @param {boolean} replace - if true: replace this document content with the provided data\n\t */\n\tDocument.prototype.setContent = function (data, replace) {\n\t  var self = this;\n\t\n\t  if (replace) {\n\t    this.content = data;\n\t  }\n\t  else {\n\t    Object.keys(data).forEach(function (key) {\n\t      self.content[key] = data[key];\n\t    });\n\t  }\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Listens to events concerning this document. Has no effect if the document does not have an ID\n\t * (i.e. if the document has not yet been created as a persisted document).\n\t *\n\t * @param {object} [options] - subscription options\n\t * @param {responseCallback} cb - callback that will be called each time a change has been detected on this document\n\t */\n\tDocument.prototype.subscribe = function (options, cb) {\n\t  var filters;\n\t\n\t  if (options && !cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  this.kuzzle.callbackRequired('Document.subscribe', cb);\n\t\n\t  if (!this.id) {\n\t    throw new Error('Document.subscribe: cannot subscribe to a document if no ID has been provided');\n\t  }\n\t\n\t  filters = { ids: { values: [this.id] } };\n\t\n\t  return this.dataCollection.subscribe(filters, options, cb);\n\t};\n\t\n\t/**\n\t * Helper function allowing to set headers while chaining calls.\n\t *\n\t * If the replace argument is set to true, replace the current headers with the provided content.\n\t * Otherwise, it appends the content to the current headers, only replacing already existing values\n\t *\n\t * @param content - new headers content\n\t * @param [replace] - default: false = append the content. If true: replace the current headers with tj\n\t */\n\tDocument.prototype.setHeaders = function (content, replace) {\n\t  this.kuzzle.setHeaders.call(this, content, replace);\n\t  return this;\n\t};\n\t\n\t\n\tmodule.exports = Document;\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tfunction WSNode(host, port, ssl) {\n\t  var self = this;\n\t  this.WebSocket = typeof WebSocket !== 'undefined' ? WebSocket : __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\"ws\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n\t  this.host = host;\n\t  this.port = port;\n\t  this.ssl = ssl;\n\t  this.client = null;\n\t  this.wasConnected = false;\n\t  this.retrying = false;\n\t  this.lasturl = null;\n\t  this.stopRetryingToConnect = false;\n\t\n\t  /*\n\t   Listeners are stored using the following format:\n\t   roomId: {\n\t   fn: callback_function,\n\t   once: boolean\n\t   }\n\t   */\n\t  this.listeners = {\n\t    error: [],\n\t    connect: [],\n\t    disconnect: [],\n\t    reconnect: []\n\t  };\n\t\n\t  /**\n\t   * Creates a new socket from the provided arguments\n\t   *\n\t   * @constructor\n\t   * @param {boolean} autoReconnect\n\t   * @param {int} reconnectionDelay\n\t   * @returns {Object} Socket\n\t   */\n\t  this.connect = function (autoReconnect, reconnectionDelay) {\n\t    var\n\t      url = (this.ssl ? 'wss://' : 'ws://') + this.host + ':' + this.port,\n\t      options = typeof window !== 'undefined' ? undefined : {perMessageDeflate: false};\n\t\n\t    if (url !== this.lasturl) {\n\t      self.wasConnected = false;\n\t      this.lasturl = url;\n\t    }\n\t\n\t    this.client = new this.WebSocket(url, options);\n\t\n\t    this.client.onopen = function () {\n\t      if (self.wasConnected) {\n\t        poke(self.listeners, 'reconnect');\n\t      }\n\t      else {\n\t        poke(self.listeners, 'connect');\n\t      }\n\t      self.wasConnected = true;\n\t      self.stopRetryingToConnect = false;\n\t    };\n\t\n\t    this.client.onclose = function (code, message) {\n\t      if (code === 1000) {\n\t        poke(self.listeners, 'disconnect');\n\t      }\n\t      else {\n\t        onClientError.call(self, autoReconnect, reconnectionDelay, message);\n\t      }\n\t    };\n\t\n\t    this.client.onerror = function (error) {\n\t      onClientError.call(self, autoReconnect, reconnectionDelay, error);\n\t    };\n\t\n\t    this.client.onmessage = function (payload) {\n\t      var data = JSON.parse(payload.data || payload);\n\t\n\t      if (data.room && self.listeners[data.room]) {\n\t        poke(self.listeners, data.room, data);\n\t      }\n\t      else if (self.listeners.discarded) {\n\t        poke(self.listeners, 'discarded', data);\n\t      }\n\t    };\n\t  };\n\t\n\t  /**\n\t   * Fires the provided callback whence a connection is established\n\t   *\n\t   * @param {function} callback\n\t   */\n\t  this.onConnect = function (callback) {\n\t    this.listeners.connect.push({\n\t      fn: callback,\n\t      keep: true\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Fires the provided callback whenever a connection error is received\n\t   * @param {function} callback\n\t   */\n\t  this.onConnectError = function (callback) {\n\t    this.listeners.error.push({\n\t      fn: callback,\n\t      keep: true\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Fires the provided callback whenever a disconnection occurred\n\t   * @param {function} callback\n\t   */\n\t  this.onDisconnect = function (callback) {\n\t    this.listeners.disconnect.push({\n\t      fn: callback,\n\t      keep: true\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Fires the provided callback whenever a connection has been reestablished\n\t   * @param {function} callback\n\t   */\n\t  this.onReconnect = function (callback) {\n\t    this.listeners.reconnect.push({\n\t      fn: callback,\n\t      keep: true\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Registers a callback on a room. Once 1 message is received, fires the\n\t   * callback and unregister it afterward.\n\t   *\n\t   * @param {string} roomId\n\t   * @param {function} callback\n\t   */\n\t  this.once = function (roomId, callback) {\n\t    if (!this.listeners[roomId]) {\n\t      this.listeners[roomId] = [];\n\t    }\n\t\n\t    this.listeners[roomId].push({\n\t      fn: callback,\n\t      keep: false\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Registers a callback on a room.\n\t   *\n\t   * @param {string} roomId\n\t   * @param {function} callback\n\t   */\n\t  this.on = function (roomId, callback) {\n\t    if (!this.listeners[roomId]) {\n\t      this.listeners[roomId] = [];\n\t    }\n\t\n\t    this.listeners[roomId].push({\n\t      fn: callback,\n\t      keep: true\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Unregisters a callback from a room.\n\t   *\n\t   * @param {string} roomId\n\t   * @param {function} callback\n\t   */\n\t  this.off = function (roomId, callback) {\n\t    var index = -1;\n\t\n\t    if (this.listeners[roomId]) {\n\t      // Array.findIndex is not supported by internet explorer\n\t      this.listeners[roomId].some(function (listener, i) {\n\t        if (listener.fn === callback) {\n\t          index = i;\n\t          return true;\n\t        }\n\t\n\t        return false;\n\t      });\n\t\n\t      if (index !== -1) {\n\t        if (this.listeners[roomId].length === 1 && ['error', 'connect', 'disconnect', 'reconnect'].indexOf(roomId) === -1) {\n\t          delete this.listeners[roomId];\n\t        }\n\t        else {\n\t          this.listeners[roomId].splice(index, 1);\n\t        }\n\t      }\n\t    }\n\t  };\n\t\n\t\n\t  /**\n\t   * Sends a payload to the connected server\n\t   *\n\t   * @param {Object} payload\n\t   */\n\t  this.send = function (payload) {\n\t    if (this.client && this.client.readyState === this.client.OPEN) {\n\t      this.client.send(JSON.stringify(payload));\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Closes the connection\n\t   */\n\t  this.close = function () {\n\t    this.listeners = {\n\t      error: [],\n\t      connect: [],\n\t      disconnect: [],\n\t      reconnect: []\n\t    };\n\t\n\t    this.wasConnected = false;\n\t    this.client.close();\n\t    this.client = null;\n\t    self.stopRetryingToConnect = true;\n\t  };\n\t}\n\t\n\t/**\n\t * Executes all registered listeners in the provided\n\t * \"listeners\" structure.\n\t *\n\t * Listeners are of the following format:\n\t * [\n\t *    { fn: callback, once: boolean },\n\t *    ...\n\t * ]\n\t *\n\t * @private\n\t * @param {Object} listeners\n\t * @param {string} roomId\n\t * @param {Object} [payload]\n\t */\n\tfunction poke (listeners, roomId, payload) {\n\t  var\n\t    i,\n\t    length = listeners[roomId].length;\n\t\n\t  for (i = 0; i < length; ++i) {\n\t    listeners[roomId][i].fn(payload);\n\t\n\t    if (!listeners[roomId][i].keep) {\n\t      if (listeners[roomId].length > 1) {\n\t        listeners[roomId].splice(i, 1);\n\t        --i;\n\t        --length;\n\t      }\n\t      else {\n\t        delete listeners[roomId];\n\t      }\n\t    }\n\t  }\n\t}\n\t\n\t/**\n\t * Called when the connection closes with an error state\n\t *\n\t * @param {boolean} autoReconnect\n\t * @param {number} reconnectionDelay\n\t * @param {string|Object} message\n\t */\n\tfunction onClientError(autoReconnect, reconnectionDelay, message) {\n\t  var self = this;\n\t\n\t  if (autoReconnect && !self.retrying && !self.stopRetryingToConnect) {\n\t    self.retrying = true;\n\t    setTimeout(function () {\n\t      self.retrying = false;\n\t      self.connect(autoReconnect, reconnectionDelay);\n\t    }, reconnectionDelay);\n\t  }\n\t\n\t  poke(self.listeners, 'error', message);\n\t}\n\t\n\tmodule.exports = WSNode;\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar\n\t  KuzzleSecurityDocument = __webpack_require__(1);\n\t\n\t/**\n\t * @param {Security} Security\n\t * @param {string} id\n\t * @param {Object} content\n\t * @constructor\n\t */\n\tfunction User(Security, id, content) {\n\t\n\t  KuzzleSecurityDocument.call(this, Security, id, content);\n\t\n\t  // Define properties\n\t  Object.defineProperties(this, {\n\t    // private properties\n\t    deleteActionName: {\n\t      value: 'deleteUser'\n\t    },\n\t    updateActionName: {\n\t      value: 'updateUser'\n\t    }\n\t  });\n\t\n\t  // promisifying\n\t  if (Security.kuzzle.bluebird) {\n\t    return Security.kuzzle.bluebird.promisifyAll(this, {\n\t      suffix: 'Promise',\n\t      filter: function (name, func, target, passes) {\n\t        var whitelist = ['save', 'saveRestricted'];\n\t\n\t        return passes && whitelist.indexOf(name) !== -1;\n\t      }\n\t    });\n\t  }\n\t}\n\t\n\tUser.prototype = Object.create(KuzzleSecurityDocument.prototype, {\n\t  constructor: {\n\t    value: User\n\t  }\n\t});\n\t\n\t/**\n\t * Set profiles in content\n\t * @param {array} profileIds - an array of profiles ids string\n\t *\n\t * @returns {User} this\n\t */\n\tUser.prototype.setProfiles = function (profileIds) {\n\t  if (!Array.isArray(profileIds) || typeof profileIds[0] !== 'string') {\n\t    throw new Error('Parameter \"profileIds\" must be an array of strings');\n\t  }\n\t\n\t  this.content.profileIds = profileIds;\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Add a profile\n\t * @param {string} profileId - a profile ids string\n\t *\n\t * @returns {User} this\n\t */\n\tUser.prototype.addProfile = function (profileId) {\n\t  if (typeof profileId !== 'string') {\n\t    throw new Error('Parameter \"profileId\" must be a string');\n\t  }\n\t\n\t  if (!this.content.profileIds) {\n\t    this.content.profileIds = [];\n\t  }\n\t\n\t  if (this.content.profileIds.indexOf(profileId) === -1) {\n\t    this.content.profileIds.push(profileId);\n\t  }\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Saves this user into Kuzzle.\n\t *\n\t * If this is a new user, this function will create it in Kuzzle.\n\t * Otherwise, this method will replace the latest version of this user in Kuzzle by the current content\n\t * of this object.\n\t *\n\t * @param {object|responseCallback} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @returns {User} this\n\t */\n\tUser.prototype.save = function (options, cb) {\n\t  var\n\t    data = this.serialize(),\n\t    self = this;\n\t\n\t  if (options && cb === undefined && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.query(this.Security.buildQueryArgs('createOrReplaceUser'), data, options, cb && function (error) {\n\t    cb(error, error ? undefined : self);\n\t  });\n\t\n\t  return self;\n\t};\n\t\n\t/**\n\t * Saves this user as restricted into Kuzzle.\n\t *\n\t * This function will create a new user. It is not usable to update an existing user.\n\t * The \"profileIds\" property must not be provided, or the request will be rejected by Kuzzle.\n\t * This function allows anonymous users to create a \"restricted\" user with predefined rights.\n\t *\n\t * @param {object|responseCallback} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @returns {User} this\n\t */\n\tUser.prototype.saveRestricted = function (options, cb) {\n\t  var\n\t    data = this.serialize(),\n\t    self = this;\n\t\n\t  if (options && cb === undefined && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.query(this.Security.buildQueryArgs('createRestrictedUser'), data, options, cb && function (error) {\n\t    cb(error, error ? undefined : self);\n\t  });\n\t\n\t  return self;\n\t};\n\t\n\t/**\n\t * Serialize this object into a JSON object\n\t *\n\t * @return {object} JSON object representing this User\n\t */\n\tUser.prototype.serialize = function () {\n\t  return {_id: this.id, body: this.content};\n\t};\n\t\n\t/**\n\t * Return the associated profiles IDs\n\t *\n\t * @return {array} the associated profiles IDs\n\t */\n\tUser.prototype.getProfiles = function () {\n\t  return this.content.profileIds;\n\t};\n\t\n\tmodule.exports = User;\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar v1 = __webpack_require__(19);\n\tvar v4 = __webpack_require__(20);\n\t\n\tvar uuid = v4;\n\tuuid.v1 = v1;\n\tuuid.v4 = v4;\n\t\n\tmodule.exports = uuid;\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t/**\n\t * Convert array of 16 byte values to UUID string format of the form:\n\t * XXXXXXXX-XXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n\t */\n\tvar byteToHex = [];\n\tfor (var i = 0; i < 256; ++i) {\n\t  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n\t}\n\t\n\tfunction bytesToUuid(buf, offset) {\n\t  var i = offset || 0;\n\t  var bth = byteToHex;\n\t  return  bth[buf[i++]] + bth[buf[i++]] +\n\t          bth[buf[i++]] + bth[buf[i++]] + '-' +\n\t          bth[buf[i++]] + bth[buf[i++]] + '-' +\n\t          bth[buf[i++]] + bth[buf[i++]] + '-' +\n\t          bth[buf[i++]] + bth[buf[i++]] + '-' +\n\t          bth[buf[i++]] + bth[buf[i++]] +\n\t          bth[buf[i++]] + bth[buf[i++]] +\n\t          bth[buf[i++]] + bth[buf[i++]];\n\t}\n\t\n\tmodule.exports = bytesToUuid;\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Unique ID creation requires a high quality random # generator.  In the\n\t// browser this is a little complicated due to unknown quality of Math.random()\n\t// and inconsistent support for the `crypto` API.  We do the best we can via\n\t// feature-detection\n\tvar rng;\n\t\n\tvar crypto = (window).crypto || (window).msCrypto; // for IE 11\n\tif (crypto && crypto.getRandomValues) {\n\t  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n\t  var rnds8 = new Uint8Array(16);\n\t  rng = function whatwgRNG() {\n\t    crypto.getRandomValues(rnds8);\n\t    return rnds8;\n\t  };\n\t}\n\t\n\tif (!rng) {\n\t  // Math.random()-based (RNG)\n\t  //\n\t  // If all else fails, use Math.random().  It's fast, but is of unspecified\n\t  // quality.\n\t  var  rnds = new Array(16);\n\t  rng = function() {\n\t    for (var i = 0, r; i < 16; i++) {\n\t      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n\t      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n\t    }\n\t\n\t    return rnds;\n\t  };\n\t}\n\t\n\tmodule.exports = rng;\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar\n\t  KuzzleSearchResult = __webpack_require__(12),\n\t  Document = __webpack_require__(2),\n\t  CollectionMapping = __webpack_require__(9),\n\t  Room = __webpack_require__(11),\n\t  SubscribeResult = __webpack_require__(13);\n\t\n\t/**\n\t * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n\t *\n\t * @callback responseCallback\n\t * @param {Object} err - Error object, NULL if the query is successful\n\t * @param {Object} [data] - The content of the query response\n\t */\n\t\n\t/**\n\t * A data collection is a set of data managed by Kuzzle. It acts like a data table for persistent documents,\n\t * or like a room for pub/sub messages.\n\t *\n\t * @property {string} collection\n\t * @property {string} index\n\t * @property {Kuzzle} kuzzle\n\t * @property {Array.<string>} collection\n\t * @param {object} kuzzle - Kuzzle instance to inherit from\n\t * @param {string} collection - name of the data collection to handle\n\t * @param {string} index - Index containing the data collection\n\t * @constructor\n\t */\n\tfunction Collection(kuzzle, collection, index) {\n\t  if (!index || !collection) {\n\t    throw new Error('The Collection object constructor needs an index and a collection arguments');\n\t  }\n\t\n\t  Object.defineProperties(this, {\n\t    // read-only properties\n\t    collection: {\n\t      value: collection,\n\t      enumerable: true\n\t    },\n\t    index: {\n\t      value: index,\n\t      enumerable: true\n\t    },\n\t    kuzzle: {\n\t      value: kuzzle,\n\t      enumerable: true\n\t    },\n\t    // writable properties\n\t    headers: {\n\t      value: JSON.parse(JSON.stringify(kuzzle.headers)),\n\t      enumerable: true,\n\t      writable: true\n\t    }\n\t  });\n\t\n\t  Object.defineProperty(this, 'buildQueryArgs', {\n\t    value: function (controller, action) {\n\t      return {\n\t        controller: controller,\n\t        action: action,\n\t        collection: this.collection,\n\t        index: this.index\n\t      };\n\t    }\n\t  });\n\t\n\t  if (this.kuzzle.bluebird) {\n\t    return this.kuzzle.bluebird.promisifyAll(this, {\n\t      suffix: 'Promise',\n\t      filter: function (name, func, target, passes) {\n\t        var blacklist = ['publishMessage', 'setHeaders', 'subscribe'];\n\t\n\t        return passes && blacklist.indexOf(name) === -1;\n\t      }\n\t    });\n\t  }\n\t\n\t  return this;\n\t}\n\t\n\t/**\n\t * Returns the number of documents matching the provided set of filters.\n\t *\n\t * There is a small delay between documents creation and their existence in our advanced search layer,\n\t * usually a couple of seconds.\n\t * That means that a document that was just been created won’t be returned by this function\n\t *\n\t * @param {object} filters - Filters in Elasticsearch Query DSL format\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} cb - Handles the query response\n\t */\n\tCollection.prototype.count = function (filters, options, cb) {\n\t  var\n\t    query;\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  this.kuzzle.callbackRequired('Collection.count', cb);\n\t\n\t  query = this.kuzzle.addHeaders({body: filters}, this.headers);\n\t\n\t  this.kuzzle.query(this.buildQueryArgs('document', 'count'), query, options, function (error, result) {\n\t    cb(error, result && result.result.count);\n\t  });\n\t};\n\t\n\t/**\n\t * Create a new empty data collection, with no associated mapping.\n\t * Kuzzle automatically creates data collections when storing documents, but there are cases where we\n\t * want to create and prepare data collections before storing documents in it.\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - returns Kuzzle's response\n\t * @returns {*} this\n\t */\n\tCollection.prototype.create = function (options, cb) {\n\t  var data = {};\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  data = this.kuzzle.addHeaders(data, this.headers);\n\t  this.kuzzle.query(this.buildQueryArgs('collection', 'create'), data, options, cb);\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Create a new document in Kuzzle.\n\t *\n\t * Takes an optional argument object with the following properties:\n\t *    - volatile (object, default: null):\n\t *        Additional information passed to notifications to other users\n\t *    - ifExist (string, allowed values: \"error\" (default), \"replace\"):\n\t *        If the same document already exists:\n\t *          - resolves with an error if set to \"error\".\n\t *          - replaces the existing document if set to \"replace\"\n\t *\n\t * @param {string} [id] - (optional) document identifier\n\t * @param {object} document - either an instance of a Document object, or a document\n\t * @param {object} [options] - optional arguments\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @returns {Object} this\n\t */\n\tCollection.prototype.createDocument = function (id, document, options, cb) {\n\t  var\n\t    self = this,\n\t    data = {},\n\t    action = 'create';\n\t\n\t  if (id && typeof id !== 'string') {\n\t    cb = options;\n\t    options = document;\n\t    document = id;\n\t    id = null;\n\t  }\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  if (document instanceof Document) {\n\t    data = document.serialize();\n\t  } else {\n\t    data.body = document;\n\t  }\n\t\n\t  if (options && options.ifExist) {\n\t    if (options.ifExist === 'replace') {\n\t      action = 'createOrReplace';\n\t    }\n\t    else if (options.ifExist !== 'error') {\n\t      throw new Error('Invalid value for the \"ifExist\" option: ' + options.ifExist);\n\t    }\n\t  }\n\t\n\t  if (id) {\n\t    data._id = id;\n\t  }\n\t\n\t  data = self.kuzzle.addHeaders(data, self.headers);\n\t\n\t  self.kuzzle.query(this.buildQueryArgs('document', action), data, options, cb && function (err, res) {\n\t    var doc;\n\t\n\t    if (err) {\n\t      return cb(err);\n\t    }\n\t\n\t    doc = new Document(self, res.result._id, res.result._source);\n\t    doc.version = res.result._version;\n\t    cb(null, doc);\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Delete persistent documents.\n\t *\n\t * There is a small delay between documents creation and their existence in our advanced search layer,\n\t * usually a couple of seconds.\n\t * That means that a document that was just been created won’t be returned by this function\n\t *\n\t * Takes an optional argument object with the following properties:\n\t *    - volatile (object, default: null):\n\t *        Additional information passed to notifications to other users\n\t *\n\t * @param {string|object} arg - Either a document ID (will delete only this particular document), or a set of filters\n\t * @param {object} [options] - optional arguments\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @returns {Collection} this\n\t */\n\tCollection.prototype.deleteDocument = function (arg, options, cb) {\n\t  var\n\t    action,\n\t    data = {};\n\t\n\t  if (typeof arg === 'string') {\n\t    data._id = arg;\n\t    action = 'delete';\n\t  } else {\n\t    data.body = {query: arg};\n\t    action = 'deleteByQuery';\n\t  }\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  data = this.kuzzle.addHeaders(data, this.headers);\n\t\n\t  this.kuzzle.query(this.buildQueryArgs('document', action), data, options, cb && function (err, res) {\n\t    if (err) {\n\t      cb(err);\n\t    }\n\t    else {\n\t      cb(null, (action === 'delete' ? [res.result._id] : res.result.ids));\n\t    }\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Retrieve a single stored document using its unique document ID.\n\t *\n\t * @param {string} documentId - Unique document identifier\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} cb - Handles the query response\n\t */\n\tCollection.prototype.fetchDocument = function (documentId, options, cb) {\n\t  var\n\t    data = {_id: documentId},\n\t    self = this;\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.callbackRequired('Collection.fetch', cb);\n\t  data = self.kuzzle.addHeaders(data, this.headers);\n\t\n\t  self.kuzzle.query(this.buildQueryArgs('document', 'get'), data, options, function (err, res) {\n\t    var document;\n\t\n\t    if (err) {\n\t      return cb(err);\n\t    }\n\t\n\t    document = new Document(self, res.result._id, res.result._source);\n\t    document.version = res.result._version;\n\t    cb(null, document);\n\t  });\n\t};\n\t\n\t/**\n\t * Retrieves all documents stored in this data collection\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} cb - Handles the query response\n\t */\n\tCollection.prototype.fetchAllDocuments = function (options, cb) {\n\t  var\n\t    warnEmitted = false,\n\t    documents = [],\n\t    filters = {};\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = {};\n\t  }\n\t\n\t  // copying pagination options to the search filter\n\t  if (!options) {\n\t    options = {};\n\t  }\n\t\n\t  if (!options.from) {\n\t    options.from = 0;\n\t  }\n\t\n\t  if (!options.size) {\n\t    options.size = 1000;\n\t  }\n\t\n\t  this.kuzzle.callbackRequired('Collection.fetchAllDocuments', cb);\n\t\n\t  this.search(filters, options, function fetchNextDocuments (error, searchResult) {\n\t    if (error) {\n\t      return cb(error);\n\t    }\n\t\n\t    if (searchResult instanceof KuzzleSearchResult) {\n\t      if (searchResult.total > 10000 && !warnEmitted) {\n\t        warnEmitted = true;\n\t        console.warn('Collection.fetchAllDocuments may return extremely large amounts of documents, which may cause performance issues. Unless you know what you are doing, consider using Collection.search or Collection.scroll instead'); // eslint-disable-line no-console\n\t      }\n\t\n\t      searchResult.documents.forEach(function(document) {\n\t        documents.push(document);\n\t      });\n\t      searchResult.fetchNext(fetchNextDocuments);\n\t    }\n\t    else {\n\t      cb(null, documents);\n\t    }\n\t  });\n\t};\n\t\n\t\n\t/**\n\t * Instantiates a CollectionMapping object containing the current mapping of this collection.\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} cb - Returns an instantiated CollectionMapping object\n\t */\n\tCollection.prototype.getMapping = function (options, cb) {\n\t  var kuzzleMapping;\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  this.kuzzle.callbackRequired('Collection.getMapping', cb);\n\t\n\t  kuzzleMapping = new CollectionMapping(this);\n\t  kuzzleMapping.refresh(options, cb);\n\t};\n\t\n\t/**\n\t * Publish a realtime message\n\t *\n\t * Takes an optional argument object with the following properties:\n\t *    - volatile (object, default: null):\n\t *        Additional information passed to notifications to other users\n\t *\n\t * @param {object} document - either a Document instance or a JSON object\n\t * @param {object} [options] - optional arguments\n\t * @param {responseCallback} [cb] - Returns a raw Kuzzle response\n\t * @returns {*} this\n\t */\n\tCollection.prototype.publishMessage = function (document, options, cb) {\n\t  var data = {};\n\t\n\t  if (document instanceof Document) {\n\t    data = document.serialize();\n\t  } else {\n\t    data.body = document;\n\t  }\n\t\n\t  data = this.kuzzle.addHeaders(data, this.headers);\n\t  this.kuzzle.query(this.buildQueryArgs('realtime', 'publish'), data, options, cb);\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Replace an existing document with a new one.\n\t *\n\t * Takes an optional argument object with the following properties:\n\t *    - volatile (object, default: null):\n\t *        Additional information passed to notifications to other users\n\t *\n\t * @param {string} documentId - Unique document identifier of the document to replace\n\t * @param {object} content - JSON object representing the new document version\n\t * @param {object} [options] - additional arguments\n\t * @param {responseCallback} [cb] - Returns an instantiated Document object\n\t * @return {object} this\n\t */\n\tCollection.prototype.replaceDocument = function (documentId, content, options, cb) {\n\t  var\n\t    self = this,\n\t    data = {\n\t      _id: documentId,\n\t      body: content\n\t    };\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  data = self.kuzzle.addHeaders(data, this.headers);\n\t\n\t  self.kuzzle.query(this.buildQueryArgs('document', 'createOrReplace'), data, options, cb && function (err, res) {\n\t    var document;\n\t\n\t    if (err) {\n\t      return cb(err);\n\t    }\n\t\n\t    document = new Document(self, res.result._id, res.result._source);\n\t    document.version = res.result._version;\n\t    cb(null, document);\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Executes an advanced search on the data collection.\n\t *\n\t * /!\\ There is a small delay between documents creation and their existence in our advanced search layer,\n\t * usually a couple of seconds.\n\t * That means that a document that was just been created won’t be returned by this function.\n\t *\n\t * @param {object} filters - Filters in Elasticsearch Query DSL format\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} cb - Handles the query response\n\t */\n\t\n\tCollection.prototype.search = function (filters, options, cb) {\n\t  var\n\t    query,\n\t    self = this;\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = {};\n\t  }\n\t\n\t  self.kuzzle.callbackRequired('Collection.search', cb);\n\t\n\t  query = self.kuzzle.addHeaders({body: filters}, this.headers);\n\t\n\t\n\t  self.kuzzle.query(this.buildQueryArgs('document', 'search'), query, options, function (error, result) {\n\t    var documents = [];\n\t\n\t    if (error) {\n\t      return cb(error);\n\t    }\n\t\n\t    result.result.hits.forEach(function (doc) {\n\t      var newDocument = new Document(self, doc._id, doc._source);\n\t\n\t      newDocument.version = doc._version;\n\t\n\t      documents.push(newDocument);\n\t    });\n\t\n\t    if (result.result._scroll_id) {\n\t      options.scrollId = result.result._scroll_id;\n\t    }\n\t\n\t    cb(null, new KuzzleSearchResult(\n\t      self,\n\t      result.result.total,\n\t      documents,\n\t      result.result.aggregations ? result.result.aggregations : {},\n\t      options,\n\t      filters,\n\t      options.previous || null\n\t    ));\n\t  });\n\t};\n\t\n\t/**\n\t * A \"scroll\" option can be passed to search queries, creating persistent\n\t * paginated results.\n\t * This method can be used to manually get the next page of a search result,\n\t * instead of using KuzzleSearchResult.next()\n\t *\n\t * @param {string} scrollId\n\t * @param {object} [options]\n\t * @param {object} [filters]\n\t * @param {responseCallback} cb\n\t */\n\tCollection.prototype.scroll = function (scrollId, options, filters, cb) {\n\t  var\n\t    request = {},\n\t    self = this;\n\t\n\t  if (!scrollId) {\n\t    throw new Error('Collection.scroll: scrollId is required');\n\t  }\n\t\n\t  if (!cb) {\n\t    cb = filters;\n\t    filters = null;\n\t  }\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = {};\n\t  }\n\t\n\t  this.kuzzle.callbackRequired('Collection.scroll', cb);\n\t\n\t  request.scrollId = scrollId;\n\t\n\t  if (options && options.scroll) {\n\t    request.scroll = options.scroll;\n\t  }\n\t\n\t  this.kuzzle.query({controller: 'document', action: 'scroll'}, request, options, function (error, result) {\n\t    var documents = [];\n\t\n\t    if (error) {\n\t      return cb(error);\n\t    }\n\t\n\t    result.result.hits.forEach(function (doc) {\n\t      var newDocument = new Document(self, doc._id, doc._source);\n\t\n\t      newDocument.version = doc._version;\n\t\n\t      documents.push(newDocument);\n\t    });\n\t\n\t    if (result.result._scroll_id) {\n\t      options.scrollId = result.result._scroll_id;\n\t    }\n\t\n\t    cb(null, new KuzzleSearchResult(\n\t      self,\n\t      result.result.total,\n\t      documents,\n\t      {},\n\t      options,\n\t      filters,\n\t      options.previous || null\n\t    ));\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Subscribes to this data collection with a set of filters.\n\t * To subscribe to the entire data collection, simply provide an empty filter.\n\t *\n\t * @param {object} filters - Filters in Kuzzle DSL format\n\t * @param {object} [options] - subscriptions options\n\t * @param {responseCallback} cb - called for each new notification\n\t * @returns {*} KuzzleSubscribeResult object\n\t */\n\tCollection.prototype.subscribe = function (filters, options, cb) {\n\t  var\n\t    room,\n\t    subscribeResult;\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  this.kuzzle.callbackRequired('Collection.subscribe', cb);\n\t\n\t  subscribeResult = new SubscribeResult();\n\t  room = new Room(this, options);\n\t\n\t  room.renew(filters, cb, subscribeResult.done.bind(subscribeResult));\n\t\n\t  return subscribeResult;\n\t};\n\t\n\t/**\n\t * Truncate the data collection, removing all stored documents but keeping all associated mappings.\n\t * This method is a lot faster than removing all documents using a query.\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - returns Kuzzle's response\n\t * @returns {*} this\n\t */\n\tCollection.prototype.truncate = function (options, cb) {\n\t  var data = {};\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  data = this.kuzzle.addHeaders(data, this.headers);\n\t  this.kuzzle.query(this.buildQueryArgs('collection', 'truncate'), data, options, cb);\n\t\n\t  return this;\n\t};\n\t\n\t\n\t/**\n\t * Update parts of a document\n\t *\n\t * Takes an optional argument object with the following properties:\n\t *    - volatile (object, default: null):\n\t *        Additional information passed to notifications to other users\n\t *\n\t * @param {string} documentId - Unique document identifier of the document to update\n\t * @param {object} content - JSON object containing changes to perform on the document\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - Returns an instantiated Document object\n\t * @return {object} this\n\t */\n\tCollection.prototype.updateDocument = function (documentId, content, options, cb) {\n\t  var\n\t    data = {\n\t      _id: documentId,\n\t      body: content\n\t    },\n\t    self = this;\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  if (options && options.retryOnConflict) {\n\t    data.retryOnConflict = options.retryOnConflict;\n\t  }\n\t\n\t  data = self.kuzzle.addHeaders(data, this.headers);\n\t\n\t  self.kuzzle.query(this.buildQueryArgs('document', 'update'), data, options, cb && function (err, res) {\n\t    if (err) {\n\t      return cb(err);\n\t    }\n\t\n\t    (new Document(self, res.result._id)).refresh(cb);\n\t  });\n\t\n\t  return self;\n\t};\n\t\n\t\n\t/**\n\t * Instantiate a new Document object. Workaround to the module.exports limitation, preventing multiple\n\t * constructors to be exposed without having to use a factory or a composed object.\n\t *\n\t * @param {string} id - document id\n\t * @param {object} content - document content\n\t * @constructor\n\t */\n\tCollection.prototype.document = function (id, content) {\n\t  return new Document(this, id, content);\n\t};\n\t\n\t/**\n\t * Instantiate a new Room object. Workaround to the module.exports limitation, preventing multiple\n\t * constructors to be exposed without having to use a factory or a composed object.\n\t *\n\t * @param {object} [options] - subscription configuration\n\t * @constructor\n\t */\n\tCollection.prototype.room = function (options) {\n\t  return new Room(this, options);\n\t};\n\t\n\t/**\n\t * Instantiate a new CollectionMapping object. Workaround to the module.exports limitation, preventing multiple\n\t * constructors to be exposed without having to use a factory or a composed object.\n\t *\n\t * @param {object} [mapping] - mapping to instantiate the CollectionMapping object with\n\t * @constructor\n\t */\n\tCollection.prototype.collectionMapping = function (mapping) {\n\t  return new CollectionMapping(this, mapping);\n\t};\n\t\n\t/**\n\t * Helper function allowing to set headers while chaining calls.\n\t *\n\t * If the replace argument is set to true, replace the current headers with the provided content.\n\t * Otherwise, it appends the content to the current headers, only replacing already existing values\n\t *\n\t * @param content - new headers content\n\t * @param [replace] - default: false = append the content. If true: replace the current headers with tj\n\t */\n\tCollection.prototype.setHeaders = function (content, replace) {\n\t  this.kuzzle.setHeaders.call(this, content, replace);\n\t  return this;\n\t};\n\t\n\tmodule.exports = Collection;\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t/**\n\t * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n\t *\n\t * @callback responseCallback\n\t * @param {Object} err - Error object, NULL if the query is successful\n\t * @param {Object} [data] - The content of the query response\n\t */\n\t\n\t\n\t/**\n\t *  When creating a new data collection in the persistent data storage layer, Kuzzle uses a default mapping.\n\t *  It means that, by default, you won’t be able to exploit the full capabilities of our persistent data storage layer\n\t *  (currently handled by ElasticSearch), and your searches may suffer from below-average performances, depending on\n\t *  the amount of data you stored in a collection and the complexity of your database.\n\t *\n\t *  The CollectionMapping object allow to get the current mapping of a data collection and to modify it if needed.\n\t *\n\t * @param {object} collection - Instance of the inherited Collection object\n\t * @param {object} [mapping] - mappings\n\t * @constructor\n\t */\n\tfunction CollectionMapping(collection, mapping) {\n\t  Object.defineProperties(this, {\n\t    //read-only properties\n\t    collection: {\n\t      value: collection,\n\t      enumerable: true\n\t    },\n\t    kuzzle: {\n\t      value: collection.kuzzle,\n\t      enumerable: true\n\t    },\n\t    // writable properties\n\t    headers: {\n\t      value: JSON.parse(JSON.stringify(collection.headers)),\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    mapping: {\n\t      value: mapping || {},\n\t      enumerable: true,\n\t      writable: true\n\t    }\n\t  });\n\t\n\t  if (this.kuzzle.bluebird) {\n\t    return this.kuzzle.bluebird.promisifyAll(this, {\n\t      suffix: 'Promise',\n\t      filter: function (name, func, target, passes) {\n\t        var blacklist = ['set', 'setHeaders'];\n\t\n\t        return passes && blacklist.indexOf(name) === -1;\n\t      }\n\t    });\n\t  }\n\t\n\t  return this;\n\t}\n\t\n\t/**\n\t * Applies the new mapping to the data collection.\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - Handles the query response\n\t */\n\tCollectionMapping.prototype.apply = function (options, cb) {\n\t  var\n\t    self = this,\n\t    data = this.kuzzle.addHeaders({body: {properties: this.mapping}}, this.headers);\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.query(this.collection.buildQueryArgs('collection', 'updateMapping'), data, options, function (err) {\n\t    if (err) {\n\t      return cb && cb(err);\n\t    }\n\t\n\t    self.refresh(options, cb);\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Replaces the current content with the mapping stored in Kuzzle\n\t *\n\t * Calling this function will discard any uncommited changes. You can commit changes by calling the “apply” function\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @returns {*} this\n\t */\n\tCollectionMapping.prototype.refresh = function (options, cb) {\n\t  var\n\t    self = this,\n\t    data = this.kuzzle.addHeaders({}, this.headers);\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  this.kuzzle.query(this.collection.buildQueryArgs('collection', 'getMapping'), data, options, function (err, res) {\n\t    if (err) {\n\t      return cb ? cb(err) : false;\n\t    }\n\t\n\t    if (res.result[self.collection.index]) {\n\t      if (res.result[self.collection.index].mappings[self.collection.collection]) {\n\t        self.mapping = res.result[self.collection.index].mappings[self.collection.collection].properties;\n\t\n\t        // Mappings can be empty. The mapping property should never be \"undefined\"\n\t        if (self.mapping === undefined) {\n\t          self.mapping = {};\n\t        }\n\t      } else {\n\t        return cb && cb(new Error('No mapping found for collection ' + self.collection.collection));\n\t      }\n\t    } else {\n\t      return cb && cb(new Error('No mapping found for index ' + self.collection.index));\n\t    }\n\t\n\t    if (cb) {\n\t      cb(null, self);\n\t    }\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t\n\t/**\n\t * Adds or updates a field mapping.\n\t *\n\t * Changes made by this function won’t be applied until you call the apply method\n\t *\n\t * @param {string} field - Name of the field from which the mapping is to be added or updated\n\t * @param {object} mapping - corresponding field mapping\n\t * @returns {CollectionMapping}\n\t */\n\tCollectionMapping.prototype.set = function (field, mapping) {\n\t  this.mapping[field] = mapping;\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Helper function allowing to set headers while chaining calls.\n\t *\n\t * If the replace argument is set to true, replace the current headers with the provided content.\n\t * Otherwise, it appends the content to the current headers, only replacing already existing values\n\t *\n\t * @param content - new headers content\n\t * @param [replace] - default: false = append the content. If true: replace the current headers with tj\n\t */\n\tCollectionMapping.prototype.setHeaders = function (content, replace) {\n\t  this.kuzzle.setHeaders.call(this, content, replace);\n\t  return this;\n\t};\n\t\n\tmodule.exports = CollectionMapping;\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t// Parameter mutualization\n\tvar\n\t  getId = {getter: true, required: ['_id']},\n\t  getIdField = {getter: true, required: ['_id', 'field']},\n\t  getKeys = {getter: true, required: ['keys']},\n\t  getMember = {getter: true, required: ['_id', 'member']},\n\t  getxScan = {getter: true, required: ['_id', 'cursor'], opts: ['match', 'count']},\n\t  getZrange = {\n\t    getter: true,\n\t    required: ['_id', 'start', 'stop'],\n\t    opts: assignZrangeOptions,\n\t    mapResults: mapZrangeResults\n\t  },\n\t  getZrangeBy = {\n\t    getter: true,\n\t    required: ['_id', 'min', 'max'],\n\t    opts: assignZrangeOptions,\n\t    mapResults: mapZrangeResults\n\t  },\n\t  setId = {required: ['_id']},\n\t  setIdValue = {required: ['_id', 'value']},\n\t  setIdFieldValue = {required: ['_id', 'field', 'value']},\n\t  setEntries = {required: ['entries']};\n\t\n\t// Redis commands\n\tvar\n\t  commands = {\n\t    append: setIdValue,\n\t    bitcount: {getter: true, required: ['_id'], opts: ['start', 'end']},\n\t    bitop: {required: ['_id', 'operation', 'keys']},\n\t    bitpos: {getter: true, required: ['_id', 'bit'], opts: ['start', 'end']},\n\t    dbsize: {getter: true},\n\t    decr: setId,\n\t    decrby: setIdValue,\n\t    del: {required: ['keys']},\n\t    exists: getKeys,\n\t    expire: {required: ['_id', 'seconds']},\n\t    expireat: {required: ['_id', 'timestamp']},\n\t    flushdb: {},\n\t    geoadd: {required: ['_id', 'points']},\n\t    geodist: {\n\t      getter: true,\n\t      required: ['_id', 'member1', 'member2'],\n\t      opts: ['unit'],\n\t      mapResults: parseFloat\n\t    },\n\t    geohash: {getter: true, required: ['_id', 'members']},\n\t    geopos: {getter: true, required: ['_id', 'members'], mapResults: mapGeoposResults},\n\t    georadius: {\n\t      getter: true,\n\t      required: ['_id', 'lon', 'lat', 'distance', 'unit'],\n\t      opts: assignGeoRadiusOptions,\n\t      mapResults: mapGeoRadiusResults\n\t    },\n\t    georadiusbymember: {\n\t      getter: true,\n\t      required: ['_id', 'member', 'distance', 'unit'],\n\t      opts: assignGeoRadiusOptions,\n\t      mapResults: mapGeoRadiusResults\n\t    },\n\t    get: getId,\n\t    getbit: {getter: true, required: ['_id', 'offset']},\n\t    getrange: {getter: true, required: ['_id', 'start', 'end']},\n\t    getset: setIdValue,\n\t    hdel: {required: ['_id', 'fields']},\n\t    hexists: getIdField,\n\t    hget: getIdField,\n\t    hgetall: {getter: true, required: ['_id']},\n\t    hincrby: setIdFieldValue,\n\t    hincrbyfloat: {required: ['_id', 'field', 'value'], mapResults: parseFloat},\n\t    hkeys: getId,\n\t    hlen: getId,\n\t    hmget: {getter: true, required: ['_id', 'fields']},\n\t    hmset: {required: ['_id', 'entries']},\n\t    hscan: getxScan,\n\t    hset: setIdFieldValue,\n\t    hsetnx: setIdFieldValue,\n\t    hstrlen: getIdField,\n\t    hvals: getId,\n\t    incr: setId,\n\t    incrby: setIdValue,\n\t    incrbyfloat: {required: ['_id', 'value'], mapResults: parseFloat},\n\t    keys: {getter: true, required: ['pattern']},\n\t    lindex: {getter: true, required: ['_id', 'index']},\n\t    linsert: {required: ['_id', 'position', 'pivot', 'value']},\n\t    llen: getId,\n\t    lpop: setId,\n\t    lpush: {required: ['_id', 'values']},\n\t    lpushx: setIdValue,\n\t    lrange: {getter: true, required: ['_id', 'start', 'stop']},\n\t    lrem: {required: ['_id', 'count', 'value']},\n\t    lset: {required: ['_id', 'index', 'value']},\n\t    ltrim: {required: ['_id', 'start', 'stop']},\n\t    mget: getKeys,\n\t    mset: setEntries,\n\t    msetnx: setEntries,\n\t    object: {getter: true, required: ['_id', 'subcommand']},\n\t    persist: setId,\n\t    pexpire: {required: ['_id', 'milliseconds']},\n\t    pexpireat: {required: ['_id', 'timestamp']},\n\t    pfadd: {required: ['_id', 'elements']},\n\t    pfcount: getKeys,\n\t    pfmerge: {required: ['_id', 'sources']},\n\t    ping: {getter: true},\n\t    psetex: {required: ['_id', 'value', 'milliseconds']},\n\t    pttl: getId,\n\t    randomkey: {getter: true},\n\t    rename: {required: ['_id', 'newkey']},\n\t    renamenx: {required: ['_id', 'newkey']},\n\t    rpop: setId,\n\t    rpoplpush: {required: ['source', 'destination']},\n\t    rpush: {required: ['_id', 'values']},\n\t    rpushx: setIdValue,\n\t    sadd: {required: ['_id', 'members']},\n\t    scan: {getter: true, required: ['cursor'], opts: ['match', 'count']},\n\t    scard: getId,\n\t    sdiff: {getter: true, required: ['_id', 'keys']},\n\t    sdiffstore: {required: ['_id', 'keys', 'destination']},\n\t    set: {required: ['_id', 'value'], opts: ['ex', 'px', 'nx', 'xx']},\n\t    setex: {required: ['_id', 'value', 'seconds']},\n\t    setnx: setIdValue,\n\t    sinter: getKeys,\n\t    sinterstore: {required: ['destination', 'keys']},\n\t    sismember: getMember,\n\t    smembers: getId,\n\t    smove: {required: ['_id', 'destination', 'member']},\n\t    sort: {getter: true, required: ['_id'], opts: ['alpha', 'by', 'direction', 'get', 'limit']},\n\t    spop: {required: ['_id'], opts: ['count'], mapResults: mapStringToArray },\n\t    srandmember: {getter: true, required: ['_id'], opts: ['count'], mapResults: mapStringToArray},\n\t    srem: {required: ['_id', 'members']},\n\t    sscan: getxScan,\n\t    strlen: getId,\n\t    sunion: getKeys,\n\t    sunionstore: {required: ['destination', 'keys']},\n\t    time: {getter: true, mapResults: mapArrayStringToArrayInt},\n\t    touch: {required: ['keys']},\n\t    ttl: getId,\n\t    type: getId,\n\t    zadd: {required: ['_id', 'elements'], opts: ['nx', 'xx', 'ch', 'incr']},\n\t    zcard: getId,\n\t    zcount: {getter: true, required: ['_id', 'min', 'max']},\n\t    zincrby: {required: ['_id', 'member', 'value']},\n\t    zinterstore: {required: ['_id', 'keys'], opts: ['weights', 'aggregate']},\n\t    zlexcount: {getter: true, required: ['_id', 'min', 'max']},\n\t    zrange: getZrange,\n\t    zrangebylex: {getter: true, required: ['_id', 'min', 'max'], opts: ['limit']},\n\t    zrevrangebylex: {getter: true, required: ['_id', 'min', 'max'], opts: ['limit']},\n\t    zrangebyscore: getZrangeBy,\n\t    zrank: getMember,\n\t    zrem: {required: ['_id', 'members']},\n\t    zremrangebylex: {required: ['_id', 'min', 'max']},\n\t    zremrangebyrank: {required: ['_id', 'start', 'stop']},\n\t    zremrangebyscore: {required: ['_id', 'min', 'max']},\n\t    zrevrange: getZrange,\n\t    zrevrangebyscore: getZrangeBy,\n\t    zrevrank: getMember,\n\t    zscan: getxScan,\n\t    zscore: {getter: true, required: ['_id', 'member'], mapResults: parseFloat},\n\t    zunionstore: {required: ['_id', 'keys'], opts: ['weights', 'aggregate']}\n\t  };\n\t\n\t/**\n\t * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n\t *\n\t * @callback responseCallback\n\t * @param {Object} err - Error object, NULL if the query is successful\n\t * @param {Object} [data] - The content of the query response\n\t */\n\t\n\t\n\t/**\n\t * Kuzzle's memory storage is a separate data store from the database layer.\n\t * It is internaly based on Redis. You can access most of Redis functions (all\n\t * lowercased), except functions falling in the following categories:\n\t *\n\t *  - blocking functions\n\t *  - cluster commands\n\t *  - configuration commands\n\t *  - cursor functions\n\t *  - database administration commands\n\t *  - debugging functions\n\t *  - script based functions\n\t *  - transaction functions\n\t *\n\t * @param {object} kuzzle - Kuzzle instance to inherit from\n\t * @constructor\n\t */\n\tfunction MemoryStorage(kuzzle) {\n\t  Object.defineProperties(this, {\n\t    // read-only properties\n\t    kuzzle: {\n\t      value: kuzzle,\n\t      enumerable: true\n\t    },\n\t    // writable properties\n\t    headers: {\n\t      value: JSON.parse(JSON.stringify(kuzzle.headers)),\n\t      enumerable: true,\n\t      writable: true\n\t    }\n\t  });\n\t\n\t  this.setHeaders = kuzzle.setHeaders.bind(this);\n\t\n\t  if (this.kuzzle.bluebird) {\n\t    return this.kuzzle.bluebird.promisifyAll(this, {\n\t      suffix: 'Promise',\n\t      filter: function (name, func, target, passes) {\n\t        var blacklist = ['setHeaders'];\n\t\n\t        return passes && blacklist.indexOf(name) === -1;\n\t      }\n\t    });\n\t  }\n\t\n\t  return this;\n\t}\n\t\n\t// Dynamically builds this class' prototypes using the \"commands\" global variable\n\t(function () {\n\t  Object.keys(commands).forEach(function (command) {\n\t    MemoryStorage.prototype[command] = function () {\n\t      var\n\t        args = Array.prototype.slice.call(arguments),\n\t        options = null,\n\t        cb,\n\t        query = {\n\t          controller: 'ms',\n\t          action: command\n\t        },\n\t        data = {};\n\t\n\t      if (args.length && typeof args[args.length - 1] === 'function') {\n\t        cb = args.pop();\n\t      }\n\t\n\t      commands[command].getter && this.kuzzle.callbackRequired('MemoryStorage.' + command, cb);\n\t\n\t      if (!commands[command].getter) {\n\t        data.body = {};\n\t      }\n\t\n\t      if (commands[command].required) {\n\t        commands[command].required.forEach(function (param) {\n\t          var value = args.shift();\n\t\n\t          if (value === undefined) {\n\t            throw new Error('MemoryStorage.' + command + ': Missing parameter \"' + param + '\"');\n\t          }\n\t\n\t          assignParameter(data, commands[command].getter, param, value);\n\t        });\n\t      }\n\t\n\t      if (args.length > 1) {\n\t        throw new Error('MemoryStorage.' + command + ': Too many parameters provided');\n\t      }\n\t\n\t      if (args.length === 1 && typeof args[0] !== 'object' || Array.isArray(args[0])) {\n\t        throw new Error('MemoryStorage.' + command + ': Invalid optional parameter (expected an object)');\n\t      }\n\t\n\t      if (args.length) {\n\t        options = Object.assign({}, args[0]);\n\t\n\t        if (Array.isArray(commands[command].opts)) {\n\t          commands[command].opts.forEach(function (opt) {\n\t            if (options[opt] !== null && options[opt] !== undefined) {\n\t              assignParameter(data, commands[command].getter, opt, options[opt]);\n\t              delete options[opt];\n\t            }\n\t          });\n\t        }\n\t      }\n\t\n\t      /*\n\t       Options function mapper does not necessarily need\n\t       options to be passed by clients.\n\t       */\n\t      if (typeof commands[command].opts === 'function') {\n\t        commands[command].opts(data, options || {});\n\t      }\n\t\n\t      this.kuzzle.query(query, data, options, cb && function (err, res) {\n\t        if (err) {\n\t          return cb(err);\n\t        }\n\t\n\t        if (commands[command].mapResults) {\n\t          return cb(null, commands[command].mapResults(res.result));\n\t        }\n\t\n\t        cb(null, res.result);\n\t      });\n\t\n\t      if (!commands[command].getter) {\n\t        return this;\n\t      }\n\t    };\n\t  });\n\t})();\n\t\n\t/**\n\t *\n\t * @param {object} data - target data object\n\t * @param {boolean} getter - tells if the command is a getter one\n\t * @param {string} name - parameter name\n\t * @param {*} value - parameter value\n\t */\n\tfunction assignParameter(data, getter, name, value) {\n\t  if (getter || name === '_id') {\n\t    data[name] = value;\n\t  }\n\t  else {\n\t    data.body[name] = value;\n\t  }\n\t}\n\t\n\t/**\n\t * Assign the provided options for the georadius* redis functions\n\t * to the request object, as expected by Kuzzle API\n\t *\n\t * Mutates the provided data and options objects\n\t *\n\t * @param {object} data\n\t * @param {object} options\n\t */\n\tfunction assignGeoRadiusOptions(data, options) {\n\t  var parsed = [];\n\t\n\t  Object.keys(options)\n\t    .filter(function (opt) {\n\t      return options[opt] && ['withcoord', 'withdist', 'count', 'sort'].indexOf(opt) !== -1;\n\t    })\n\t    .forEach(function (opt) {\n\t      if (opt === 'withcoord' || opt === 'withdist') {\n\t        parsed.push(opt);\n\t        delete options[opt];\n\t      }\n\t      else if (opt === 'count' || opt === 'sort') {\n\t        if (opt === 'count') {\n\t          parsed.push('count');\n\t        }\n\t\n\t        parsed.push(options[opt]);\n\t      }\n\t\n\t      delete options[opt];\n\t    });\n\t\n\t  if (parsed.length > 0) {\n\t    data.options = parsed;\n\t  }\n\t}\n\t\n\t/**\n\t * Force the WITHSCORES option on z*range* routes\n\t *\n\t * Mutates the provided data and options objects\n\t *\n\t * @param {object} data\n\t * @param {object} options\n\t */\n\tfunction assignZrangeOptions(data, options) {\n\t  data.options = ['withscores'];\n\t\n\t  if (options.limit) {\n\t    data.limit = options.limit;\n\t    delete options.limit;\n\t  }\n\t}\n\t\n\t/**\n\t * Maps geopos results, from array<array<string>> to array<array<number>>\n\t *\n\t * @param {Array.<Array.<string>>} results\n\t * @return {Array.<Array.<Number>>}\n\t */\n\tfunction mapGeoposResults(results) {\n\t  return results.map(function (coords) {\n\t    return coords.map(function (latlon) {\n\t      return parseFloat(latlon);\n\t    });\n\t  });\n\t}\n\t\n\t\n\t/**\n\t * Maps georadius results to the format specified in the SDK documentation,\n\t * preventing different formats depending on the passed options\n\t *\n\t * Results can be either an array of point names, or an array\n\t * of arrays, each one of them containing the point name,\n\t * and additional informations depending on the passed options\n\t * (coordinates, distances)\n\t *\n\t * @param {Array} results\n\t * @return {Array.<Object>}\n\t */\n\tfunction mapGeoRadiusResults(results) {\n\t  // Simple array of point names (no options provided)\n\t  if (!Array.isArray(results[0])) {\n\t    return results.map(function (point) {\n\t      return {name: point};\n\t    });\n\t  }\n\t\n\t  return results.map(function (point) {\n\t    // The point id is always the first item\n\t    var\n\t      p = {\n\t        name: point[0]\n\t      },\n\t      i;\n\t\n\t    for (i = 1; i < point.length; i++) {\n\t      // withcoord result are in an array...\n\t      if (Array.isArray(point[i])) {\n\t        p.coordinates = point[i].map(function (coord) {\n\t          return parseFloat(coord);\n\t        });\n\t      }\n\t      else {\n\t        // ... and withdist are not\n\t        p.distance = parseFloat(point[i]);\n\t      }\n\t    }\n\t\n\t    return p;\n\t  });\n\t}\n\t\n\t/**\n\t * Map a string result to an array of strings.\n\t * Used to uniformize polymorphic results from redis\n\t *\n\t * @param {Array|string} results\n\t * @return {Array.<string>}\n\t */\n\tfunction mapStringToArray (results) {\n\t  return Array.isArray(results) ? results : [results];\n\t}\n\t\n\t/**\n\t * Map an array of strings to an array of integers\n\t *\n\t * @param {Array.<string>} results\n\t * @return {Array.<Number>}\n\t */\n\tfunction mapArrayStringToArrayInt(results) {\n\t  return results.map(function (value) {\n\t    return parseInt(value);\n\t  });\n\t}\n\t\n\t/**\n\t * Map zrange results with WITHSCORES:\n\t * [\n\t *  \"member1\",\n\t *  \"score of member1\",\n\t *  \"member2\",\n\t *  \"score of member2\"\n\t * ]\n\t *\n\t * into the following format:\n\t * [\n\t *  {\"member\": \"member1\", \"score\": <score of member1>},\n\t *  {\"member\": \"member2\", \"score\": <score of member2>},\n\t * ]\n\t *\n\t *\n\t * @param {Array.<string>} results\n\t * @return {Array.<Object>}\n\t */\n\tfunction mapZrangeResults(results) {\n\t  var\n\t    buffer = null,\n\t    mapped = [];\n\t\n\t  results.forEach(function (value) {\n\t    if (buffer === null) {\n\t      buffer = value;\n\t    }\n\t    else {\n\t      mapped.push({member: buffer, score: parseFloat(value)});\n\t      buffer = null;\n\t    }\n\t  });\n\t\n\t  return mapped;\n\t}\n\t\n\tmodule.exports = MemoryStorage;\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar\n\t  uuid = __webpack_require__(5),\n\t  Document = __webpack_require__(2);\n\t\n\t/**\n\t * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n\t *\n\t * @callback responseCallback\n\t * @param {Object} err - Error object, NULL if the query is successful\n\t * @param {Object} [data] - The content of the query response\n\t */\n\t\n\t/**\n\t * This object is the result of a subscription request, allowing to manipulate the subscription itself.\n\t *\n\t * In Kuzzle, you don’t exactly subscribe to a room or a topic but, instead, you subscribe to documents.\n\t *\n\t * What it means is that, to subscribe, you provide to Kuzzle a set of matching filters.\n\t * Once you have subscribed, if a pub/sub message is published matching your filters, or if a matching stored\n\t * document change (because it is created, updated or deleted), then you’ll receive a notification about it.\n\t *\n\t * @param {object} collection - an instantiated and valid kuzzle object\n\t * @param {object} [options] - subscription optional configuration\n\t * @constructor\n\t */\n\tfunction Room(collection, options) {\n\t  // Define properties\n\t  Object.defineProperties(this, {\n\t    // private properties\n\t    callback: {\n\t      value: null,\n\t      writable: true\n\t    },\n\t    channel: {\n\t      value: null,\n\t      writable: true\n\t    },\n\t    id: {\n\t      value: uuid.v4()\n\t    },\n\t    lastRenewal: {\n\t      value: null,\n\t      writable: true\n\t    },\n\t    notifier: {\n\t      value: null,\n\t      writable: true\n\t    },\n\t    onDoneCB: {\n\t      value: null,\n\t      writable: true\n\t    },\n\t    queue: {\n\t      value: [],\n\t      writable: true\n\t    },\n\t    // Delay before allowing a subscription renewal\n\t    renewalDelay: {\n\t      value: 500\n\t    },\n\t    scope: {\n\t      value: options && options.scope ? options.scope : 'all'\n\t    },\n\t    state: {\n\t      value: options && options.state ? options.state : 'done'\n\t    },\n\t    subscribing: {\n\t      value: false,\n\t      writable: true\n\t    },\n\t    users: {\n\t      value: options && options.users ? options.users : 'none'\n\t    },\n\t    // read-only properties\n\t    collection: {\n\t      value: collection,\n\t      enumerable: true\n\t    },\n\t    kuzzle: {\n\t      value: collection.kuzzle,\n\t      enumerable: true\n\t    },\n\t    // writable properties\n\t    filters: {\n\t      value: null,\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    headers: {\n\t      value: JSON.parse(JSON.stringify(collection.headers)),\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    volatile: {\n\t      value: (options && options.volatile) ? options.volatile : {},\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    roomId: {\n\t      value: null,\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    subscribeToSelf: {\n\t      value: options && typeof options.subscribeToSelf === 'boolean' ? options.subscribeToSelf : true,\n\t      enumerable: true,\n\t      writable: true\n\t    }\n\t  });\n\t\n\t  if (this.kuzzle.bluebird) {\n\t    return this.kuzzle.bluebird.promisifyAll(this, {\n\t      suffix: 'Promise',\n\t      filter: function (name, func, target, passes) {\n\t        var whitelist = ['count'];\n\t\n\t        return passes && whitelist.indexOf(name) !== -1;\n\t      }\n\t    });\n\t  }\n\t\n\t  return this;\n\t}\n\t\n\t/**\n\t * Returns the number of other subscriptions on that room.\n\t *\n\t * @param {responseCallback} cb - Handles the query response\n\t */\n\tRoom.prototype.count = function (cb) {\n\t  var data;\n\t\n\t  this.kuzzle.callbackRequired('Room.count', cb);\n\t\n\t  data = this.kuzzle.addHeaders({body: {roomId: this.roomId}}, this.headers);\n\t\n\t  if (!isReady.call(this)) {\n\t    this.queue.push({action: 'count', args: [cb]});\n\t    return;\n\t  }\n\t\n\t  if (!this.roomId) {\n\t    throw new Error('Room.count: cannot count subscriptions on an inactive room');\n\t  }\n\t\n\t  this.kuzzle.query(this.collection.buildQueryArgs('realtime', 'count'), data, function (err, res) {\n\t    cb(err, res && res.result.count);\n\t  });\n\t};\n\t\n\t/**\n\t * Renew the subscription using new filters\n\t *\n\t * @param {object} [filters] - Filters in Kuzzle DSL format\n\t * @param {responseCallback} notificationCB - called for each new notification\n\t * @param {responseCallback} [cb] - handles the query response\n\t */\n\tRoom.prototype.renew = function (filters, notificationCB, cb) {\n\t  var\n\t    now = Date.now(),\n\t    subscribeQuery = {\n\t      scope: this.scope,\n\t      state: this.state,\n\t      users: this.users\n\t    },\n\t    self = this;\n\t\n\t  if (typeof filters === 'function') {\n\t    cb = notificationCB;\n\t    notificationCB = filters;\n\t    filters = null;\n\t  }\n\t\n\t  if (!cb) {\n\t    cb = self.onDoneCB;\n\t  }\n\t\n\t  self.kuzzle.callbackRequired('Room.renew', notificationCB);\n\t\n\t  /*\n\t    Skip subscription renewal if another one was performed a moment before\n\t   */\n\t  if (self.lastRenewal && (now - self.lastRenewal) <= self.renewalDelay) {\n\t    return cb && cb(new Error('Subscription already renewed less than ' + self.renewalDelay + 'ms ago'));\n\t  }\n\t\n\t  if (filters) {\n\t    self.filters = filters;\n\t  }\n\t\n\t  /*\n\t   if not yet connected, register itself to the subscriptions list and wait for the\n\t   main Kuzzle object to renew once online\n\t    */\n\t  if (self.kuzzle.state !== 'connected') {\n\t    self.callback = notificationCB;\n\t    self.onDoneCB = cb;\n\t    self.kuzzle.subscriptions.pending[self.id] = self;\n\t    return;\n\t  }\n\t\n\t  if (self.subscribing) {\n\t    self.queue.push({action: 'renew', args: [filters, notificationCB, cb]});\n\t    return;\n\t  }\n\t\n\t  self.unsubscribe();\n\t  self.roomId = null;\n\t  self.subscribing = true;\n\t  self.callback = notificationCB;\n\t  self.onDoneCB = cb;\n\t  self.kuzzle.subscriptions.pending[self.id] = self;\n\t\n\t  subscribeQuery.body = self.filters;\n\t  subscribeQuery = self.kuzzle.addHeaders(subscribeQuery, this.headers);\n\t\n\t  self.kuzzle.query(self.collection.buildQueryArgs('realtime', 'subscribe'), subscribeQuery, {volatile: self.volatile}, function (error, response) {\n\t    delete self.kuzzle.subscriptions.pending[self.id];\n\t    self.subscribing = false;\n\t\n\t    if (error) {\n\t      self.queue = [];\n\t      return cb && cb(new Error('Error during Kuzzle subscription: ' + error.message));\n\t    }\n\t\n\t    self.lastRenewal = now;\n\t    self.roomId = response.result.roomId;\n\t    self.channel = response.result.channel;\n\t\n\t    if (!self.kuzzle.subscriptions[self.roomId]) {\n\t      self.kuzzle.subscriptions[self.roomId] = {};\n\t    }\n\t\n\t    self.kuzzle.subscriptions[self.roomId][self.id] = self;\n\t\n\t    self.notifier = notificationCallback.bind(self);\n\t    self.kuzzle.network.on(self.channel, self.notifier);\n\t\n\t    dequeue.call(self);\n\t    cb && cb(null, self);\n\t  });\n\t};\n\t\n\t/**\n\t * Unsubscribes from Kuzzle.\n\t *\n\t * Stop listening immediately. If there is no listener left on that room, sends an unsubscribe request to Kuzzle, once\n\t * pending subscriptions reaches 0, and only if there is still no listener on that room.\n\t * We wait for pending subscriptions to finish to avoid unsubscribing while another subscription on that room is\n\t *\n\t * @return {*} this\n\t */\n\tRoom.prototype.unsubscribe = function () {\n\t  var\n\t    self = this,\n\t    room = self.roomId,\n\t    interval;\n\t\n\t  if (!isReady.call(this)) {\n\t    self.queue.push({action: 'unsubscribe', args: []});\n\t    return self;\n\t  }\n\t\n\t  if (room) {\n\t    self.kuzzle.network.off(self.channel, this.notifier);\n\t\n\t    if (Object.keys(self.kuzzle.subscriptions[room]).length === 1) {\n\t      delete self.kuzzle.subscriptions[room];\n\t\n\t      if (Object.keys(self.kuzzle.subscriptions.pending).length === 0) {\n\t        self.kuzzle.query(self.collection.buildQueryArgs('realtime', 'unsubscribe'), {body: {roomId: room}});\n\t      } else {\n\t        interval = setInterval(function () {\n\t          if (Object.keys(self.kuzzle.subscriptions.pending).length === 0) {\n\t            if (!self.kuzzle.subscriptions[room]) {\n\t              self.kuzzle.query(self.collection.buildQueryArgs('realtime', 'unsubscribe'), {body: {roomId: room}});\n\t            }\n\t            clearInterval(interval);\n\t          }\n\t        }, 100);\n\t      }\n\t    } else {\n\t      delete self.kuzzle.subscriptions[room][self.id];\n\t    }\n\t\n\t    self.roomId = null;\n\t  }\n\t\n\t  return self;\n\t};\n\t\n\t/**\n\t * Helper function allowing to set headers while chaining calls.\n\t *\n\t * If the replace argument is set to true, replace the current headers with the provided content.\n\t * Otherwise, it appends the content to the current headers, only replacing already existing values\n\t *\n\t * @param content - new headers content\n\t * @param [replace] - default: false = append the content. If true: replace the current headers with tj\n\t */\n\tRoom.prototype.setHeaders = function (content, replace) {\n\t  this.kuzzle.setHeaders.call(this, content, replace);\n\t  return this;\n\t};\n\t\n\t/**\n\t * Callback called by the network handler when a message is sent to the subscribed room ID\n\t * Calls the registered callback if the notification passes the subscription filters\n\t *\n\t * @param {object} data - data\n\t * @returns {*}\n\t */\n\tfunction notificationCallback (data) {\n\t  if (data.error) {\n\t    return this.callback(data.error);\n\t  }\n\t\n\t  if (data.action === 'jwtTokenExpired') {\n\t    this.kuzzle.jwtToken = undefined;\n\t    return this.kuzzle.emitEvent('jwtTokenExpired');\n\t  }\n\t\n\t  if (data.controller === 'document' || (data.controller === 'realtime' && data.action === 'publish')) {\n\t    data.type = 'document';\n\t    data.document = new Document(this.collection, data.result._id, data.result._source);\n\t    delete data.result;\n\t  }\n\t  else if (data.controller === 'realtime') {\n\t    data.type = 'user';\n\t    data.user = {count: data.result.count};\n\t    delete data.result;\n\t  }\n\t\n\t  if (this.kuzzle.requestHistory[data.requestId]) {\n\t    if (this.subscribeToSelf) {\n\t      this.callback(null, data);\n\t    }\n\t    delete this.kuzzle.requestHistory[data.requestId];\n\t  } else {\n\t    this.callback(null, data);\n\t  }\n\t}\n\t\n\t\n\t/**\n\t * Dequeue actions performed while subscription was being renewed\n\t */\n\tfunction dequeue () {\n\t  var element;\n\t\n\t  while (this.queue.length > 0) {\n\t    element = this.queue.shift();\n\t\n\t    this[element.action].apply(this, element.args);\n\t  }\n\t}\n\t\n\tfunction isReady() {\n\t  return this.kuzzle.state === 'connected' && !this.subscribing;\n\t}\n\t\n\tmodule.exports = Room;\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t/**\n\t * @param {Collection} collection\n\t * @param {int} total\n\t * @param {Document[]} documents\n\t * @param {object} aggregations\n\t * @param {object} options\n\t * @param {object} filters\n\t * @param {SearchResult} previous\n\t * @property {Collection} collection\n\t * @property {number} total\n\t * @property {Document[]} documents\n\t * @property {object} aggregations\n\t * @property {object} options\n\t * @property {object} filters\n\t * @property {number} fetchedDocument\n\t * @constructor\n\t */\n\tfunction SearchResult (collection, total, documents, aggregations, options, filters, previous) {\n\t  Object.defineProperties(this, {\n\t    // read-only properties\n\t    collection: {\n\t      value: collection,\n\t      enumerable: true\n\t    },\n\t    total: {\n\t      value: total,\n\t      enumerable: true\n\t    },\n\t    documents: {\n\t      value: documents,\n\t      enumerable: true\n\t    },\n\t    aggregations: {\n\t      value: aggregations || {},\n\t      enumerable: true\n\t    },\n\t    options: {\n\t      value: options || {},\n\t      enumerable: true\n\t    },\n\t    filters: {\n\t      value: filters || {},\n\t      enumerable: true\n\t    },\n\t    // writable properties\n\t    fetchedDocument: {\n\t      value: previous instanceof SearchResult ? documents.length + previous.fetchedDocument : documents.length,\n\t      enumerable: true,\n\t      writable: true\n\t    }\n\t  });\n\t\n\t  // promisifying\n\t  if (this.collection.kuzzle.bluebird) {\n\t    return this.collection.kuzzle.bluebird.promisifyAll(this, {\n\t      suffix: 'Promise',\n\t      filter: function (name, func, target, passes) {\n\t        var whitelist = ['fetchNext'];\n\t\n\t        return passes && whitelist.indexOf(name) !== -1;\n\t      }\n\t    });\n\t  }\n\t\n\t  return this;\n\t}\n\t\n\t/**\n\t * @param {function} cb\n\t */\n\tSearchResult.prototype.fetchNext = function (cb) {\n\t  var\n\t    filters,\n\t    options = Object.assign({}, this.options);\n\t  \n\t  options.previous = this;\n\t\n\t  // retrieve next results with scroll if original search use it\n\t  if (options.scrollId) {\n\t    if (this.fetchedDocument >= this.getTotal()) {\n\t      cb(null, null);\n\t      return;\n\t    }\n\t\n\t    // from and size parameters are not valid for a scroll action\n\t    if (typeof options.from !== 'undefined') {\n\t      delete options.from;\n\t    }\n\t\n\t    if (options.size) {\n\t      delete options.size;\n\t    }\n\t\n\t    this.collection.scroll(options.scrollId, options, this.filters || {}, cb);\n\t\n\t    return;\n\t  }\n\t\n\t  // retrieve next results with from/size if original search use it\n\t  if (options.from !== undefined && options.size !== undefined) {\n\t    filters = Object.assign({}, this.filters);\n\t\n\t    // check if we need to do next request to fetch all matching documents\n\t    options.from += options.size;\n\t\n\t    if (options.from >= this.getTotal()) {\n\t      cb(null, null);\n\t\n\t      return;\n\t    }\n\t\n\t    this.collection.search(filters, options, cb);\n\t\n\t    return;\n\t  }\n\t\n\t  cb(new Error('Unable to retrieve next results from search: missing scrollId or from/size params'));\n\t};\n\t\n\t/**\n\t * @returns {Document[]}\n\t */\n\tSearchResult.prototype.getDocuments = function () {\n\t  return this.documents;\n\t};\n\t\n\t/**\n\t * @returns {number}\n\t */\n\tSearchResult.prototype.getTotal = function () {\n\t  return this.total;\n\t};\n\t\n\t/**\n\t * @returns {object}\n\t */\n\tSearchResult.prototype.getAggregations = function () {\n\t  return this.aggregations;\n\t};\n\t\n\t/**\n\t * @returns {Object}\n\t */\n\tSearchResult.prototype.getOptions = function() {\n\t  return this.options;\n\t};\n\t\n\t/**\n\t * @returns {object}\n\t */\n\tSearchResult.prototype.getFilters = function() {\n\t  return this.filters;\n\t};\n\t\n\t/**\n\t * @returns {object}\n\t */\n\tSearchResult.prototype.getCollection = function () {\n\t  return this.collection;\n\t};\n\t\n\t/**\n\t * @returns {number}\n\t */\n\tSearchResult.prototype.getFetchedDocument = function () {\n\t  return this.fetchedDocument;\n\t};\n\t\n\tmodule.exports = SearchResult;\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\t/**\n\t * Sugar-code handling the result of a Room.renew call\n\t * @constructor\n\t */\n\tfunction SubscribeResult() {\n\t  this.cbs = [];\n\t  this.error = null;\n\t  this.room = null;\n\t}\n\t\n\t/**\n\t * Registers a callback to be called with a subscription result\n\t * @param {Function} cb\n\t */\n\tSubscribeResult.prototype.onDone = function (cb) {\n\t  if (this.error || this.room) {\n\t    cb(this.error, this.room);\n\t  }\n\t  else {\n\t    this.cbs.push(cb);\n\t  }\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Calls all registered callbacks\n\t *\n\t * @param {Object} error object\n\t * @param {Room} room\n\t */\n\tSubscribeResult.prototype.done = function (error, room) {\n\t  this.error = error;\n\t  this.room = room;\n\t\n\t  this.cbs.forEach(function (cb) {\n\t    cb(error, room);\n\t  });\n\t};\n\t\n\tmodule.exports = SubscribeResult;\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t *\n\t * @param host\n\t * @param port\n\t * @param sslConnection\n\t * @returns {Object} tnstantiated WebSocket/Socket.IO object\n\t */\n\t\n\tfunction network(host, port, sslConnection) {\n\t  // Web browser / NodeJS websocket handling\n\t  if (typeof window !== 'undefined') {\n\t    // use native websockets if the browser supports it\n\t    if (typeof WebSocket !== 'undefined') {\n\t      return new (__webpack_require__(3))(host, port, sslConnection);\n\t    }\n\t    // otherwise fallback to socket.io, if available\n\t    else if (window.io) {\n\t      return new (__webpack_require__(15))(host, port, sslConnection);\n\t    }\n\t\n\t    throw new Error('Aborting: no websocket support detected and no socket.io library loaded either.');\n\t  }\n\t\n\t  return new (__webpack_require__(3))(host, port, sslConnection);\n\t}\n\t\n\tmodule.exports = network;\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n\tfunction SocketIO(host, port, ssl) {\n\t  this.host = host;\n\t  this.port = port;\n\t  this.ssl = ssl;\n\t  this.socket = null;\n\t\n\t  /**\n\t   * Creates a new socket from the provided arguments\n\t   *\n\t   * @constructor\n\t   * @param {boolean} autoReconnect\n\t   * @param {int} reconnectionDelay\n\t   */\n\t  this.connect = function (autoReconnect, reconnectionDelay) {\n\t    this.socket = window.io((this.ssl ? 'https://' : 'http://') + this.host + ':' + this.port, {\n\t      reconnection: autoReconnect,\n\t      reconnectionDelay: reconnectionDelay,\n\t      forceNew: true\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Fires the provided callback whence a connection is established\n\t   *\n\t   * @param {function} callback\n\t   */\n\t  this.onConnect = function (callback) {\n\t    this.socket.on('connect', callback);\n\t  };\n\t\n\t  /**\n\t   * Fires the provided callback whenever a connection error is received\n\t   * @param {function} callback\n\t   */\n\t  this.onConnectError = function (callback) {\n\t    this.socket.on('connect_error', callback);\n\t  };\n\t\n\t  /**\n\t   * Fires the provided callback whenever a disconnection occurred\n\t   * @param {function} callback\n\t   */\n\t  this.onDisconnect = function (callback) {\n\t    this.socket.on('disconnect', callback);\n\t  };\n\t\n\t  /**\n\t   * Fires the provided callback whenever a connection has been reestablished\n\t   * @param {function} callback\n\t   */\n\t  this.onReconnect = function (callback) {\n\t    this.socket.on('reconnect', callback);\n\t  };\n\t\n\t  /**\n\t   * Registers a callback on a room. Once 1 message is received, fires the\n\t   * callback and unregister it afterward.\n\t   *\n\t   * @param {string} roomId\n\t   * @param {function} callback\n\t   */\n\t  this.once = function (roomId, callback) {\n\t    this.socket.once(roomId, callback);\n\t  };\n\t\n\t  /**\n\t   * Registers a callback on a room.\n\t   *\n\t   * @param {string} roomId\n\t   * @param {function} callback\n\t   */\n\t  this.on = function (roomId, callback) {\n\t    this.socket.on(roomId, callback);\n\t  };\n\t\n\t  /**\n\t   * Unregisters a callback from a room.\n\t   *\n\t   * @param {string} roomId\n\t   * @param {function} callback\n\t   */\n\t  this.off = function (roomId, callback) {\n\t    this.socket.off(roomId, callback);\n\t  };\n\t\n\t\n\t  /**\n\t   * Sends a payload to the connected server\n\t   *\n\t   * @param {Object} payload\n\t   */\n\t  this.send = function (payload) {\n\t    this.socket.emit('kuzzle', payload);\n\t  };\n\t\n\t  /**\n\t   * Closes the connection\n\t   */\n\t  this.close = function () {\n\t    this.socket.close();\n\t    this.socket = null;\n\t  };\n\t}\n\t\n\tmodule.exports = SocketIO;\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar SecurityDocument = __webpack_require__(1);\n\t\n\tfunction Profile(Security, id, content) {\n\t\n\t  SecurityDocument.call(this, Security, id, content);\n\t\n\t  // Define properties\n\t  Object.defineProperties(this, {\n\t    // private properties\n\t    deleteActionName: {\n\t      value: 'deleteProfile'\n\t    },\n\t    updateActionName: {\n\t      value: 'updateProfile'\n\t    }\n\t  });\n\t\n\t  // promisifying\n\t  if (Security.kuzzle.bluebird) {\n\t    return Security.kuzzle.bluebird.promisifyAll(this, {\n\t      suffix: 'Promise',\n\t      filter: function (name, func, target, passes) {\n\t        var whitelist = ['hydrate', 'save'];\n\t\n\t        return passes && whitelist.indexOf(name) !== -1;\n\t      }\n\t    });\n\t  }\n\t\n\t}\n\t\n\tProfile.prototype = Object.create(SecurityDocument.prototype, {\n\t  constructor: {\n\t    value: Profile\n\t  }\n\t});\n\t\n\t/**\n\t * Persist to the persistent layer the current profile\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @returns {Profile} this\n\t */\n\tProfile.prototype.save = function (options, cb) {\n\t  var\n\t    data,\n\t    self = this;\n\t\n\t  if (!this.content.policies) {\n\t    throw new Error('Argument \"policies\" is mandatory in a profile. This argument contains an array of objects.');\n\t  }\n\t\n\t  if (options && cb === undefined && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  data = this.serialize();\n\t\n\t  self.kuzzle.query(self.Security.buildQueryArgs('createOrReplaceProfile'), data, options, cb && function (error) {\n\t    cb(error, error ? undefined : self);\n\t  });\n\t\n\t  return self;\n\t};\n\t\n\t\n\t/**\n\t * Add a policy in the policies list\n\t * @param {Object} policy - must be an object containing at least a \"roleId\" member which must be a string.\n\t *\n\t * @returns {Profile} this\n\t */\n\tProfile.prototype.addPolicy = function (policy) {\n\t\n\t  if (typeof policy !== 'object' || typeof policy.roleId !== 'string') {\n\t    throw new Error('Parameter \"policies\" must be an object containing at least a \"roleId\" member which must be a string.');\n\t  }\n\t\n\t  if (!this.content.policies) {\n\t    this.content.policies = [];\n\t  }\n\t\n\t  this.content.policies.push(policy);\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Set policies list\n\t * @param {Array} policies - must be an array of objects containing at least a \"roleId\" member which must be a string\n\t *\n\t * @returns {Profile} this\n\t */\n\tProfile.prototype.setPolicies = function (policies) {\n\t\n\t  if (!Array.isArray(policies)) {\n\t    throw new Error('Parameter \"policies\" must be an array of objects containing at least a \"roleId\" member which must be a string');\n\t  }\n\t\n\t  policies.map(function (policy) {\n\t    if (typeof policy !== 'object' || typeof policy.roleId !== 'string') {\n\t      throw new Error('Parameter \"policies\" must be an array of objects containing at least a \"roleId\" member which must be a string');\n\t    }\n\t  });\n\t\n\t  this.content.policies = policies;\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Serialize this object into a JSON object\n\t *\n\t * @return {object} JSON object representing this securityDocument\n\t */\n\tProfile.prototype.serialize = function () {\n\t  var\n\t    data = {};\n\t\n\t  if (this.id) {\n\t    data._id = this.id;\n\t  }\n\t\n\t  data.body = this.content;\n\t\n\t  return data;\n\t};\n\t\n\t/**\n\t * Returns the list of policies associated to this profile.\n\t * Each policy element is an array of objects containing at least a \"roleId\" member which must be a string\n\t *\n\t * @return {object} an array of policies\n\t */\n\tProfile.prototype.getPolicies = function () {\n\t  return this.content.policies;\n\t};\n\t\n\tmodule.exports = Profile;\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar SecurityDocument = __webpack_require__(1);\n\t\n\tfunction Role(Security, id, content) {\n\t\n\t  SecurityDocument.call(this, Security, id, content);\n\t\n\t  // Define properties\n\t  Object.defineProperties(this, {\n\t    // private properties\n\t    deleteActionName: {\n\t      value: 'deleteRole'\n\t    },\n\t    updateActionName: {\n\t      value: 'updateRole'\n\t    }\n\t  });\n\t\n\t  // promisifying\n\t  if (Security.kuzzle.bluebird) {\n\t    return Security.kuzzle.bluebird.promisifyAll(this, {\n\t      suffix: 'Promise',\n\t      filter: function (name, func, target, passes) {\n\t        var whitelist = ['save'];\n\t\n\t        return passes && whitelist.indexOf(name) !== -1;\n\t      }\n\t    });\n\t  }\n\t\n\t}\n\t\n\tRole.prototype = Object.create(SecurityDocument.prototype, {\n\t  constructor: {\n\t    value: Role\n\t  }\n\t});\n\t\n\t/**\n\t * Saves this role into Kuzzle.\n\t *\n\t * If this is a new role, this function will create it in Kuzzle.\n\t * Otherwise, this method will replace the latest version of this role in Kuzzle by the current content\n\t * of this object.\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @returns {Role} this object\n\t */\n\tRole.prototype.save = function (options, cb) {\n\t  var\n\t    data = this.serialize(),\n\t    self = this;\n\t\n\t  if (options && cb === undefined && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.query(this.Security.buildQueryArgs('createOrReplaceRole'), data, options, cb && function (error) {\n\t    cb(error, error ? undefined : self);\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\tmodule.exports = Role;\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar\n\t  Role = __webpack_require__(17),\n\t  Profile = __webpack_require__(16),\n\t  User = __webpack_require__(4);\n\t\n\t/**\n\t * Kuzzle security constructor\n\t *\n\t * @param kuzzle\n\t * @returns {Security}\n\t * @constructor\n\t */\n\tfunction Security(kuzzle) {\n\t\n\t  Object.defineProperty(this, 'kuzzle', {\n\t    value: kuzzle\n\t  });\n\t\n\t  Object.defineProperty(this, 'buildQueryArgs', {\n\t    value: function (action) {\n\t      return {\n\t        controller: 'security',\n\t        action: action\n\t      };\n\t    }\n\t  });\n\t\n\t  if (this.kuzzle.bluebird) {\n\t    return this.kuzzle.bluebird.promisifyAll(this, {\n\t      suffix: 'Promise',\n\t      filter: function (name, func, target, passes) {\n\t        var blacklist = ['role', 'profile', 'user', 'isActionAllowed'];\n\t\n\t        return passes && blacklist.indexOf(name) === -1;\n\t      }\n\t    });\n\t  }\n\t\n\t  return this;\n\t}\n\t\n\t\n\t/**\n\t * Retrieve a single Role using its unique role ID.\n\t *\n\t * @param {string} id\n\t * @param {object|responseCallback} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - returns Kuzzle's response\n\t */\n\tSecurity.prototype.fetchRole = function (id, options, cb) {\n\t  var\n\t    data,\n\t    self = this;\n\t\n\t  if (!id) {\n\t    throw new Error('Id parameter is mandatory for fetchRole function');\n\t  }\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  data = {_id: id};\n\t\n\t  self.kuzzle.callbackRequired('Security.fetchRole', cb);\n\t\n\t  self.kuzzle.query(this.buildQueryArgs('getRole'), data, options, function (err, response) {\n\t    cb(err, err ? undefined : new Role(self, response.result._id, response.result._source));\n\t  });\n\t};\n\t\n\t/**\n\t * Executes a search on roles according to a filter\n\t *\n\t * /!\\ There is a small delay between role creation and their existence in our persistent search layer,\n\t * usually a couple of seconds.\n\t * That means that a role that was just been created won’t be returned by this function.\n\t *\n\t * @param {Object} filters - this object can contains an array `indexes` with a list of index id, a integer `from` and a integer `size`\n\t * @param {object|responseCallback} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - returns Kuzzle's response\n\t *\n\t */\n\tSecurity.prototype.searchRoles = function (filters, options, cb) {\n\t  var\n\t    self = this;\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.callbackRequired('Security.searchRoles', cb);\n\t\n\t  self.kuzzle.query(this.buildQueryArgs('searchRoles'), {body: filters}, options, function (error, result) {\n\t    var documents;\n\t\n\t    if (error) {\n\t      return cb(error);\n\t    }\n\t\n\t    documents = result.result.hits.map(function (doc) {\n\t      return new Role(self, doc._id, doc._source);\n\t    });\n\t\n\t    cb(null, { total: result.result.total, roles: documents });\n\t  });\n\t};\n\t\n\t/**\n\t * Create a new role in Kuzzle.\n\t *\n\t * Takes an optional argument object with the following property:\n\t *    - replaceIfExist (boolean, default: false):\n\t *        If the same role already exists: throw an error if sets to false.\n\t *        Replace the existing role otherwise\n\t *\n\t * @param {string} id - role identifier\n\t * @param {object} content - a plain javascript object representing the role\n\t * @param {object|responseCallback} [options] - (optional) arguments\n\t * @param {responseCallback} [cb] - (optional) Handles the query response\n\t */\n\tSecurity.prototype.createRole = function (id, content, options, cb) {\n\t  var\n\t    self = this,\n\t    data = {},\n\t    action = 'createRole';\n\t\n\t  if (!id || typeof id !== 'string') {\n\t    throw new Error('Security.createRole: cannot create a role without a role ID');\n\t  }\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  data._id = id;\n\t  data.body = content;\n\t\n\t  if (options) {\n\t    action = options.replaceIfExist ? 'createOrReplaceRole' : 'createRole';\n\t  }\n\t\n\t  self.kuzzle.query(this.buildQueryArgs(action), data, options, cb && function (err, res) {\n\t    cb(err, err ? undefined : new Role(self, res.result._id, res.result._source));\n\t  });\n\t};\n\t\n\t\n\t/**\n\t * Update a role in Kuzzle.\n\t *\n\t * @param {string} id - role identifier\n\t * @param {object} content - a plain javascript object representing the role's modification\n\t * @param {object|responseCallback} [options] - (optional) arguments\n\t * @param {responseCallback} [cb] - (optional) Handles the query response\n\t * @returns {Security} this object\n\t */\n\tSecurity.prototype.updateRole = function (id, content, options, cb) {\n\t  var\n\t    self = this,\n\t    data = {_id: id, body: content},\n\t    action = 'updateRole';\n\t\n\t  if (!id || typeof id !== 'string') {\n\t    throw new Error('Security.updateRole: cannot update a role without a role ID');\n\t  }\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.query(this.buildQueryArgs(action), data, options, cb && function (err) {\n\t    cb(err, err ? undefined : new Role(self, id, content));\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Delete role.\n\t *\n\t * There is a small delay between role deletion and their deletion in our advanced search layer,\n\t * usually a couple of seconds.\n\t * That means that a role that was just been delete will be returned by this function\n\t *\n\t *\n\t * @param {string} id - Role id to delete\n\t * @param {object|responseCallback} [options] - (optional) arguments\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @returns {Security} this object\n\t */\n\tSecurity.prototype.deleteRole = function (id, options, cb) {\n\t  var data = {_id: id};\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  this.kuzzle.query(this.buildQueryArgs('deleteRole'), data, options, cb && function (err, res) {\n\t    cb(err, err ? undefined : res.result._id);\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Instantiate a new Role object. Workaround to the module.exports limitation, preventing multiple\n\t * constructors to be exposed without having to use a factory or a composed object.\n\t *\n\t * @param {string} id - role id\n\t * @param {object} content - role content\n\t * @constructor\n\t */\n\tSecurity.prototype.role = function(id, content) {\n\t  return new Role(this, id, content);\n\t};\n\t\n\t\n\t/**\n\t * Get a specific profile from kuzzle\n\t *\n\t *\n\t * @param {string} id\n\t * @param {object|responseCallback} [options] - (optional) arguments\n\t * @param {responseCallback} cb - returns Kuzzle's response\n\t */\n\tSecurity.prototype.fetchProfile = function (id, options, cb) {\n\t  var\n\t    data,\n\t    self = this;\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  if (!id || typeof id !== 'string') {\n\t    throw new Error('Id parameter is mandatory for fetchProfile function');\n\t  }\n\t\n\t\n\t  data = {_id: id};\n\t\n\t  self.kuzzle.callbackRequired('Security.fetchProfile', cb);\n\t\n\t  self.kuzzle.query(this.buildQueryArgs('getProfile'), data, options, function (error, response) {\n\t    cb(error, error ? undefined : new Profile(self, response.result._id, response.result._source));\n\t  });\n\t};\n\t\n\t/**\n\t * Executes a search on profiles according to a filter\n\t *\n\t *\n\t * /!\\ There is a small delay between profile creation and their existence in our persistent search layer,\n\t * usually a couple of seconds.\n\t * That means that a profile that was just been created won’t be returned by this function.\n\t *\n\t * @param {Object} filters - this object can contains an array `roles` with a list of roles id, a integer `from` and a integer `size`\n\t * @param {object|responseCallback} [options] - (optional) arguments\n\t * @param {responseCallback} [cb] - returns Kuzzle's response\n\t */\n\tSecurity.prototype.searchProfiles = function (filters, options, cb) {\n\t  var\n\t    self = this;\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.callbackRequired('Security.searchProfiles', cb);\n\t\n\t  self.kuzzle.query(this.buildQueryArgs('searchProfiles'), {body: filters}, options, function (error, response) {\n\t    var documents;\n\t\n\t    if (error) {\n\t      return cb(error);\n\t    }\n\t\n\t    documents = response.result.hits.map(function (doc) {\n\t      return new Profile(self, doc._id, doc._source);\n\t    });\n\t\n\t    cb(null, { total: response.result.total, profiles: documents });\n\t  });\n\t};\n\t\n\t/**\n\t * Create a new profile in Kuzzle.\n\t *\n\t * Takes an optional argument object with the following property:\n\t *    - replaceIfExist (boolean, default: false):\n\t *        If the same profile already exists: throw an error if sets to false.\n\t *        Replace the existing profile otherwise\n\t *\n\t * @param {string} id - profile identifier\n\t * @param {object} content - attribute `roles` in `content` must only contains an array of role id\n\t * @param {object|responseCallback} [options] - (optional) arguments\n\t * @param {responseCallback} [cb] - (optional) Handles the query response\n\t */\n\tSecurity.prototype.createProfile = function (id, content, options, cb) {\n\t  var\n\t    self = this,\n\t    data = {},\n\t    action = 'createProfile';\n\t\n\t  if (!id || typeof id !== 'string') {\n\t    throw new Error('Security.createProfile: cannot create a profile without a profile ID');\n\t  }\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  data._id = id;\n\t  data.body = content;\n\t\n\t  if (options) {\n\t    action = options.replaceIfExist ? 'createOrReplaceProfile' : 'createProfile';\n\t  }\n\t\n\t  self.kuzzle.query(this.buildQueryArgs(action), data, options, cb && function (err, res) {\n\t    cb(err, err ? undefined : new Profile(self, res.result._id, res.result._source));\n\t  });\n\t};\n\t\n\t\n\t/**\n\t * Update a profile in Kuzzle.\n\t *\n\t * @param {string} id - profile identifier\n\t * @param {object} content - a plain javascript object representing the profile's modification\n\t * @param {object|responseCallback} [options] - (optional) arguments\n\t * @param {responseCallback} [cb] - (optional) Handles the query response\n\t * @returns {Security} this object\n\t */\n\tSecurity.prototype.updateProfile = function (id, content, options, cb) {\n\t  var\n\t    self = this,\n\t    data = {},\n\t    action = 'updateProfile';\n\t\n\t  if (!id || typeof id !== 'string') {\n\t    throw new Error('Security.updateProfile: cannot update a profile without a profile ID');\n\t  }\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  data._id = id;\n\t  data.body = content;\n\t\n\t  self.kuzzle.query(this.buildQueryArgs(action), data, options, cb && function (err, res) {\n\t    var updatedContent = {};\n\t\n\t    if (err) {\n\t      return cb(err);\n\t    }\n\t\n\t    Object.keys(res.result._source).forEach(function (property) {\n\t      updatedContent[property] = res.result._source[property];\n\t    });\n\t\n\t    cb(null, new Profile(self, res.result._id, updatedContent));\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Delete profile.\n\t *\n\t * There is a small delay between profile deletion and their deletion in our advanced search layer,\n\t * usually a couple of seconds.\n\t * That means that a profile that was just been delete will be returned by this function\n\t *\n\t *\n\t * @param {string} id - Profile id to delete\n\t * @param {object|responseCallback} [options] - (optional) arguments\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @returns {Security} this object\n\t */\n\tSecurity.prototype.deleteProfile = function (id, options, cb) {\n\t  var data = {_id: id};\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  this.kuzzle.query(this.buildQueryArgs('deleteProfile'), data, options, cb && function (err, res) {\n\t    cb(err, err ? undefined : res.result._id);\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Instantiate a new Profile object. Workaround to the module.exports limitation, preventing multiple\n\t * constructors to be exposed without having to use a factory or a composed object.\n\t *\n\t * @param {string} id - profile id\n\t * @param {object} content - profile content\n\t * @constructor\n\t */\n\tSecurity.prototype.profile = function(id, content) {\n\t  return new Profile(this, id, content);\n\t};\n\t\n\t/**\n\t * Get a specific user from kuzzle using its unique ID\n\t *\n\t * @param {string} id\n\t * @param {object|responseCallback} [options] - (optional) arguments\n\t * @param {responseCallback} cb - returns Kuzzle's response\n\t */\n\tSecurity.prototype.fetchUser = function (id, options, cb) {\n\t  var\n\t    data = {_id: id},\n\t    self = this;\n\t\n\t  if (!id || typeof id !== 'string') {\n\t    throw new Error('Id parameter is mandatory for fetchUser function');\n\t  }\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.callbackRequired('Security.fetchUser', cb);\n\t\n\t  self.kuzzle.query(this.buildQueryArgs('getUser'), data, options, function (err, response) {\n\t    cb(err, err ? undefined : new User(self, response.result._id, response.result._source));\n\t  });\n\t};\n\t\n\t/**\n\t * Executes a search on user according to a filter\n\t *\n\t * /!\\ There is a small delay between user creation and their existence in our persistent search layer,\n\t * usually a couple of seconds.\n\t * That means that a user that was just been created won’t be returned by this function.\n\t *\n\t * @param {Object} filters - same filters as documents filters\n\t * @param {object|responseCallback} [options] - (optional) arguments\n\t * @param {responseCallback} [cb] - returns Kuzzle's response\n\t */\n\tSecurity.prototype.searchUsers = function (filters, options, cb) {\n\t  var\n\t    self = this;\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.callbackRequired('Security.searchUsers', cb);\n\t\n\t  self.kuzzle.query(this.buildQueryArgs('searchUsers'), {body: filters}, options, function (error, response) {\n\t    var documents;\n\t\n\t    if (error) {\n\t      return cb(error);\n\t    }\n\t\n\t    documents = response.result.hits.map(function (doc) {\n\t      return new User(self, doc._id, doc._source);\n\t    });\n\t\n\t    cb(null, { total: response.result.total, users: documents });\n\t  });\n\t};\n\t\n\t/**\n\t * Create a new user in Kuzzle.\n\t *\n\t * Takes an optional argument object with the following property:\n\t *    - replaceIfExist (boolean, default: false):\n\t *        If the same user already exists: throw an error if sets to false.\n\t *        Replace the existing user otherwise\n\t *\n\t * @param {string} id - user identifier\n\t * @param {object} content - attribute `profileIds` in `content` must only contain an array of profile ids\n\t * @param {object|responseCallback} [options] - (optional) arguments\n\t * @param {responseCallback} [cb] - (optional) Handles the query response\n\t */\n\tSecurity.prototype.createUser = function (id, content, options, cb) {\n\t  var\n\t    self = this,\n\t    data = {_id: id, body: content},\n\t    action = 'createUser';\n\t\n\t  if (!id || typeof id !== 'string') {\n\t    throw new Error('Security.createUser: cannot create a user without a user ID');\n\t  }\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  if (options) {\n\t    action = options.replaceIfExist ? 'createOrReplaceUser' : 'createUser';\n\t  }\n\t\n\t  self.kuzzle.query(this.buildQueryArgs(action), data, null, cb && function (err, res) {\n\t    cb(err, err ? undefined : new User(self, res.result._id, res.result._source));\n\t  });\n\t};\n\t\n\t/**\n\t * Create a new restricted user in Kuzzle.\n\t *\n\t * This function will create a new user. It is not usable to update an existing user.\n\t * This function allows anonymous users to create a \"restricted\" user with predefined rights.\n\t *\n\t * @param {string} id - user identifier\n\t * @param {object} content - attribute `profile` in `content` must only contains the profile id\n\t * @param {object|responseCallback} [options] - (optional) arguments\n\t * @param {responseCallback} [cb] - (optional) Handles the query response\n\t */\n\tSecurity.prototype.createRestrictedUser = function (id, content, options, cb) {\n\t  var\n\t    self = this,\n\t    data = {_id: id, body: content};\n\t\n\t  if (!id || typeof id !== 'string') {\n\t    throw new Error('Security.createRestrictedUser: cannot create a user without a user ID');\n\t  }\n\t\n\t  if (content.profileIds) {\n\t    throw new Error('Security.createRestrictedUser: cannot provide profileIds');\n\t  }\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.query(this.buildQueryArgs('createRestrictedUser'), data, null, cb && function (err, res) {\n\t    cb(err, err ? undefined : new User(self, res.result._id, res.result._source));\n\t  });\n\t};\n\t\n\t\n\t/**\n\t * Update an user in Kuzzle.\n\t *\n\t * @param {string} id - user identifier\n\t * @param {object} content - a plain javascript object representing the user's modification\n\t * @param {object|responseCallback} [options] - (optional) arguments\n\t * @param {responseCallback} [cb] - (optional) Handles the query response\n\t * @returns {Security} this object\n\t */\n\tSecurity.prototype.updateUser = function (id, content, options, cb) {\n\t  var\n\t    self = this,\n\t    data = {},\n\t    action = 'updateUser';\n\t\n\t  if (!id || typeof id !== 'string') {\n\t    throw new Error('Security.updateUser: cannot update an user without an user ID');\n\t  }\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  data._id = id;\n\t  data.body = content;\n\t\n\t  self.kuzzle.query(this.buildQueryArgs(action), data, options, cb && function (err, res) {\n\t    cb(err, err ? undefined : new User(self, res.result._id, res.result._source));\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Delete user.\n\t *\n\t * There is a small delay between user deletion and their deletion in our advanced search layer,\n\t * usually a couple of seconds.\n\t * That means that a user that was just been delete will be returned by this function\n\t *\n\t *\n\t * @param {string} id - Profile id to delete\n\t * @param {object|responseCallback} [options] - (optional) arguments\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @returns {Security} this object\n\t */\n\tSecurity.prototype.deleteUser = function (id, options, cb) {\n\t  var data = {_id: id};\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  this.kuzzle.query(this.buildQueryArgs('deleteUser'), data, options, cb && function (err, res) {\n\t    cb(err, err ? undefined : res.result._id);\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Instantiate a new User object. Workaround to the module.exports limitation, preventing multiple\n\t * constructors to be exposed without having to use a factory or a composed object.\n\t *\n\t * @param {string} id - user id\n\t * @param {object} content - user content\n\t * @constructor\n\t */\n\tSecurity.prototype.user = function(id, content) {\n\t  return new User(this, id, content);\n\t};\n\t\n\t/**\n\t * Tells whether an action is allowed, denied or conditional based on the rights\n\t * rights provided as the first argument. An action is defined as a couple of\n\t * action and controller (mandatory), plus an index and a collection(optional).\n\t *\n\t * @param {object} rights - The rights rights associated to a user\n\t *                            (see getMyrights and getUserrights).\n\t * @param {string} controller - The controller to check the action onto.\n\t * @param {string} action - The action to perform.\n\t * @param {string} index - (optional) The name of index to perform the action onto.\n\t * @param {string} collection - (optional) The name of the collection to perform the action onto.\n\t *\n\t * @returns {string} ['allowed', 'denied', 'conditional'] where conditional cases\n\t *                   correspond to rights containing closures.\n\t *                   See also http://kuzzle.io/guide/#roles-definition\n\t */\n\tSecurity.prototype.isActionAllowed = function(rights, controller, action, index, collection) {\n\t  var filteredRights;\n\t\n\t  if (!rights || typeof rights !== 'object') {\n\t    throw new Error('rights parameter is mandatory for isActionAllowed function');\n\t  }\n\t  if (!controller || typeof controller !== 'string') {\n\t    throw new Error('controller parameter is mandatory for isActionAllowed function');\n\t  }\n\t  if (!action || typeof action !== 'string') {\n\t    throw new Error('action parameter is mandatory for isActionAllowed function');\n\t  }\n\t\n\t  // We filter in all the rights that match the request (including wildcards).\n\t  filteredRights = rights\n\t    .filter(function (right) {\n\t      return right.controller === controller || right.controller === '*';\n\t    })\n\t    .filter(function (right) {\n\t      return right.action === action || right.action === '*';\n\t    })\n\t    .filter(function (right) {\n\t      return right.index === index || right.index === '*';\n\t    })\n\t    .filter(function (right) {\n\t      return right.collection === collection || right.collection === '*';\n\t    });\n\t\n\t  // Then, if at least one right allows the action, we return 'allowed'\n\t  if (filteredRights.some(function (item) { return item.value === 'allowed'; })) {\n\t    return 'allowed';\n\t  }\n\t  // If no right allows the action, we check for conditionals.\n\t  if (filteredRights.some(function (item) { return item.value === 'conditional'; })) {\n\t    return 'conditional';\n\t  }\n\t  // Otherwise we return 'denied'.\n\t  return 'denied';\n\t};\n\t\n\t\n\t/**\n\t * Gets the rights array of a given user.\n\t *\n\t * @param {string} userId The id of the user.\n\t * @param {object|responseCallback} [options] - (optional) arguments\n\t * @param {function} cb The callback containing the normalized array of rights.\n\t */\n\tSecurity.prototype.getUserRights = function (userId, options, cb) {\n\t  var\n\t    data = {_id: userId},\n\t    self = this;\n\t\n\t  if (!userId || typeof userId !== 'string') {\n\t    throw new Error('userId parameter is mandatory for getUserRights function');\n\t  }\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.callbackRequired('Kuzzle.getUserRights', cb);\n\t\n\t  this.kuzzle.query(this.buildQueryArgs('getUserRights'), data, options, cb && function (err, res) {\n\t    cb(err, err ? undefined : res.result.hits);\n\t  });\n\t};\n\t\n\tmodule.exports = Security;\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Unique ID creation requires a high quality random # generator.  We feature\n\t// detect to determine the best RNG source, normalizing to a function that\n\t// returns 128-bits of randomness, since that's what's usually required\n\tvar rng = __webpack_require__(7);\n\tvar bytesToUuid = __webpack_require__(6);\n\t\n\t// **`v1()` - Generate time-based UUID**\n\t//\n\t// Inspired by https://github.com/LiosK/UUID.js\n\t// and http://docs.python.org/library/uuid.html\n\t\n\t// random #'s we need to init node and clockseq\n\tvar _seedBytes = rng();\n\t\n\t// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n\tvar _nodeId = [\n\t  _seedBytes[0] | 0x01,\n\t  _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]\n\t];\n\t\n\t// Per 4.2.2, randomize (14 bit) clockseq\n\tvar _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;\n\t\n\t// Previous uuid creation time\n\tvar _lastMSecs = 0, _lastNSecs = 0;\n\t\n\t// See https://github.com/broofa/node-uuid for API details\n\tfunction v1(options, buf, offset) {\n\t  var i = buf && offset || 0;\n\t  var b = buf || [];\n\t\n\t  options = options || {};\n\t\n\t  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\t\n\t  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n\t  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n\t  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n\t  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\t  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\t\n\t  // Per 4.2.1.2, use count of uuid's generated during the current clock\n\t  // cycle to simulate higher resolution clock\n\t  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\t\n\t  // Time since last uuid creation (in msecs)\n\t  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\t\n\t  // Per 4.2.1.2, Bump clockseq on clock regression\n\t  if (dt < 0 && options.clockseq === undefined) {\n\t    clockseq = clockseq + 1 & 0x3fff;\n\t  }\n\t\n\t  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n\t  // time interval\n\t  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n\t    nsecs = 0;\n\t  }\n\t\n\t  // Per 4.2.1.2 Throw error if too many uuids are requested\n\t  if (nsecs >= 10000) {\n\t    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n\t  }\n\t\n\t  _lastMSecs = msecs;\n\t  _lastNSecs = nsecs;\n\t  _clockseq = clockseq;\n\t\n\t  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\t  msecs += 12219292800000;\n\t\n\t  // `time_low`\n\t  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n\t  b[i++] = tl >>> 24 & 0xff;\n\t  b[i++] = tl >>> 16 & 0xff;\n\t  b[i++] = tl >>> 8 & 0xff;\n\t  b[i++] = tl & 0xff;\n\t\n\t  // `time_mid`\n\t  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n\t  b[i++] = tmh >>> 8 & 0xff;\n\t  b[i++] = tmh & 0xff;\n\t\n\t  // `time_high_and_version`\n\t  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\t  b[i++] = tmh >>> 16 & 0xff;\n\t\n\t  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\t  b[i++] = clockseq >>> 8 | 0x80;\n\t\n\t  // `clock_seq_low`\n\t  b[i++] = clockseq & 0xff;\n\t\n\t  // `node`\n\t  var node = options.node || _nodeId;\n\t  for (var n = 0; n < 6; ++n) {\n\t    b[i + n] = node[n];\n\t  }\n\t\n\t  return buf ? buf : bytesToUuid(b);\n\t}\n\t\n\tmodule.exports = v1;\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar rng = __webpack_require__(7);\n\tvar bytesToUuid = __webpack_require__(6);\n\t\n\tfunction v4(options, buf, offset) {\n\t  var i = buf && offset || 0;\n\t\n\t  if (typeof(options) == 'string') {\n\t    buf = options == 'binary' ? new Array(16) : null;\n\t    options = null;\n\t  }\n\t  options = options || {};\n\t\n\t  var rnds = options.random || (options.rng || rng)();\n\t\n\t  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\t  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n\t  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\t\n\t  // Copy bytes to buffer, if provided\n\t  if (buf) {\n\t    for (var ii = 0; ii < 16; ++ii) {\n\t      buf[i + ii] = rnds[ii];\n\t    }\n\t  }\n\t\n\t  return buf || bytesToUuid(rnds);\n\t}\n\t\n\tmodule.exports = v4;\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// kuzzle.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f340330cbc588882f8a5","var\n  uuid = require('uuid'),\n  Collection = require('./Collection.js'),\n  Security = require('./security/Security'),\n  MemoryStorage = require('./MemoryStorage'),\n  User = require('./security/User'),\n  networkWrapper = require('./networkWrapper');\n\n/**\n * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n *\n * @callback responseCallback\n * @param {Object} err - Error object, NULL if the query is successful\n * @param {Object} [data] - The content of the query response\n */\n\n/**\n * Kuzzle object constructor.\n *\n * @constructor\n * @param host - Server name or IP Address to the Kuzzle instance\n * @param [options] - Connection options\n * @param {responseCallback} [cb] - Handles connection response\n * @constructor\n */\nfunction Kuzzle (host, options, cb) {\n  var self = this;\n\n  if (!(this instanceof Kuzzle)) {\n    return new Kuzzle(host, options, cb);\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  if (!host || host === '') {\n    throw new Error('host argument missing');\n  }\n\n  Object.defineProperties(this, {\n    // 'private' properties\n    collections: {\n      value: {},\n      writable: true\n    },\n    connectCB: {\n      value: cb\n    },\n    eventListeners: {\n      value: {\n        connected: {lastEmitted: null, listeners: []},\n        error: {lastEmitted: null, listeners: []},\n        disconnected: {lastEmitted: null, listeners: []},\n        reconnected: {lastEmitted: null, listeners: []},\n        jwtTokenExpired: {lastEmitted: null, listeners: []},\n        loginAttempt: {lastEmitted: null, listeners: []},\n        offlineQueuePush: {listeners: []},\n        offlineQueuePop: {listeners: []},\n        queryError: {listeners: []},\n        discarded: {listeners: []}\n      }\n    },\n    eventTimeout: {\n      value: 200\n    },\n    queuing: {\n      value: false,\n      writable: true\n    },\n    requestHistory: {\n      value: {},\n      writable: true\n    },\n    state: {\n      value: 'initializing',\n      writable: true\n    },\n    subscriptions: {\n      /*\n       Contains the centralized subscription list in the following format:\n          pending: <number of pending subscriptions>\n          'roomId': {\n            kuzzleRoomID_1: kuzzleRoomInstance_1,\n            kuzzleRoomID_2: kuzzleRoomInstance_2,\n            kuzzleRoomID_...: kuzzleRoomInstance_...\n          }\n\n       This was made to allow multiple subscriptions on the same set of filters, something that Kuzzle does not permit.\n       This structure also allows renewing subscriptions after a connection loss\n       */\n      value: {\n        pending: {}\n      },\n      writable: true\n    },\n    // configuration properties\n    autoReconnect: {\n      value: (options && typeof options.autoReconnect === 'boolean') ? options.autoReconnect : true,\n      writable: true,\n      enumerable: true\n    },\n    defaultIndex: {\n      value: (options && typeof options.defaultIndex === 'string') ? options.defaultIndex : undefined,\n      writable: true,\n      enumerable: true\n    },\n    reconnectionDelay: {\n      value: (options && typeof options.reconnectionDelay === 'number') ? options.reconnectionDelay : 1000,\n      writable: true,\n      enumerable: true\n    },\n    host: {\n      value: host,\n      writable: true,\n      enumerable: true\n    },\n    port: {\n      value: (options && typeof options.port === 'number') ? options.port : 7512,\n      enumerable: true,\n      writable: true\n    },\n    sslConnection: {\n      value: (options && typeof options.sslConnection === 'boolean') ? options.sslConnection : false,\n      writable: true,\n      enumerable: true\n    },\n    autoQueue: {\n      value: false,\n      enumerable: true,\n      writable: true\n    },\n    autoReplay: {\n      value: false,\n      enumerable: true,\n      writable: true\n    },\n    autoResubscribe: {\n      value: true,\n      enumerable: true,\n      writable: true\n    },\n    headers: {\n      value: {},\n      enumerable: true,\n      writable: true\n    },\n    volatile: {\n      value: {},\n      enumerable: true,\n      writable: true\n    },\n    /*\n      Offline queue use the following format:\n            [\n              {\n                ts: <query timestamp>,\n                query: 'query',\n                cb: callbackFunction\n              }\n            ]\n     */\n    offlineQueue: {\n      value: [],\n      enumerable: true,\n      writable: true\n    },\n    queueFilter: {\n      value: null,\n      enumerable: true,\n      writable: true\n    },\n    queueMaxSize: {\n      value: 500,\n      enumerable: true,\n      writable: true\n    },\n    queueTTL: {\n      value: 120000,\n      enumerable: true,\n      writable: true\n    },\n    replayInterval: {\n      value: 10,\n      enumerable: true,\n      writable: true\n    },\n    jwtToken: {\n      value: undefined,\n      enumerable: true,\n      writable: true\n    },\n    offlineQueueLoader: {\n      value: null,\n      enumerable: true,\n      writable: true\n    }\n  });\n\n  if (options) {\n    Object.keys(options).forEach(function (opt) {\n      if (self.hasOwnProperty(opt) && Object.getOwnPropertyDescriptor(self, opt).writable) {\n        self[opt] = options[opt];\n      }\n    });\n\n    if (options.offlineMode === 'auto' && this.autoReconnect) {\n      this.autoQueue = this.autoReplay = this.autoResubscribe = true;\n    }\n  }\n\n  // Helper function ensuring that this Kuzzle object is still valid before performing a query\n  Object.defineProperty(this, 'isValid', {\n    value: function () {\n      if (self.state === 'disconnected') {\n        throw new Error('This Kuzzle object has been invalidated. Did you try to access it after a disconnect call?');\n      }\n    }\n  });\n\n  // Helper function copying headers to the query data\n  Object.defineProperty(this, 'addHeaders', {\n    value: function (query, headers) {\n      Object.keys(headers).forEach(function (header) {\n        if (!query[header]) {\n          query[header] = headers[header];\n        }\n      });\n\n      return query;\n    }\n  });\n\n  /**\n   * Some methods (mainly read queries) require a callback function. This function exists to avoid repetition of code,\n   * and is called by these methods\n   */\n  Object.defineProperty(this, 'callbackRequired', {\n    value: function (errorMessagePrefix, callback) {\n      if (!callback || typeof callback !== 'function') {\n        throw new Error(errorMessagePrefix + ': a callback argument is required for read queries');\n      }\n    }\n  });\n\n  /**\n   * Create an attribute security that embed all methods to manage Role, Profile and User\n   */\n  Object.defineProperty(this, 'security', {\n    value: new Security(this),\n    enumerable: true\n  });\n\n  /**\n   * Emit an event to all registered listeners\n   * An event cannot be emitted multiple times before a timeout has been reached.\n   */\n  Object.defineProperty(this, 'emitEvent', {\n    value: function emitEvent(event) {\n      var\n        now = Date.now(),\n        args = Array.prototype.slice.call(arguments, 1),\n        eventProperties = this.eventListeners[event];\n\n      if (eventProperties.lastEmitted && eventProperties.lastEmitted >= now - this.eventTimeout) {\n        return false;\n      }\n\n      eventProperties.listeners.forEach(function (listener) {\n        setTimeout(function () {\n          listener.fn.apply(undefined, args);\n        }, 0);\n      });\n\n      // Events without the 'lastEmitted' property can be emitted without minimum time between emissions\n      if (eventProperties.lastEmitted !== undefined) {\n        eventProperties.lastEmitted = now;\n      }\n    }\n  });\n\n  Object.defineProperty(this, 'memoryStorage', {\n    value: new MemoryStorage(this),\n    enumerable: true\n  });\n\n\n  if (!options || !options.connect || options.connect === 'auto') {\n    this.connect();\n  } else {\n    this.state = 'ready';\n  }\n\n  cleanHistory(this.requestHistory);\n\n  if (this.bluebird) {\n    return this.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var whitelist = ['getAllStatistics', 'getServerInfo', 'getStatistics',\n          'listCollections', 'listIndexes', 'login', 'logout', 'now', 'query',\n          'checkToken', 'whoAmI', 'updateSelf', 'getMyRights',\n          'refreshIndex', 'getAutoRefresh', 'setAutoRefresh'\n        ];\n\n        return passes && whitelist.indexOf(name) !== -1;\n      }\n    });\n  }\n}\n\n/**\n * Connects to a Kuzzle instance using the provided host name.\n * @returns {Object} this\n */\nKuzzle.prototype.connect = function () {\n  var self = this;\n\n  if (self.network) {\n    self.disconnect();\n  }\n\n  self.network = networkWrapper(self.host, self.port, self.sslConnection);\n\n  if (['initializing', 'ready', 'disconnected', 'error', 'offline'].indexOf(this.state) === -1) {\n    if (self.connectCB) {\n      self.connectCB(null, self);\n    }\n    return self;\n  }\n\n  self.state = 'connecting';\n  self.network.connect(self.autoReconnect, self.reconnectionDelay);\n\n  self.network.onConnect(function () {\n    self.state = 'connected';\n    renewAllSubscriptions.call(self);\n    dequeue.call(self);\n    self.emitEvent('connected');\n\n    if (self.connectCB) {\n      self.connectCB(null, self);\n    }\n  });\n\n  self.network.on('discarded', function (data) {\n    self.emitEvent('discarded', data);\n  });\n\n  self.network.onConnectError(function (error) {\n    var connectionError = new Error('Unable to connect to kuzzle proxy server at \"' + self.host + '\"');\n\n    connectionError.internal = error;\n    self.state = 'error';\n    self.emitEvent('error', connectionError);\n\n    if (self.connectCB) {\n      self.connectCB(connectionError);\n    }\n  });\n\n  self.network.onDisconnect(function () {\n    self.state = 'offline';\n\n    if (!self.autoReconnect) {\n      self.disconnect();\n    }\n\n    if (self.autoQueue) {\n      self.queuing = true;\n    }\n\n    self.emitEvent('disconnected');\n  });\n\n  self.network.onReconnect(function () {\n    var reconnect = function () {\n      // renew subscriptions\n      if (self.autoResubscribe) {\n        renewAllSubscriptions.call(self);\n      }\n\n      // replay queued requests\n      if (self.autoReplay) {\n        cleanQueue.call(self);\n        dequeue.call(self);\n      }\n\n      // alert listeners\n      self.emitEvent('reconnected');\n    };\n\n    self.state = 'connected';\n\n    if (self.jwtToken) {\n      self.checkToken(self.jwtToken, function (err, res) {\n        // shouldn't obtain an error but let's invalidate the token anyway\n        if (err || !res.valid) {\n          self.jwtToken = undefined;\n          self.emitEvent('jwtTokenExpired');\n        }\n\n        reconnect();\n      });\n    } else {\n      reconnect();\n    }\n  });\n\n  return this;\n};\n\n/**\n * Set the jwtToken used to query kuzzle\n * @param token\n * @returns {Kuzzle}\n */\nKuzzle.prototype.setJwtToken = function(token) {\n  if (typeof token === 'string') {\n    this.jwtToken = token;\n  } else if (typeof token === 'object') {\n    if (token.result && token.result.jwt && typeof token.result.jwt === 'string') {\n      this.jwtToken = token.result.jwt;\n    } else {\n      this.emitEvent('loginAttempt', {\n        success: false,\n        error: 'Cannot find a valid JWT token in the following object: ' + JSON.stringify(token)\n      });\n\n      return this;\n    }\n  } else {\n    this.emitEvent('loginAttempt', {success: false, error: 'Invalid token argument: ' + token});\n    return this;\n  }\n\n  renewAllSubscriptions.call(this);\n  this.emitEvent('loginAttempt', {success: true});\n  return this;\n};\n\n/**\n * Unset the jwtToken used to query kuzzle\n * @returns {Kuzzle}\n */\nKuzzle.prototype.unsetJwtToken = function() {\n  this.jwtToken = undefined;\n\n  removeAllSubscriptions.call(this);\n\n  return this;\n};\n\n/**\n * Get the jwtToken used by kuzzle\n * @returns {Kuzzle}\n */\nKuzzle.prototype.getJwtToken = function() {\n  return this.jwtToken;\n};\n\n/**\n * Send login request to kuzzle with credentials\n * If login success, store the jwtToken into kuzzle object\n *\n * @param strategy\n * @param credentials\n * @param expiresIn\n * @param cb\n */\nKuzzle.prototype.login = function (strategy) {\n  var\n    self = this,\n    request = {\n      strategy: strategy\n    },\n    credentials,\n    cb = null;\n\n  // Handle arguments (credentials, expiresIn, cb)\n  if (arguments[1]) {\n    if (typeof arguments[1] === 'object') {\n      credentials = arguments[1];\n    } else if (typeof arguments[1] === 'number' || typeof arguments[1] === 'string') {\n      request.expiresIn = arguments[1];\n    } else if (typeof arguments[1] === 'function') {\n      cb = arguments[1];\n    }\n  }\n  if (arguments[2]) {\n    if (typeof arguments[2] === 'number' || typeof arguments[2] === 'string') {\n      request.expiresIn = arguments[2];\n    } else if (typeof arguments[2] === 'function') {\n      cb = arguments[2];\n    }\n  }\n  if (arguments[3] && typeof arguments[3] === 'function') {\n    cb = arguments[3];\n  }\n\n  if (typeof credentials === 'object') {\n    Object.keys(credentials).forEach(function (key) {\n      request[key] = credentials[key];\n    });\n  }\n\n  this.query({controller: 'auth', action: 'login'}, {body: request}, {queuable: false}, function(error, response) {\n    if (!error) {\n      if (response.result.jwt) {\n        self.setJwtToken(response.result.jwt);\n      }\n\n      cb && cb(null, response.result);\n    }\n    else {\n      cb && cb(error);\n      self.emitEvent('loginAttempt', {success: false, error: error.message});\n    }\n  });\n};\n\n/**\n * Create a kuzzle index\n *\n * @param {string} index\n * @param {object} [options]\n * @param {responseCallback} cb\n * @returns {Kuzzle}\n */\nKuzzle.prototype.createIndex = function (index, options, cb) {\n  if (!index) {\n    if (!this.defaultIndex) {\n      throw new Error('Kuzzle.createIndex: index required');\n    }\n    index = this.defaultIndex;\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.query({controller: 'index', action: 'create'}, {index: index}, options, typeof cb !== 'function' ? null : cb);\n\n  return this;\n};\n\n/**\n * Send logout request to kuzzle with jwtToken.\n *\n * @param cb\n * @returns {Kuzzle}\n */\nKuzzle.prototype.logout = function (cb) {\n  var\n    self = this,\n    request = {\n      action: 'logout',\n      controller: 'auth',\n      requestId: uuid.v4(),\n      body: {}\n    };\n\n  this.query({controller: 'auth', action: 'logout'}, request, {queuable: false}, typeof cb !== 'function' ? null : function(error) {\n    cb(error, self);\n  });\n\n  self.unsetJwtToken();\n\n  return self;\n};\n\n/**\n * Checks whether a given jwt token still represents a valid session in Kuzzle.\n *\n * @param  {string}   token     The jwt token to check\n * @param  {function} callback  The callback to be called when the response is\n *                              available. The signature is `function(error, response)`.\n */\nKuzzle.prototype.checkToken = function (token, callback) {\n  var\n    request = {\n      body: {\n        token: token\n      }\n    };\n\n  this.callbackRequired('Kuzzle.checkToken', callback);\n\n  this.query({controller: 'auth', action: 'checkToken'}, request, {queuable: false}, function (err, response) {\n    if (err) {\n      return callback(err);\n    }\n\n    callback(null, response.result);\n  });\n};\n\n/**\n * Fetches the current user.\n *\n * @param  {function} callback  The callback to be called when the response is\n *                              available. The signature is `function(error, response)`.\n */\nKuzzle.prototype.whoAmI = function (callback) {\n  var self = this;\n\n  self.callbackRequired('Kuzzle.whoAmI', callback);\n\n  self.query({controller: 'auth', action: 'getCurrentUser'}, {}, {}, function (err, response) {\n    if (err) {\n      return callback(err);\n    }\n\n    callback(null, new User(self.security, response.result._id, response.result._source));\n  });\n};\n\n/**\n * Gets the rights array of the currently logged user.\n *\n * @param {object} [options] - Optional parameters\n * @param  {function} cb The callback containing the normalized array of rights.\n */\nKuzzle.prototype.getMyRights = function (options, cb) {\n  var self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.callbackRequired('Kuzzle.getMyRights', cb);\n\n  self.query({controller: 'auth', action:'getMyRights'}, {}, options, function (err, res) {\n    if (err) {\n      return cb(err);\n    }\n\n    cb(null, res.result.hits);\n  });\n};\n\n/**\n * Update current user in Kuzzle.\n *\n * @param {object} content - a plain javascript object representing the user's modification\n * @param {object} [options] - (optional) arguments\n * @param {responseCallback} [cb] - (optional) Handles the query response\n * @returns {Kuzzle} this object\n */\nKuzzle.prototype.updateSelf = function (content, options, cb) {\n  var\n    self = this,\n    data = {},\n    queryArgs = {controller: 'auth', action: 'updateSelf'};\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data.body = content;\n\n  self.query(queryArgs, data, options, cb && function (err, res) {\n    cb(err, err ? undefined : res.result);\n  });\n\n  return this;\n};\n\n/**\n * Clean up the queue, ensuring the queryTTL and queryMaxSize properties are respected\n */\nfunction cleanQueue () {\n  var\n    self = this,\n    now = Date.now(),\n    lastDocumentIndex = -1;\n\n  if (self.queueTTL > 0) {\n    self.offlineQueue.forEach(function (query, index) {\n      if (query.ts < now - self.queueTTL) {\n        lastDocumentIndex = index;\n      }\n    });\n\n    if (lastDocumentIndex !== -1) {\n      self.offlineQueue\n        .splice(0, lastDocumentIndex + 1)\n        .forEach(function (droppedRequest) {\n          self.emitEvent('offlineQueuePop', droppedRequest.query);\n        });\n    }\n  }\n\n  if (self.queueMaxSize > 0 && self.offlineQueue.length > self.queueMaxSize) {\n    self.offlineQueue\n      .splice(0, self.offlineQueue.length - self.queueMaxSize)\n      .forEach(function (droppedRequest) {\n        self.emitEvent('offlineQueuePop', droppedRequest.query);\n      });\n  }\n}\n\n\n/**\n * Clean history from requests made more than 10s ago\n */\nfunction cleanHistory (requestHistory) {\n  var\n    now = Date.now();\n\n  Object.keys(requestHistory).forEach(function (key) {\n    if (requestHistory[key] < now - 10000) {\n      delete requestHistory[key];\n    }\n  });\n\n  setTimeout(function () {\n    cleanHistory(requestHistory);\n  }, 1000);\n}\n\n/**\n * Emit a request to Kuzzle\n *\n * @param {object} request\n * @param {responseCallback} [cb]\n */\nfunction emitRequest (request, cb) {\n  var\n    self = this;\n\n  if (self.jwtToken !== undefined || cb) {\n    self.network.once(request.requestId, function (response) {\n      var error = null;\n\n      if (request.action !== 'logout' && response.error && response.error.message === 'Token expired') {\n        self.jwtToken = undefined;\n        self.emitEvent('jwtTokenExpired', request, cb);\n      }\n\n      if (response.error) {\n        error = new Error(response.error.message);\n        Object.assign(error, response.error);\n        error.status = response.status;\n        self.emitEvent('queryError', error, request, cb);\n      }\n\n      if (cb) {\n        cb(error, response);\n      }\n    });\n  }\n\n  this.network.send(request);\n\n  // Track requests made to allow Room.subscribeToSelf to work\n  self.requestHistory[request.requestId] = Date.now();\n}\n\n/**\n * Play all queued requests, in order.\n */\nfunction dequeue () {\n  var\n    self = this,\n    additionalQueue,\n    uniqueQueue = {},\n    dequeuingProcess = function () {\n      if (self.offlineQueue.length > 0) {\n        emitRequest.call(self, self.offlineQueue[0].query, self.offlineQueue[0].cb);\n        self.emitEvent('offlineQueuePop', self.offlineQueue.shift());\n\n        setTimeout(function () {\n          dequeuingProcess();\n        }, Math.max(0, self.replayInterval));\n      } else {\n        self.queuing = false;\n      }\n    };\n\n  if (self.offlineQueueLoader) {\n    if (typeof self.offlineQueueLoader !== 'function') {\n      throw new Error('Invalid value for offlineQueueLoader property. Expected: function. Got: ' + typeof self.offlineQueueLoader);\n    }\n\n    additionalQueue = self.offlineQueueLoader();\n    if (Array.isArray(additionalQueue)) {\n      self.offlineQueue = additionalQueue\n        .concat(self.offlineQueue)\n        .filter(function (request) {\n          // throws if the query object does not contain required attributes\n          if (!request.query || request.query.requestId === undefined || !request.query.action || !request.query.controller) {\n            throw new Error('Invalid offline queue request. One or more missing properties: requestId, action, controller.');\n          }\n\n          return uniqueQueue.hasOwnProperty(request.query.requestId) ? false : (uniqueQueue[request.query.requestId] = true);\n        });\n    } else {\n      throw new Error('Invalid value returned by the offlineQueueLoader function. Expected: array. Got: ' + typeof additionalQueue);\n    }\n  }\n\n  dequeuingProcess();\n}\n\n/**\n * Renew all registered subscriptions. Triggered either by a successful connection/reconnection or by a\n * successful login attempt\n */\nfunction renewAllSubscriptions() {\n  var self = this;\n\n  Object.keys(self.subscriptions).forEach(function (roomId) {\n    Object.keys(self.subscriptions[roomId]).forEach(function (subscriptionId) {\n      var subscription = self.subscriptions[roomId][subscriptionId];\n      subscription.renew(subscription.callback);\n    });\n  });\n}\n\n/**\n * Remove all registered subscriptions. Triggered either by a logout query or by un-setting the token\n */\nfunction removeAllSubscriptions() {\n  var self = this;\n\n  Object.keys(self.subscriptions).forEach(function (roomId) {\n    Object.keys(self.subscriptions[roomId]).forEach(function (subscriptionId) {\n      var subscription = self.subscriptions[roomId][subscriptionId];\n      subscription.unsubscribe();\n    });\n  });\n}\n\n/**\n * Adds a listener to a Kuzzle global event. When an event is fired, listeners are called in the order of their\n * insertion.\n *\n * The ID returned by this function is required to remove this listener at a later time.\n *\n * @param {string} event - name of the global event to subscribe to (see the 'eventListeners' object property)\n * @param {function} listener - callback to invoke each time an event is fired\n * @returns {string} Unique listener ID\n */\nKuzzle.prototype.addListener = function(event, listener) {\n  var\n    knownEvents = Object.keys(this.eventListeners),\n    listenerType = typeof listener,\n    listenerId;\n\n  this.isValid();\n\n  if (knownEvents.indexOf(event) === -1) {\n    throw new Error('[' + event + '] is not a known event. Known events: ' + knownEvents.toString());\n  }\n\n  if (listenerType !== 'function') {\n    throw new Error('Invalid listener type: expected a function, got a ' + listenerType);\n  }\n\n  listenerId = uuid.v4();\n  this.eventListeners[event].listeners.push({id: listenerId, fn: listener});\n  return listenerId;\n};\n\n\n/**\n * Kuzzle monitors active connections, and ongoing/completed/failed requests.\n * This method returns all available statistics from Kuzzle.\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Handles the query response\n */\nKuzzle.prototype.getAllStatistics = function (options, cb) {\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.callbackRequired('Kuzzle.getAllStatistics', cb);\n\n  this.query({controller:'server', action: 'getAllStats'}, {}, options, function (err, res) {\n    if (err) {\n      return cb(err);\n    }\n\n    cb(null, res.result.hits);\n  });\n};\n\n/**\n * Kuzzle monitors active connections, and ongoing/completed/failed requests.\n * This method allows getting either the last statistics frame, or a set of frames starting from a provided timestamp.\n *\n * @param {number} timestamp -  Epoch time. Starting time from which the frames are to be retrieved\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Handles the query response\n */\nKuzzle.prototype.getStatistics = function (timestamp, options, cb) {\n  var\n    queryCB,\n    body;\n\n  if (!cb) {\n    if (arguments.length === 1) {\n      cb = arguments[0];\n      options = null;\n      timestamp = null;\n    } else {\n      cb = arguments[1];\n      if (typeof arguments[0] === 'object') {\n        options = arguments[0];\n        timestamp = null;\n      } else {\n        timestamp = arguments[0];\n        options = null;\n      }\n    }\n  }\n\n  queryCB = function (err, res) {\n    if (err) {\n      return cb(err);\n    }\n\n    cb(null, timestamp ? res.result.hits : [res.result]);\n  };\n\n  this.callbackRequired('Kuzzle.getStatistics', cb);\n\n  body = timestamp ? {body: {startTime: timestamp}} : {};\n  this.query({controller: 'server', action: timestamp ? 'getStats' : 'getLastStats'}, body, options, queryCB);\n};\n\n/**\n * Create a new instance of a Collection object.\n * If no index is specified, takes the default index.\n *\n * @param {string} collection - The name of the data collection you want to manipulate\n * @param {string} [index] - The name of the data index containing the data collection\n * @returns {Collection} A Collection instance\n */\nKuzzle.prototype.collection = function(collection, index) {\n  this.isValid();\n\n  if (!index) {\n    if (!this.defaultIndex) {\n      throw new Error('Unable to create a new data collection object: no index specified');\n    }\n\n    index = this.defaultIndex;\n  }\n\n  if (typeof index !== 'string' || typeof collection !== 'string') {\n    throw new Error('Invalid index or collection argument: string expected');\n  }\n\n  if (!this.collections[index]) {\n    this.collections[index] = {};\n  }\n\n  if (!this.collections[index][collection]) {\n    this.collections[index][collection] = new Collection(this, collection, index);\n  }\n\n  return this.collections[index][collection];\n};\n\n/**\n * Empties the offline queue without replaying it.\n *\n * @returns {Kuzzle}\n */\nKuzzle.prototype.flushQueue = function () {\n  this.offlineQueue = [];\n  return this;\n};\n\n/**\n * Returns the list of known persisted data collections.\n *\n * @param {string} [index] - Index containing collections to be listed\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Handles the query response\n */\nKuzzle.prototype.listCollections = function () {\n  var\n    collectionType = 'all',\n    index,\n    options,\n    cb,\n    args = Array.prototype.slice.call(arguments),\n    query;\n\n  args.forEach(function(arg) {\n    switch (typeof arg) {\n      case 'string':\n        index = arg;\n        break;\n      case 'object':\n        options = arg;\n        break;\n      case 'function':\n        cb = arg;\n        break;\n    }\n  });\n\n  if (!index) {\n    if (!this.defaultIndex) {\n      throw new Error('Kuzzle.listCollections: index required');\n    }\n\n    index = this.defaultIndex;\n  }\n\n  this.callbackRequired('Kuzzle.listCollections', cb);\n\n  if (options && options.type) {\n    collectionType = options.type;\n  }\n\n  query = {body: {type: collectionType}};\n\n  if (options && options.from) {\n    query.body.from = options.from;\n  }\n\n  if (options && options.size) {\n    query.body.size = options.size;\n  }\n\n  this.query({index: index, controller: 'collection', action: 'list'}, query, options, function (err, res) {\n    if (err) {\n      return cb(err);\n    }\n\n    cb(null, res.result.collections);\n  });\n};\n\n/**\n * Returns the list of existing indexes in Kuzzle\n *\n * @param {object} [options] - Optional arguments\n * @param {responseCallback} cb - Handles the query response\n */\nKuzzle.prototype.listIndexes = function (options, cb) {\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.callbackRequired('Kuzzle.listIndexes', cb);\n\n  this.query({controller: 'index', action: 'list'}, {}, options, function (err, res) {\n    cb(err, err ? undefined : res.result.indexes);\n  });\n};\n\n/**\n * Disconnects from Kuzzle and invalidate this instance.\n */\nKuzzle.prototype.disconnect = function () {\n  var collection;\n\n  this.state = 'disconnected';\n  this.network.close();\n  this.network = null;\n\n  for (collection in this.collections) {\n    if (this.collections.hasOwnProperty(collection)) {\n      delete this.collections[collection];\n    }\n  }\n};\n\n/**\n * Returns the server informations\n *\n * @param {object} [options] - Optional arguments\n * @param {responseCallback} cb - Handles the query response\n */\nKuzzle.prototype.getServerInfo = function (options, cb) {\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.callbackRequired('Kuzzle.getServerInfo', cb);\n\n  this.query({controller: 'server', action: 'info'}, {}, options, function (err, res) {\n    if (err) {\n      return cb(err);\n    }\n\n    cb(null, res.result.serverInfo);\n  });\n};\n\n/**\n * Forces an index refresh\n *\n * @param {string} index - The index to refresh. Defaults to Kuzzle.defaultIndex\n * @param {object} options - Optional arguments\n * @param {responseCallback} cb - Handles the query response\n * @returns {Kuzzle}\n */\nKuzzle.prototype.refreshIndex = function () {\n  var\n    index,\n    options,\n    cb;\n\n  Array.prototype.slice.call(arguments).forEach(function(arg) {\n    switch (typeof arg) {\n      case 'string':\n        index = arg;\n        break;\n      case 'object':\n        options = arg;\n        break;\n      case 'function':\n        cb = arg;\n        break;\n    }\n  });\n\n  if (!index) {\n    if (!this.defaultIndex) {\n      throw new Error('Kuzzle.refreshIndex: index required');\n    }\n    index = this.defaultIndex;\n  }\n\n  this.query({ index: index, controller: 'index', action: 'refresh'}, {}, options, cb);\n\n  return this;\n};\n\n/**\n * Returns de current autoRefresh status for the given index\n *\n * @param {string} index - The index to get the status from. Defaults to Kuzzle.defaultIndex\n * @param {object} options - Optinal arguments\n * @param {responseCallback} cb - Handles the query response\n */\nKuzzle.prototype.getAutoRefresh = function () {\n  var\n    index,\n    options,\n    cb;\n\n  Array.prototype.slice.call(arguments).forEach(function (arg) {\n    switch (typeof arg) {\n      case 'string':\n        index = arg;\n        break;\n      case 'object':\n        options = arg;\n        break;\n      case 'function':\n        cb = arg;\n        break;\n    }\n  });\n\n  if (!index) {\n    if (!this.defaultIndex) {\n      throw new Error('Kuzzle.getAutoRefresh: index required');\n    }\n    index = this.defaultIndex;\n  }\n\n  this.callbackRequired('Kuzzle.getAutoRefresh', cb);\n  this.query({ index: index, controller: 'index', action: 'getAutoRefresh'}, {}, options, cb);\n};\n\n/**\n * (Un)Sets the autoRefresh flag on the given index\n *\n * @param {string} index - the index to modify. Defaults to Kuzzle.defaultIndex\n * @param {boolean} autoRefresh - The autoRefresh value to set\n * @param {object} options - Optional arguments\n * @param {responseCallback} cb - Handles the query result\n * @returns {object} this\n */\nKuzzle.prototype.setAutoRefresh = function () {\n  var\n    index,\n    autoRefresh,\n    options,\n    cb;\n\n  Array.prototype.slice.call(arguments).forEach(function (arg) {\n    switch (typeof arg) {\n      case 'string':\n        index = arg;\n        break;\n      case 'boolean':\n        autoRefresh = arg;\n        break;\n      case 'object':\n        options = arg;\n        break;\n      case 'function':\n        cb = arg;\n        break;\n    }\n  });\n\n  if (!index) {\n    if (!this.defaultIndex) {\n      throw new Error('Kuzzle.setAutoRefresh: index required');\n    }\n    index = this.defaultIndex;\n  }\n\n  if (autoRefresh === undefined) {\n    throw new Error('Kuzzle.setAutoRefresh: autoRefresh value is required');\n  }\n\n  this.query({ index: index, controller: 'index', action: 'setAutoRefresh'}, { body: { autoRefresh: autoRefresh }}, options, cb);\n\n  return this;\n};\n\n/**\n * Return the current Kuzzle's UTC Epoch time, in milliseconds\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Handles the query response\n */\nKuzzle.prototype.now = function (options, cb) {\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.callbackRequired('Kuzzle.now', cb);\n\n  this.query({controller: 'server', action: 'now'}, {}, options, function (err, res) {\n    cb(err, res && res.result.now);\n  });\n};\n\n/**\n * This is a low-level method, exposed to allow advanced SDK users to bypass high-level methods.\n * Base method used to send read queries to Kuzzle\n *\n * Takes an optional argument object with the following properties:\n *    - volatile (object, default: null):\n *        Additional information passed to notifications to other users\n *\n * @param {object} queryArgs - Query configuration\n * @param {object} query - The query data\n * @param {object} [options] - Optional arguments\n * @param {responseCallback} [cb] - Handles the query response\n */\nKuzzle.prototype.query = function (queryArgs, query, options, cb) {\n  var\n    attr,\n    object = {\n      action: queryArgs.action,\n      controller: queryArgs.controller,\n      volatile: this.volatile\n    },\n    self = this;\n\n  this.isValid();\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  if (options) {\n    if (options.queuable === false && self.state === 'offline') {\n      return self;\n    }\n\n    if (options.refresh) {\n      object.refresh = options.refresh;\n    }\n\n    if (typeof options.from !== 'undefined' && options.from !== null) {\n      object.from = options.from;\n    }\n\n    if (options.size) {\n      object.size = options.size;\n    }\n\n    if (options.scroll) {\n      object.scroll = options.scroll;\n    }\n\n    if (options.scrollId) {\n      object.scrollId = options.scrollId;\n    }\n\n    if (options.volatile) {\n      Object.keys(options.volatile).forEach(function (meta) {\n        object.volatile[meta] = options.volatile[meta];\n      });\n    }\n  }\n\n  if (!query || typeof query !== 'object' || Array.isArray(query)) {\n    throw new Error('Invalid query parameter: ' + query);\n  }\n\n  if (query.volatile) {\n    Object.keys(query.volatile).forEach(function (meta) {\n      object.volatile[meta] = query.volatile[meta];\n    });\n  }\n\n  for (attr in query) {\n    if (attr !== 'volatile' && query.hasOwnProperty(attr)) {\n      object[attr] = query[attr];\n    }\n  }\n\n  object = self.addHeaders(object, this.headers);\n\n  /*\n   * Do not add the token for the checkToken route, to avoid getting a token error when\n   * a developer simply wish to verify his token\n   */\n  if (self.jwtToken !== undefined && !(object.controller === 'auth' && object.action === 'checkToken')) {\n    object.jwt = self.jwtToken;\n  }\n\n  if (queryArgs.collection) {\n    object.collection = queryArgs.collection;\n  }\n\n  if (queryArgs.index) {\n    object.index = queryArgs.index;\n  }\n\n  if (!object.requestId) {\n    object.requestId = uuid.v4();\n  }\n\n  if (self.state === 'connected' || (options && options.queuable === false)) {\n    if (self.state === 'connected') {\n      emitRequest.call(this, object, cb);\n    } else {\n      discardRequest(object, cb);\n    }\n  } else if (self.queuing || (options && options.queuable === true) || ['initializing', 'connecting'].indexOf(self.state) !== -1) {\n    cleanQueue.call(this, object, cb);\n    if (!self.queueFilter || self.queueFilter(object)) {\n      self.offlineQueue.push({ts: Date.now(), query: object, cb: cb});\n      self.emitEvent('offlineQueuePush', {query: object, cb: cb});\n    }\n  }\n  else {\n    discardRequest(object, cb);\n  }\n\n  return self;\n};\n\n/**\n * Removes all listeners, either from a specific event or from all events\n *\n * @param {string} event - One of the event described in the Event Handling section of this documentation\n * @returns {Kuzzle} this object\n */\nKuzzle.prototype.removeAllListeners = function (event) {\n  var\n    knownEvents = Object.keys(this.eventListeners),\n    self = this;\n\n  if (event) {\n    if (knownEvents.indexOf(event) === -1) {\n      throw new Error('[' + event + '] is not a known event. Known events: ' + knownEvents.toString());\n    }\n\n    this.eventListeners[event].listeners = [];\n  } else {\n    knownEvents.forEach(function (eventName) {\n      self.eventListeners[eventName].listeners = [];\n    });\n  }\n\n  return this;\n};\n\n/**\n * Removes a listener from an event.\n *\n * @param {string} event - One of the event described in the Event Handling section of this documentation\n * @param {string} listenerId - The ID returned by addListener\n * @returns {Kuzzle} this object\n */\nKuzzle.prototype.removeListener = function (event, listenerId) {\n  var\n    knownEvents = Object.keys(this.eventListeners),\n    self = this;\n\n  if (knownEvents.indexOf(event) === -1) {\n    throw new Error('[' + event + '] is not a known event. Known events: ' + knownEvents.toString());\n  }\n\n  this.eventListeners[event].listeners.forEach(function (listener, index) {\n    if (listener.id === listenerId) {\n      self.eventListeners[event].listeners.splice(index, 1);\n    }\n  });\n\n  return this;\n};\n\n/**\n * Replays the requests queued during offline mode.\n * Works only if the SDK is not in a disconnected state, and if the autoReplay option is set to false.\n */\nKuzzle.prototype.replayQueue = function () {\n  if (this.state !== 'offline' && !this.autoReplay) {\n    cleanQueue.call(this);\n    dequeue.call(this);\n  }\n\n  return this;\n};\n\n/**\n * Sets the default Kuzzle index\n *\n * @param index\n * @returns this\n */\nKuzzle.prototype.setDefaultIndex = function (index) {\n  if (typeof index !== 'string') {\n    throw new Error('Invalid default index: [' + index + '] (an index name is expected)');\n  }\n\n  if (index.length === 0) {\n    throw new Error('Cannot set an empty index as the default index');\n  }\n\n  this.defaultIndex = index;\n\n  return this;\n};\n\n/**\n * Helper function allowing to set headers while chaining calls.\n *\n * If the replace argument is set to true, replace the current headers with the provided content.\n * Otherwise, it appends the content to the current headers, only replacing already existing values\n *\n * @param content - new headers content\n * @param [replace] - default: false = append the content. If true: replace the current headers with tj\n */\nKuzzle.prototype.setHeaders = function (content, replace) {\n  var self = this;\n\n  if (typeof content !== 'object' || Array.isArray(content)) {\n    throw new Error('Expected a content object, received a ' + typeof content);\n  }\n\n  if (replace) {\n    self.headers = content;\n  } else {\n    Object.keys(content).forEach(function (key) {\n      self.headers[key] = content[key];\n    });\n  }\n\n  return self;\n};\n\n/**\n * Starts the requests queuing. Works only during offline mode, and if the autoQueue option is set to false.\n */\nKuzzle.prototype.startQueuing = function () {\n  if (this.state === 'offline' && !this.autoQueue) {\n    this.queuing = true;\n  }\n  return this;\n};\n\n/**\n * Stops the requests queuing. Works only during offline mode, and if the autoQueue option is set to false.\n */\nKuzzle.prototype.stopQueuing = function () {\n  if (this.state === 'offline' && !this.autoQueue) {\n    this.queuing = false;\n  }\n\n  return this;\n};\n\nfunction discardRequest(object, cb) {\n  if (cb) {\n    cb(new Error('Unable to execute request: not connected to a Kuzzle server.\\nDiscarded request: ' + JSON.stringify(object)));\n  }\n}\n\nmodule.exports = Kuzzle;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Kuzzle.js\n// module id = 0\n// module chunks = 0","function SecurityDocument(Security, id, content) {\n\n  if (!id) {\n    throw new Error('A security document must have an id');\n  }\n\n  // Define properties\n  Object.defineProperties(this, {\n    // private properties\n    kuzzle: {\n      value: Security.kuzzle\n    },\n    Security: {\n      value: Security\n    },\n    // read-only properties\n    // writable properties\n    id: {\n      value: id,\n      enumerable: true\n    },\n    content: {\n      value: {},\n      writable: true,\n      enumerable: true\n    }\n  });\n\n  if (content) {\n    this.setContent(content, true);\n  }\n\n  // promisifying\n  if (Security.kuzzle.bluebird) {\n    return Security.kuzzle.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var whitelist = ['delete', 'update'];\n\n        return passes && whitelist.indexOf(name) !== -1;\n      }\n    });\n  }\n}\n\n/**\n * Replaces the current content with new data.\n * Changes made by this function won’t be applied until the save method is called.\n *\n * @param {Object} data - New securityDocument content\n * @return {SecurityDocument} this\n */\nSecurityDocument.prototype.setContent = function (data) {\n  this.content = data;\n  return this;\n};\n\n/**\n * Serialize this object into a pojo\n *\n * @return {object} pojo representing this securityDocument\n */\nSecurityDocument.prototype.serialize = function () {\n  var\n    data = {};\n\n  if (this.id) {\n    data._id = this.id;\n  }\n\n  data.body = this.content;\n\n  return data;\n};\n\n/**\n * Delete the current KuzzleSecurityDocument into Kuzzle.\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n */\nSecurityDocument.prototype.delete = function (options, cb) {\n  var\n    self = this;\n\n  if (options && cb === undefined && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.query(this.Security.buildQueryArgs(this.deleteActionName), {_id: this.id}, options, function (error, res) {\n    if (error) {\n      return cb ? cb(error) : false;\n    }\n\n    if (cb) {\n      cb(null, res.result._id);\n    }\n  });\n};\n\n/**\n * Update the current KuzzleSecurityDocument into Kuzzle.\n *\n * @param {object} content - Content to add to KuzzleSecurityDocument\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {SecurityDocument} this\n */\nSecurityDocument.prototype.update = function (content, options, cb) {\n  var\n    data = {},\n    self = this;\n\n  if (typeof content !== 'object') {\n    throw new Error('Parameter \"content\" must be a object');\n  }\n\n  if (options && cb === undefined && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data._id = self.id;\n  data.body = content;\n\n  self.kuzzle.query(this.Security.buildQueryArgs(this.updateActionName), data, options, function (error, response) {\n    if (error) {\n      return cb ? cb(error) : false;\n    }\n\n    self.setContent(response.result._source);\n\n    if (cb) {\n      cb(null, self);\n    }\n  });\n\n  return this;\n};\n\nmodule.exports = SecurityDocument;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/security/SecurityDocument.js\n// module id = 1\n// module chunks = 0","/**\n * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n *\n * @callback responseCallback\n * @param {Object} err - Error object, NULL if the query is successful\n * @param {Object} [data] - The content of the query response\n */\n\n/**\n * Kuzzle handles documents either as realtime messages or as stored documents.\n * Document is the object representation of one of these documents.\n *\n * Notes:\n *   - this constructor may be called either with a documentId, a content, neither or both.\n *   - providing a documentID to the constructor will automatically call refresh, unless a content is also provided\n *\n *\n * @param {Collection} collection - an instanciated Collection object\n * @param {string} [documentId] - ID of an existing document\n * @param {object} [content] - Initializes this document with the provided content\n * @constructor\n */\nfunction Document(collection, documentId, content) {\n  Object.defineProperties(this, {\n    // read-only properties\n    collection: {\n      value: collection.collection,\n      enumerable: true\n    },\n    dataCollection: {\n      value: collection,\n      enumerable: false\n    },\n    kuzzle: {\n      value: collection.kuzzle,\n      enumerable: false\n    },\n    // writable properties\n    id: {\n      value: undefined,\n      enumerable: true,\n      writable: true\n    },\n    content: {\n      value: {},\n      writable: true,\n      enumerable: true\n    },\n    headers: {\n      value: JSON.parse(JSON.stringify(collection.headers)),\n      enumerable: true,\n      writable: true\n    },\n    version: {\n      value: undefined,\n      enumerable: true,\n      writable: true\n    }\n  });\n\n  // handling provided arguments\n  if (!content && documentId && typeof documentId === 'object') {\n    content = documentId;\n    documentId = null;\n  }\n\n  if (content) {\n    if (content._version) {\n      this.version = content._version;\n      delete content._version;\n    }\n    this.setContent(content, true);\n  }\n\n  if (documentId) {\n    Object.defineProperty(this, 'id', {\n      value: documentId,\n      enumerable: true\n    });\n  }\n\n  // promisifying\n  if (this.kuzzle.bluebird) {\n    return this.kuzzle.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var whitelist = ['delete', 'refresh', 'save'];\n\n        return passes && whitelist.indexOf(name) !== -1;\n      }\n    });\n  }\n\n  return this;\n}\n\n/**\n * Serialize this object into a JSON object\n *\n * @return {object} JSON object representing this document\n */\nDocument.prototype.serialize = function () {\n  var\n    data = {};\n\n  if (this.id) {\n    data._id = this.id;\n  }\n\n  data.body = this.content;\n  data._version = this.version;\n  data = this.kuzzle.addHeaders(data, this.headers);\n\n  return data;\n};\n\n/**\n * Overrides the toString() method in order to return a serialized version of the document\n *\n * @return {string} serialized version of this object\n */\nDocument.prototype.toString = function () {\n  return JSON.stringify(this.serialize());\n};\n\n/**\n * Deletes this document in Kuzzle.\n *\n * Takes an optional argument object with the following properties:\n *    - volatile (object, default: null):\n *        Additional information passed to notifications to other users\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {*} this\n */\nDocument.prototype.delete = function (options, cb) {\n  var self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  if (!self.id) {\n    throw new Error('Document.delete: cannot delete a document without a document ID');\n  }\n\n  this.kuzzle.query(this.dataCollection.buildQueryArgs('document', 'delete'), this.serialize(), options, cb && function (err) {\n    cb(err, err ? undefined : self.id);\n  });\n};\n\n/**\n * Replaces the current content with the last version of this document stored in Kuzzle.\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {*} this\n */\nDocument.prototype.refresh = function (options, cb) {\n  var self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  if (!self.id) {\n    throw new Error('Document.refresh: cannot retrieve a document if no ID has been provided');\n  }\n\n  this.kuzzle.callbackRequired('Document.refresh', cb);\n\n  self.kuzzle.query(self.dataCollection.buildQueryArgs('document', 'get'), {_id: self.id}, options, function (error, res) {\n    var newDocument;\n\n    if (error) {\n      return cb(error);\n    }\n\n    newDocument = new Document(self.dataCollection, self.id, res.result._source);\n    newDocument.version = res.result._version;\n\n    cb(null, newDocument);\n  });\n};\n\n/**\n * Saves this document into Kuzzle.\n *\n * If this is a new document, this function will create it in Kuzzle and the id property will be made available.\n * Otherwise, this method will replace the latest version of this document in Kuzzle by the current content\n * of this object.\n *\n * Takes an optional argument object with the following properties:\n *    - volatile (object, default: null):\n *        Additional information passed to notifications to other users\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {*} this\n */\nDocument.prototype.save = function (options, cb) {\n  var\n    data = this.serialize(),\n    self = this;\n\n  if (options && cb === undefined && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.query(this.dataCollection.buildQueryArgs('document', 'createOrReplace'), data, options, function (error, res) {\n    if (error) {\n      return cb && cb(error);\n    }\n\n    self.id = res.result._id;\n    self.version = res.result._version;\n\n    if (cb) {\n      cb(null, self);\n    }\n  });\n\n  return self;\n};\n\n/**\n * Sends the content of this document as a realtime message.\n *\n * Takes an optional argument object with the following properties:\n *    - volatile (object, default: null):\n *        Additional information passed to notifications to other users\n *\n * @param {object} [options] - Optional parameters\n * @returns {*} this\n */\nDocument.prototype.publish = function (options) {\n  var data = this.serialize();\n\n  this.kuzzle.query(this.dataCollection.buildQueryArgs('realtime', 'publish'), data, options);\n\n  return this;\n};\n\n/**\n * Replaces the current content with new data.\n * Changes made by this function won’t be applied until the save method is called.\n *\n * @param {object} data - New content\n * @param {boolean} replace - if true: replace this document content with the provided data\n */\nDocument.prototype.setContent = function (data, replace) {\n  var self = this;\n\n  if (replace) {\n    this.content = data;\n  }\n  else {\n    Object.keys(data).forEach(function (key) {\n      self.content[key] = data[key];\n    });\n  }\n\n  return this;\n};\n\n/**\n * Listens to events concerning this document. Has no effect if the document does not have an ID\n * (i.e. if the document has not yet been created as a persisted document).\n *\n * @param {object} [options] - subscription options\n * @param {responseCallback} cb - callback that will be called each time a change has been detected on this document\n */\nDocument.prototype.subscribe = function (options, cb) {\n  var filters;\n\n  if (options && !cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.callbackRequired('Document.subscribe', cb);\n\n  if (!this.id) {\n    throw new Error('Document.subscribe: cannot subscribe to a document if no ID has been provided');\n  }\n\n  filters = { ids: { values: [this.id] } };\n\n  return this.dataCollection.subscribe(filters, options, cb);\n};\n\n/**\n * Helper function allowing to set headers while chaining calls.\n *\n * If the replace argument is set to true, replace the current headers with the provided content.\n * Otherwise, it appends the content to the current headers, only replacing already existing values\n *\n * @param content - new headers content\n * @param [replace] - default: false = append the content. If true: replace the current headers with tj\n */\nDocument.prototype.setHeaders = function (content, replace) {\n  this.kuzzle.setHeaders.call(this, content, replace);\n  return this;\n};\n\n\nmodule.exports = Document;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Document.js\n// module id = 2\n// module chunks = 0","function WSNode(host, port, ssl) {\n  var self = this;\n  this.WebSocket = typeof WebSocket !== 'undefined' ? WebSocket : require('ws');\n  this.host = host;\n  this.port = port;\n  this.ssl = ssl;\n  this.client = null;\n  this.wasConnected = false;\n  this.retrying = false;\n  this.lasturl = null;\n  this.stopRetryingToConnect = false;\n\n  /*\n   Listeners are stored using the following format:\n   roomId: {\n   fn: callback_function,\n   once: boolean\n   }\n   */\n  this.listeners = {\n    error: [],\n    connect: [],\n    disconnect: [],\n    reconnect: []\n  };\n\n  /**\n   * Creates a new socket from the provided arguments\n   *\n   * @constructor\n   * @param {boolean} autoReconnect\n   * @param {int} reconnectionDelay\n   * @returns {Object} Socket\n   */\n  this.connect = function (autoReconnect, reconnectionDelay) {\n    var\n      url = (this.ssl ? 'wss://' : 'ws://') + this.host + ':' + this.port,\n      options = typeof window !== 'undefined' ? undefined : {perMessageDeflate: false};\n\n    if (url !== this.lasturl) {\n      self.wasConnected = false;\n      this.lasturl = url;\n    }\n\n    this.client = new this.WebSocket(url, options);\n\n    this.client.onopen = function () {\n      if (self.wasConnected) {\n        poke(self.listeners, 'reconnect');\n      }\n      else {\n        poke(self.listeners, 'connect');\n      }\n      self.wasConnected = true;\n      self.stopRetryingToConnect = false;\n    };\n\n    this.client.onclose = function (code, message) {\n      if (code === 1000) {\n        poke(self.listeners, 'disconnect');\n      }\n      else {\n        onClientError.call(self, autoReconnect, reconnectionDelay, message);\n      }\n    };\n\n    this.client.onerror = function (error) {\n      onClientError.call(self, autoReconnect, reconnectionDelay, error);\n    };\n\n    this.client.onmessage = function (payload) {\n      var data = JSON.parse(payload.data || payload);\n\n      if (data.room && self.listeners[data.room]) {\n        poke(self.listeners, data.room, data);\n      }\n      else if (self.listeners.discarded) {\n        poke(self.listeners, 'discarded', data);\n      }\n    };\n  };\n\n  /**\n   * Fires the provided callback whence a connection is established\n   *\n   * @param {function} callback\n   */\n  this.onConnect = function (callback) {\n    this.listeners.connect.push({\n      fn: callback,\n      keep: true\n    });\n  };\n\n  /**\n   * Fires the provided callback whenever a connection error is received\n   * @param {function} callback\n   */\n  this.onConnectError = function (callback) {\n    this.listeners.error.push({\n      fn: callback,\n      keep: true\n    });\n  };\n\n  /**\n   * Fires the provided callback whenever a disconnection occurred\n   * @param {function} callback\n   */\n  this.onDisconnect = function (callback) {\n    this.listeners.disconnect.push({\n      fn: callback,\n      keep: true\n    });\n  };\n\n  /**\n   * Fires the provided callback whenever a connection has been reestablished\n   * @param {function} callback\n   */\n  this.onReconnect = function (callback) {\n    this.listeners.reconnect.push({\n      fn: callback,\n      keep: true\n    });\n  };\n\n  /**\n   * Registers a callback on a room. Once 1 message is received, fires the\n   * callback and unregister it afterward.\n   *\n   * @param {string} roomId\n   * @param {function} callback\n   */\n  this.once = function (roomId, callback) {\n    if (!this.listeners[roomId]) {\n      this.listeners[roomId] = [];\n    }\n\n    this.listeners[roomId].push({\n      fn: callback,\n      keep: false\n    });\n  };\n\n  /**\n   * Registers a callback on a room.\n   *\n   * @param {string} roomId\n   * @param {function} callback\n   */\n  this.on = function (roomId, callback) {\n    if (!this.listeners[roomId]) {\n      this.listeners[roomId] = [];\n    }\n\n    this.listeners[roomId].push({\n      fn: callback,\n      keep: true\n    });\n  };\n\n  /**\n   * Unregisters a callback from a room.\n   *\n   * @param {string} roomId\n   * @param {function} callback\n   */\n  this.off = function (roomId, callback) {\n    var index = -1;\n\n    if (this.listeners[roomId]) {\n      // Array.findIndex is not supported by internet explorer\n      this.listeners[roomId].some(function (listener, i) {\n        if (listener.fn === callback) {\n          index = i;\n          return true;\n        }\n\n        return false;\n      });\n\n      if (index !== -1) {\n        if (this.listeners[roomId].length === 1 && ['error', 'connect', 'disconnect', 'reconnect'].indexOf(roomId) === -1) {\n          delete this.listeners[roomId];\n        }\n        else {\n          this.listeners[roomId].splice(index, 1);\n        }\n      }\n    }\n  };\n\n\n  /**\n   * Sends a payload to the connected server\n   *\n   * @param {Object} payload\n   */\n  this.send = function (payload) {\n    if (this.client && this.client.readyState === this.client.OPEN) {\n      this.client.send(JSON.stringify(payload));\n    }\n  };\n\n  /**\n   * Closes the connection\n   */\n  this.close = function () {\n    this.listeners = {\n      error: [],\n      connect: [],\n      disconnect: [],\n      reconnect: []\n    };\n\n    this.wasConnected = false;\n    this.client.close();\n    this.client = null;\n    self.stopRetryingToConnect = true;\n  };\n}\n\n/**\n * Executes all registered listeners in the provided\n * \"listeners\" structure.\n *\n * Listeners are of the following format:\n * [\n *    { fn: callback, once: boolean },\n *    ...\n * ]\n *\n * @private\n * @param {Object} listeners\n * @param {string} roomId\n * @param {Object} [payload]\n */\nfunction poke (listeners, roomId, payload) {\n  var\n    i,\n    length = listeners[roomId].length;\n\n  for (i = 0; i < length; ++i) {\n    listeners[roomId][i].fn(payload);\n\n    if (!listeners[roomId][i].keep) {\n      if (listeners[roomId].length > 1) {\n        listeners[roomId].splice(i, 1);\n        --i;\n        --length;\n      }\n      else {\n        delete listeners[roomId];\n      }\n    }\n  }\n}\n\n/**\n * Called when the connection closes with an error state\n *\n * @param {boolean} autoReconnect\n * @param {number} reconnectionDelay\n * @param {string|Object} message\n */\nfunction onClientError(autoReconnect, reconnectionDelay, message) {\n  var self = this;\n\n  if (autoReconnect && !self.retrying && !self.stopRetryingToConnect) {\n    self.retrying = true;\n    setTimeout(function () {\n      self.retrying = false;\n      self.connect(autoReconnect, reconnectionDelay);\n    }, reconnectionDelay);\n  }\n\n  poke(self.listeners, 'error', message);\n}\n\nmodule.exports = WSNode;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/networkWrapper/wrappers/websocket.js\n// module id = 3\n// module chunks = 0","var\n  KuzzleSecurityDocument = require('./SecurityDocument');\n\n/**\n * @param {Security} Security\n * @param {string} id\n * @param {Object} content\n * @constructor\n */\nfunction User(Security, id, content) {\n\n  KuzzleSecurityDocument.call(this, Security, id, content);\n\n  // Define properties\n  Object.defineProperties(this, {\n    // private properties\n    deleteActionName: {\n      value: 'deleteUser'\n    },\n    updateActionName: {\n      value: 'updateUser'\n    }\n  });\n\n  // promisifying\n  if (Security.kuzzle.bluebird) {\n    return Security.kuzzle.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var whitelist = ['save', 'saveRestricted'];\n\n        return passes && whitelist.indexOf(name) !== -1;\n      }\n    });\n  }\n}\n\nUser.prototype = Object.create(KuzzleSecurityDocument.prototype, {\n  constructor: {\n    value: User\n  }\n});\n\n/**\n * Set profiles in content\n * @param {array} profileIds - an array of profiles ids string\n *\n * @returns {User} this\n */\nUser.prototype.setProfiles = function (profileIds) {\n  if (!Array.isArray(profileIds) || typeof profileIds[0] !== 'string') {\n    throw new Error('Parameter \"profileIds\" must be an array of strings');\n  }\n\n  this.content.profileIds = profileIds;\n\n  return this;\n};\n\n/**\n * Add a profile\n * @param {string} profileId - a profile ids string\n *\n * @returns {User} this\n */\nUser.prototype.addProfile = function (profileId) {\n  if (typeof profileId !== 'string') {\n    throw new Error('Parameter \"profileId\" must be a string');\n  }\n\n  if (!this.content.profileIds) {\n    this.content.profileIds = [];\n  }\n\n  if (this.content.profileIds.indexOf(profileId) === -1) {\n    this.content.profileIds.push(profileId);\n  }\n\n  return this;\n};\n\n/**\n * Saves this user into Kuzzle.\n *\n * If this is a new user, this function will create it in Kuzzle.\n * Otherwise, this method will replace the latest version of this user in Kuzzle by the current content\n * of this object.\n *\n * @param {object|responseCallback} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {User} this\n */\nUser.prototype.save = function (options, cb) {\n  var\n    data = this.serialize(),\n    self = this;\n\n  if (options && cb === undefined && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.query(this.Security.buildQueryArgs('createOrReplaceUser'), data, options, cb && function (error) {\n    cb(error, error ? undefined : self);\n  });\n\n  return self;\n};\n\n/**\n * Saves this user as restricted into Kuzzle.\n *\n * This function will create a new user. It is not usable to update an existing user.\n * The \"profileIds\" property must not be provided, or the request will be rejected by Kuzzle.\n * This function allows anonymous users to create a \"restricted\" user with predefined rights.\n *\n * @param {object|responseCallback} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {User} this\n */\nUser.prototype.saveRestricted = function (options, cb) {\n  var\n    data = this.serialize(),\n    self = this;\n\n  if (options && cb === undefined && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.query(this.Security.buildQueryArgs('createRestrictedUser'), data, options, cb && function (error) {\n    cb(error, error ? undefined : self);\n  });\n\n  return self;\n};\n\n/**\n * Serialize this object into a JSON object\n *\n * @return {object} JSON object representing this User\n */\nUser.prototype.serialize = function () {\n  return {_id: this.id, body: this.content};\n};\n\n/**\n * Return the associated profiles IDs\n *\n * @return {array} the associated profiles IDs\n */\nUser.prototype.getProfiles = function () {\n  return this.content.profileIds;\n};\n\nmodule.exports = User;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/security/User.js\n// module id = 4\n// module chunks = 0","var v1 = require('./v1');\nvar v4 = require('./v4');\n\nvar uuid = v4;\nuuid.v1 = v1;\nuuid.v4 = v4;\n\nmodule.exports = uuid;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/uuid/index.js\n// module id = 5\n// module chunks = 0","/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  return  bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]];\n}\n\nmodule.exports = bytesToUuid;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/uuid/lib/bytesToUuid.js\n// module id = 6\n// module chunks = 0","// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\nvar rng;\n\nvar crypto = global.crypto || global.msCrypto; // for IE 11\nif (crypto && crypto.getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16);\n  rng = function whatwgRNG() {\n    crypto.getRandomValues(rnds8);\n    return rnds8;\n  };\n}\n\nif (!rng) {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var  rnds = new Array(16);\n  rng = function() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n\nmodule.exports = rng;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/uuid/lib/rng-browser.js\n// module id = 7\n// module chunks = 0","var\n  KuzzleSearchResult = require('./SearchResult'),\n  Document = require('./Document'),\n  CollectionMapping = require('./CollectionMapping'),\n  Room = require('./Room'),\n  SubscribeResult = require('./SubscribeResult');\n\n/**\n * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n *\n * @callback responseCallback\n * @param {Object} err - Error object, NULL if the query is successful\n * @param {Object} [data] - The content of the query response\n */\n\n/**\n * A data collection is a set of data managed by Kuzzle. It acts like a data table for persistent documents,\n * or like a room for pub/sub messages.\n *\n * @property {string} collection\n * @property {string} index\n * @property {Kuzzle} kuzzle\n * @property {Array.<string>} collection\n * @param {object} kuzzle - Kuzzle instance to inherit from\n * @param {string} collection - name of the data collection to handle\n * @param {string} index - Index containing the data collection\n * @constructor\n */\nfunction Collection(kuzzle, collection, index) {\n  if (!index || !collection) {\n    throw new Error('The Collection object constructor needs an index and a collection arguments');\n  }\n\n  Object.defineProperties(this, {\n    // read-only properties\n    collection: {\n      value: collection,\n      enumerable: true\n    },\n    index: {\n      value: index,\n      enumerable: true\n    },\n    kuzzle: {\n      value: kuzzle,\n      enumerable: true\n    },\n    // writable properties\n    headers: {\n      value: JSON.parse(JSON.stringify(kuzzle.headers)),\n      enumerable: true,\n      writable: true\n    }\n  });\n\n  Object.defineProperty(this, 'buildQueryArgs', {\n    value: function (controller, action) {\n      return {\n        controller: controller,\n        action: action,\n        collection: this.collection,\n        index: this.index\n      };\n    }\n  });\n\n  if (this.kuzzle.bluebird) {\n    return this.kuzzle.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var blacklist = ['publishMessage', 'setHeaders', 'subscribe'];\n\n        return passes && blacklist.indexOf(name) === -1;\n      }\n    });\n  }\n\n  return this;\n}\n\n/**\n * Returns the number of documents matching the provided set of filters.\n *\n * There is a small delay between documents creation and their existence in our advanced search layer,\n * usually a couple of seconds.\n * That means that a document that was just been created won’t be returned by this function\n *\n * @param {object} filters - Filters in Elasticsearch Query DSL format\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Handles the query response\n */\nCollection.prototype.count = function (filters, options, cb) {\n  var\n    query;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.callbackRequired('Collection.count', cb);\n\n  query = this.kuzzle.addHeaders({body: filters}, this.headers);\n\n  this.kuzzle.query(this.buildQueryArgs('document', 'count'), query, options, function (error, result) {\n    cb(error, result && result.result.count);\n  });\n};\n\n/**\n * Create a new empty data collection, with no associated mapping.\n * Kuzzle automatically creates data collections when storing documents, but there are cases where we\n * want to create and prepare data collections before storing documents in it.\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - returns Kuzzle's response\n * @returns {*} this\n */\nCollection.prototype.create = function (options, cb) {\n  var data = {};\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data = this.kuzzle.addHeaders(data, this.headers);\n  this.kuzzle.query(this.buildQueryArgs('collection', 'create'), data, options, cb);\n\n  return this;\n};\n\n/**\n * Create a new document in Kuzzle.\n *\n * Takes an optional argument object with the following properties:\n *    - volatile (object, default: null):\n *        Additional information passed to notifications to other users\n *    - ifExist (string, allowed values: \"error\" (default), \"replace\"):\n *        If the same document already exists:\n *          - resolves with an error if set to \"error\".\n *          - replaces the existing document if set to \"replace\"\n *\n * @param {string} [id] - (optional) document identifier\n * @param {object} document - either an instance of a Document object, or a document\n * @param {object} [options] - optional arguments\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {Object} this\n */\nCollection.prototype.createDocument = function (id, document, options, cb) {\n  var\n    self = this,\n    data = {},\n    action = 'create';\n\n  if (id && typeof id !== 'string') {\n    cb = options;\n    options = document;\n    document = id;\n    id = null;\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  if (document instanceof Document) {\n    data = document.serialize();\n  } else {\n    data.body = document;\n  }\n\n  if (options && options.ifExist) {\n    if (options.ifExist === 'replace') {\n      action = 'createOrReplace';\n    }\n    else if (options.ifExist !== 'error') {\n      throw new Error('Invalid value for the \"ifExist\" option: ' + options.ifExist);\n    }\n  }\n\n  if (id) {\n    data._id = id;\n  }\n\n  data = self.kuzzle.addHeaders(data, self.headers);\n\n  self.kuzzle.query(this.buildQueryArgs('document', action), data, options, cb && function (err, res) {\n    var doc;\n\n    if (err) {\n      return cb(err);\n    }\n\n    doc = new Document(self, res.result._id, res.result._source);\n    doc.version = res.result._version;\n    cb(null, doc);\n  });\n\n  return this;\n};\n\n/**\n * Delete persistent documents.\n *\n * There is a small delay between documents creation and their existence in our advanced search layer,\n * usually a couple of seconds.\n * That means that a document that was just been created won’t be returned by this function\n *\n * Takes an optional argument object with the following properties:\n *    - volatile (object, default: null):\n *        Additional information passed to notifications to other users\n *\n * @param {string|object} arg - Either a document ID (will delete only this particular document), or a set of filters\n * @param {object} [options] - optional arguments\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {Collection} this\n */\nCollection.prototype.deleteDocument = function (arg, options, cb) {\n  var\n    action,\n    data = {};\n\n  if (typeof arg === 'string') {\n    data._id = arg;\n    action = 'delete';\n  } else {\n    data.body = {query: arg};\n    action = 'deleteByQuery';\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data = this.kuzzle.addHeaders(data, this.headers);\n\n  this.kuzzle.query(this.buildQueryArgs('document', action), data, options, cb && function (err, res) {\n    if (err) {\n      cb(err);\n    }\n    else {\n      cb(null, (action === 'delete' ? [res.result._id] : res.result.ids));\n    }\n  });\n\n  return this;\n};\n\n/**\n * Retrieve a single stored document using its unique document ID.\n *\n * @param {string} documentId - Unique document identifier\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Handles the query response\n */\nCollection.prototype.fetchDocument = function (documentId, options, cb) {\n  var\n    data = {_id: documentId},\n    self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.callbackRequired('Collection.fetch', cb);\n  data = self.kuzzle.addHeaders(data, this.headers);\n\n  self.kuzzle.query(this.buildQueryArgs('document', 'get'), data, options, function (err, res) {\n    var document;\n\n    if (err) {\n      return cb(err);\n    }\n\n    document = new Document(self, res.result._id, res.result._source);\n    document.version = res.result._version;\n    cb(null, document);\n  });\n};\n\n/**\n * Retrieves all documents stored in this data collection\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Handles the query response\n */\nCollection.prototype.fetchAllDocuments = function (options, cb) {\n  var\n    warnEmitted = false,\n    documents = [],\n    filters = {};\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = {};\n  }\n\n  // copying pagination options to the search filter\n  if (!options) {\n    options = {};\n  }\n\n  if (!options.from) {\n    options.from = 0;\n  }\n\n  if (!options.size) {\n    options.size = 1000;\n  }\n\n  this.kuzzle.callbackRequired('Collection.fetchAllDocuments', cb);\n\n  this.search(filters, options, function fetchNextDocuments (error, searchResult) {\n    if (error) {\n      return cb(error);\n    }\n\n    if (searchResult instanceof KuzzleSearchResult) {\n      if (searchResult.total > 10000 && !warnEmitted) {\n        warnEmitted = true;\n        console.warn('Collection.fetchAllDocuments may return extremely large amounts of documents, which may cause performance issues. Unless you know what you are doing, consider using Collection.search or Collection.scroll instead'); // eslint-disable-line no-console\n      }\n\n      searchResult.documents.forEach(function(document) {\n        documents.push(document);\n      });\n      searchResult.fetchNext(fetchNextDocuments);\n    }\n    else {\n      cb(null, documents);\n    }\n  });\n};\n\n\n/**\n * Instantiates a CollectionMapping object containing the current mapping of this collection.\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Returns an instantiated CollectionMapping object\n */\nCollection.prototype.getMapping = function (options, cb) {\n  var kuzzleMapping;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.callbackRequired('Collection.getMapping', cb);\n\n  kuzzleMapping = new CollectionMapping(this);\n  kuzzleMapping.refresh(options, cb);\n};\n\n/**\n * Publish a realtime message\n *\n * Takes an optional argument object with the following properties:\n *    - volatile (object, default: null):\n *        Additional information passed to notifications to other users\n *\n * @param {object} document - either a Document instance or a JSON object\n * @param {object} [options] - optional arguments\n * @param {responseCallback} [cb] - Returns a raw Kuzzle response\n * @returns {*} this\n */\nCollection.prototype.publishMessage = function (document, options, cb) {\n  var data = {};\n\n  if (document instanceof Document) {\n    data = document.serialize();\n  } else {\n    data.body = document;\n  }\n\n  data = this.kuzzle.addHeaders(data, this.headers);\n  this.kuzzle.query(this.buildQueryArgs('realtime', 'publish'), data, options, cb);\n\n  return this;\n};\n\n/**\n * Replace an existing document with a new one.\n *\n * Takes an optional argument object with the following properties:\n *    - volatile (object, default: null):\n *        Additional information passed to notifications to other users\n *\n * @param {string} documentId - Unique document identifier of the document to replace\n * @param {object} content - JSON object representing the new document version\n * @param {object} [options] - additional arguments\n * @param {responseCallback} [cb] - Returns an instantiated Document object\n * @return {object} this\n */\nCollection.prototype.replaceDocument = function (documentId, content, options, cb) {\n  var\n    self = this,\n    data = {\n      _id: documentId,\n      body: content\n    };\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data = self.kuzzle.addHeaders(data, this.headers);\n\n  self.kuzzle.query(this.buildQueryArgs('document', 'createOrReplace'), data, options, cb && function (err, res) {\n    var document;\n\n    if (err) {\n      return cb(err);\n    }\n\n    document = new Document(self, res.result._id, res.result._source);\n    document.version = res.result._version;\n    cb(null, document);\n  });\n\n  return this;\n};\n\n/**\n * Executes an advanced search on the data collection.\n *\n * /!\\ There is a small delay between documents creation and their existence in our advanced search layer,\n * usually a couple of seconds.\n * That means that a document that was just been created won’t be returned by this function.\n *\n * @param {object} filters - Filters in Elasticsearch Query DSL format\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Handles the query response\n */\n\nCollection.prototype.search = function (filters, options, cb) {\n  var\n    query,\n    self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = {};\n  }\n\n  self.kuzzle.callbackRequired('Collection.search', cb);\n\n  query = self.kuzzle.addHeaders({body: filters}, this.headers);\n\n\n  self.kuzzle.query(this.buildQueryArgs('document', 'search'), query, options, function (error, result) {\n    var documents = [];\n\n    if (error) {\n      return cb(error);\n    }\n\n    result.result.hits.forEach(function (doc) {\n      var newDocument = new Document(self, doc._id, doc._source);\n\n      newDocument.version = doc._version;\n\n      documents.push(newDocument);\n    });\n\n    if (result.result._scroll_id) {\n      options.scrollId = result.result._scroll_id;\n    }\n\n    cb(null, new KuzzleSearchResult(\n      self,\n      result.result.total,\n      documents,\n      result.result.aggregations ? result.result.aggregations : {},\n      options,\n      filters,\n      options.previous || null\n    ));\n  });\n};\n\n/**\n * A \"scroll\" option can be passed to search queries, creating persistent\n * paginated results.\n * This method can be used to manually get the next page of a search result,\n * instead of using KuzzleSearchResult.next()\n *\n * @param {string} scrollId\n * @param {object} [options]\n * @param {object} [filters]\n * @param {responseCallback} cb\n */\nCollection.prototype.scroll = function (scrollId, options, filters, cb) {\n  var\n    request = {},\n    self = this;\n\n  if (!scrollId) {\n    throw new Error('Collection.scroll: scrollId is required');\n  }\n\n  if (!cb) {\n    cb = filters;\n    filters = null;\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = {};\n  }\n\n  this.kuzzle.callbackRequired('Collection.scroll', cb);\n\n  request.scrollId = scrollId;\n\n  if (options && options.scroll) {\n    request.scroll = options.scroll;\n  }\n\n  this.kuzzle.query({controller: 'document', action: 'scroll'}, request, options, function (error, result) {\n    var documents = [];\n\n    if (error) {\n      return cb(error);\n    }\n\n    result.result.hits.forEach(function (doc) {\n      var newDocument = new Document(self, doc._id, doc._source);\n\n      newDocument.version = doc._version;\n\n      documents.push(newDocument);\n    });\n\n    if (result.result._scroll_id) {\n      options.scrollId = result.result._scroll_id;\n    }\n\n    cb(null, new KuzzleSearchResult(\n      self,\n      result.result.total,\n      documents,\n      {},\n      options,\n      filters,\n      options.previous || null\n    ));\n  });\n\n  return this;\n};\n\n/**\n * Subscribes to this data collection with a set of filters.\n * To subscribe to the entire data collection, simply provide an empty filter.\n *\n * @param {object} filters - Filters in Kuzzle DSL format\n * @param {object} [options] - subscriptions options\n * @param {responseCallback} cb - called for each new notification\n * @returns {*} KuzzleSubscribeResult object\n */\nCollection.prototype.subscribe = function (filters, options, cb) {\n  var\n    room,\n    subscribeResult;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.callbackRequired('Collection.subscribe', cb);\n\n  subscribeResult = new SubscribeResult();\n  room = new Room(this, options);\n\n  room.renew(filters, cb, subscribeResult.done.bind(subscribeResult));\n\n  return subscribeResult;\n};\n\n/**\n * Truncate the data collection, removing all stored documents but keeping all associated mappings.\n * This method is a lot faster than removing all documents using a query.\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - returns Kuzzle's response\n * @returns {*} this\n */\nCollection.prototype.truncate = function (options, cb) {\n  var data = {};\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data = this.kuzzle.addHeaders(data, this.headers);\n  this.kuzzle.query(this.buildQueryArgs('collection', 'truncate'), data, options, cb);\n\n  return this;\n};\n\n\n/**\n * Update parts of a document\n *\n * Takes an optional argument object with the following properties:\n *    - volatile (object, default: null):\n *        Additional information passed to notifications to other users\n *\n * @param {string} documentId - Unique document identifier of the document to update\n * @param {object} content - JSON object containing changes to perform on the document\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Returns an instantiated Document object\n * @return {object} this\n */\nCollection.prototype.updateDocument = function (documentId, content, options, cb) {\n  var\n    data = {\n      _id: documentId,\n      body: content\n    },\n    self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  if (options && options.retryOnConflict) {\n    data.retryOnConflict = options.retryOnConflict;\n  }\n\n  data = self.kuzzle.addHeaders(data, this.headers);\n\n  self.kuzzle.query(this.buildQueryArgs('document', 'update'), data, options, cb && function (err, res) {\n    if (err) {\n      return cb(err);\n    }\n\n    (new Document(self, res.result._id)).refresh(cb);\n  });\n\n  return self;\n};\n\n\n/**\n * Instantiate a new Document object. Workaround to the module.exports limitation, preventing multiple\n * constructors to be exposed without having to use a factory or a composed object.\n *\n * @param {string} id - document id\n * @param {object} content - document content\n * @constructor\n */\nCollection.prototype.document = function (id, content) {\n  return new Document(this, id, content);\n};\n\n/**\n * Instantiate a new Room object. Workaround to the module.exports limitation, preventing multiple\n * constructors to be exposed without having to use a factory or a composed object.\n *\n * @param {object} [options] - subscription configuration\n * @constructor\n */\nCollection.prototype.room = function (options) {\n  return new Room(this, options);\n};\n\n/**\n * Instantiate a new CollectionMapping object. Workaround to the module.exports limitation, preventing multiple\n * constructors to be exposed without having to use a factory or a composed object.\n *\n * @param {object} [mapping] - mapping to instantiate the CollectionMapping object with\n * @constructor\n */\nCollection.prototype.collectionMapping = function (mapping) {\n  return new CollectionMapping(this, mapping);\n};\n\n/**\n * Helper function allowing to set headers while chaining calls.\n *\n * If the replace argument is set to true, replace the current headers with the provided content.\n * Otherwise, it appends the content to the current headers, only replacing already existing values\n *\n * @param content - new headers content\n * @param [replace] - default: false = append the content. If true: replace the current headers with tj\n */\nCollection.prototype.setHeaders = function (content, replace) {\n  this.kuzzle.setHeaders.call(this, content, replace);\n  return this;\n};\n\nmodule.exports = Collection;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Collection.js\n// module id = 8\n// module chunks = 0","/**\n * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n *\n * @callback responseCallback\n * @param {Object} err - Error object, NULL if the query is successful\n * @param {Object} [data] - The content of the query response\n */\n\n\n/**\n *  When creating a new data collection in the persistent data storage layer, Kuzzle uses a default mapping.\n *  It means that, by default, you won’t be able to exploit the full capabilities of our persistent data storage layer\n *  (currently handled by ElasticSearch), and your searches may suffer from below-average performances, depending on\n *  the amount of data you stored in a collection and the complexity of your database.\n *\n *  The CollectionMapping object allow to get the current mapping of a data collection and to modify it if needed.\n *\n * @param {object} collection - Instance of the inherited Collection object\n * @param {object} [mapping] - mappings\n * @constructor\n */\nfunction CollectionMapping(collection, mapping) {\n  Object.defineProperties(this, {\n    //read-only properties\n    collection: {\n      value: collection,\n      enumerable: true\n    },\n    kuzzle: {\n      value: collection.kuzzle,\n      enumerable: true\n    },\n    // writable properties\n    headers: {\n      value: JSON.parse(JSON.stringify(collection.headers)),\n      enumerable: true,\n      writable: true\n    },\n    mapping: {\n      value: mapping || {},\n      enumerable: true,\n      writable: true\n    }\n  });\n\n  if (this.kuzzle.bluebird) {\n    return this.kuzzle.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var blacklist = ['set', 'setHeaders'];\n\n        return passes && blacklist.indexOf(name) === -1;\n      }\n    });\n  }\n\n  return this;\n}\n\n/**\n * Applies the new mapping to the data collection.\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n */\nCollectionMapping.prototype.apply = function (options, cb) {\n  var\n    self = this,\n    data = this.kuzzle.addHeaders({body: {properties: this.mapping}}, this.headers);\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.query(this.collection.buildQueryArgs('collection', 'updateMapping'), data, options, function (err) {\n    if (err) {\n      return cb && cb(err);\n    }\n\n    self.refresh(options, cb);\n  });\n\n  return this;\n};\n\n/**\n * Replaces the current content with the mapping stored in Kuzzle\n *\n * Calling this function will discard any uncommited changes. You can commit changes by calling the “apply” function\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {*} this\n */\nCollectionMapping.prototype.refresh = function (options, cb) {\n  var\n    self = this,\n    data = this.kuzzle.addHeaders({}, this.headers);\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.query(this.collection.buildQueryArgs('collection', 'getMapping'), data, options, function (err, res) {\n    if (err) {\n      return cb ? cb(err) : false;\n    }\n\n    if (res.result[self.collection.index]) {\n      if (res.result[self.collection.index].mappings[self.collection.collection]) {\n        self.mapping = res.result[self.collection.index].mappings[self.collection.collection].properties;\n\n        // Mappings can be empty. The mapping property should never be \"undefined\"\n        if (self.mapping === undefined) {\n          self.mapping = {};\n        }\n      } else {\n        return cb && cb(new Error('No mapping found for collection ' + self.collection.collection));\n      }\n    } else {\n      return cb && cb(new Error('No mapping found for index ' + self.collection.index));\n    }\n\n    if (cb) {\n      cb(null, self);\n    }\n  });\n\n  return this;\n};\n\n\n/**\n * Adds or updates a field mapping.\n *\n * Changes made by this function won’t be applied until you call the apply method\n *\n * @param {string} field - Name of the field from which the mapping is to be added or updated\n * @param {object} mapping - corresponding field mapping\n * @returns {CollectionMapping}\n */\nCollectionMapping.prototype.set = function (field, mapping) {\n  this.mapping[field] = mapping;\n\n  return this;\n};\n\n/**\n * Helper function allowing to set headers while chaining calls.\n *\n * If the replace argument is set to true, replace the current headers with the provided content.\n * Otherwise, it appends the content to the current headers, only replacing already existing values\n *\n * @param content - new headers content\n * @param [replace] - default: false = append the content. If true: replace the current headers with tj\n */\nCollectionMapping.prototype.setHeaders = function (content, replace) {\n  this.kuzzle.setHeaders.call(this, content, replace);\n  return this;\n};\n\nmodule.exports = CollectionMapping;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/CollectionMapping.js\n// module id = 9\n// module chunks = 0","// Parameter mutualization\nvar\n  getId = {getter: true, required: ['_id']},\n  getIdField = {getter: true, required: ['_id', 'field']},\n  getKeys = {getter: true, required: ['keys']},\n  getMember = {getter: true, required: ['_id', 'member']},\n  getxScan = {getter: true, required: ['_id', 'cursor'], opts: ['match', 'count']},\n  getZrange = {\n    getter: true,\n    required: ['_id', 'start', 'stop'],\n    opts: assignZrangeOptions,\n    mapResults: mapZrangeResults\n  },\n  getZrangeBy = {\n    getter: true,\n    required: ['_id', 'min', 'max'],\n    opts: assignZrangeOptions,\n    mapResults: mapZrangeResults\n  },\n  setId = {required: ['_id']},\n  setIdValue = {required: ['_id', 'value']},\n  setIdFieldValue = {required: ['_id', 'field', 'value']},\n  setEntries = {required: ['entries']};\n\n// Redis commands\nvar\n  commands = {\n    append: setIdValue,\n    bitcount: {getter: true, required: ['_id'], opts: ['start', 'end']},\n    bitop: {required: ['_id', 'operation', 'keys']},\n    bitpos: {getter: true, required: ['_id', 'bit'], opts: ['start', 'end']},\n    dbsize: {getter: true},\n    decr: setId,\n    decrby: setIdValue,\n    del: {required: ['keys']},\n    exists: getKeys,\n    expire: {required: ['_id', 'seconds']},\n    expireat: {required: ['_id', 'timestamp']},\n    flushdb: {},\n    geoadd: {required: ['_id', 'points']},\n    geodist: {\n      getter: true,\n      required: ['_id', 'member1', 'member2'],\n      opts: ['unit'],\n      mapResults: parseFloat\n    },\n    geohash: {getter: true, required: ['_id', 'members']},\n    geopos: {getter: true, required: ['_id', 'members'], mapResults: mapGeoposResults},\n    georadius: {\n      getter: true,\n      required: ['_id', 'lon', 'lat', 'distance', 'unit'],\n      opts: assignGeoRadiusOptions,\n      mapResults: mapGeoRadiusResults\n    },\n    georadiusbymember: {\n      getter: true,\n      required: ['_id', 'member', 'distance', 'unit'],\n      opts: assignGeoRadiusOptions,\n      mapResults: mapGeoRadiusResults\n    },\n    get: getId,\n    getbit: {getter: true, required: ['_id', 'offset']},\n    getrange: {getter: true, required: ['_id', 'start', 'end']},\n    getset: setIdValue,\n    hdel: {required: ['_id', 'fields']},\n    hexists: getIdField,\n    hget: getIdField,\n    hgetall: {getter: true, required: ['_id']},\n    hincrby: setIdFieldValue,\n    hincrbyfloat: {required: ['_id', 'field', 'value'], mapResults: parseFloat},\n    hkeys: getId,\n    hlen: getId,\n    hmget: {getter: true, required: ['_id', 'fields']},\n    hmset: {required: ['_id', 'entries']},\n    hscan: getxScan,\n    hset: setIdFieldValue,\n    hsetnx: setIdFieldValue,\n    hstrlen: getIdField,\n    hvals: getId,\n    incr: setId,\n    incrby: setIdValue,\n    incrbyfloat: {required: ['_id', 'value'], mapResults: parseFloat},\n    keys: {getter: true, required: ['pattern']},\n    lindex: {getter: true, required: ['_id', 'index']},\n    linsert: {required: ['_id', 'position', 'pivot', 'value']},\n    llen: getId,\n    lpop: setId,\n    lpush: {required: ['_id', 'values']},\n    lpushx: setIdValue,\n    lrange: {getter: true, required: ['_id', 'start', 'stop']},\n    lrem: {required: ['_id', 'count', 'value']},\n    lset: {required: ['_id', 'index', 'value']},\n    ltrim: {required: ['_id', 'start', 'stop']},\n    mget: getKeys,\n    mset: setEntries,\n    msetnx: setEntries,\n    object: {getter: true, required: ['_id', 'subcommand']},\n    persist: setId,\n    pexpire: {required: ['_id', 'milliseconds']},\n    pexpireat: {required: ['_id', 'timestamp']},\n    pfadd: {required: ['_id', 'elements']},\n    pfcount: getKeys,\n    pfmerge: {required: ['_id', 'sources']},\n    ping: {getter: true},\n    psetex: {required: ['_id', 'value', 'milliseconds']},\n    pttl: getId,\n    randomkey: {getter: true},\n    rename: {required: ['_id', 'newkey']},\n    renamenx: {required: ['_id', 'newkey']},\n    rpop: setId,\n    rpoplpush: {required: ['source', 'destination']},\n    rpush: {required: ['_id', 'values']},\n    rpushx: setIdValue,\n    sadd: {required: ['_id', 'members']},\n    scan: {getter: true, required: ['cursor'], opts: ['match', 'count']},\n    scard: getId,\n    sdiff: {getter: true, required: ['_id', 'keys']},\n    sdiffstore: {required: ['_id', 'keys', 'destination']},\n    set: {required: ['_id', 'value'], opts: ['ex', 'px', 'nx', 'xx']},\n    setex: {required: ['_id', 'value', 'seconds']},\n    setnx: setIdValue,\n    sinter: getKeys,\n    sinterstore: {required: ['destination', 'keys']},\n    sismember: getMember,\n    smembers: getId,\n    smove: {required: ['_id', 'destination', 'member']},\n    sort: {getter: true, required: ['_id'], opts: ['alpha', 'by', 'direction', 'get', 'limit']},\n    spop: {required: ['_id'], opts: ['count'], mapResults: mapStringToArray },\n    srandmember: {getter: true, required: ['_id'], opts: ['count'], mapResults: mapStringToArray},\n    srem: {required: ['_id', 'members']},\n    sscan: getxScan,\n    strlen: getId,\n    sunion: getKeys,\n    sunionstore: {required: ['destination', 'keys']},\n    time: {getter: true, mapResults: mapArrayStringToArrayInt},\n    touch: {required: ['keys']},\n    ttl: getId,\n    type: getId,\n    zadd: {required: ['_id', 'elements'], opts: ['nx', 'xx', 'ch', 'incr']},\n    zcard: getId,\n    zcount: {getter: true, required: ['_id', 'min', 'max']},\n    zincrby: {required: ['_id', 'member', 'value']},\n    zinterstore: {required: ['_id', 'keys'], opts: ['weights', 'aggregate']},\n    zlexcount: {getter: true, required: ['_id', 'min', 'max']},\n    zrange: getZrange,\n    zrangebylex: {getter: true, required: ['_id', 'min', 'max'], opts: ['limit']},\n    zrevrangebylex: {getter: true, required: ['_id', 'min', 'max'], opts: ['limit']},\n    zrangebyscore: getZrangeBy,\n    zrank: getMember,\n    zrem: {required: ['_id', 'members']},\n    zremrangebylex: {required: ['_id', 'min', 'max']},\n    zremrangebyrank: {required: ['_id', 'start', 'stop']},\n    zremrangebyscore: {required: ['_id', 'min', 'max']},\n    zrevrange: getZrange,\n    zrevrangebyscore: getZrangeBy,\n    zrevrank: getMember,\n    zscan: getxScan,\n    zscore: {getter: true, required: ['_id', 'member'], mapResults: parseFloat},\n    zunionstore: {required: ['_id', 'keys'], opts: ['weights', 'aggregate']}\n  };\n\n/**\n * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n *\n * @callback responseCallback\n * @param {Object} err - Error object, NULL if the query is successful\n * @param {Object} [data] - The content of the query response\n */\n\n\n/**\n * Kuzzle's memory storage is a separate data store from the database layer.\n * It is internaly based on Redis. You can access most of Redis functions (all\n * lowercased), except functions falling in the following categories:\n *\n *  - blocking functions\n *  - cluster commands\n *  - configuration commands\n *  - cursor functions\n *  - database administration commands\n *  - debugging functions\n *  - script based functions\n *  - transaction functions\n *\n * @param {object} kuzzle - Kuzzle instance to inherit from\n * @constructor\n */\nfunction MemoryStorage(kuzzle) {\n  Object.defineProperties(this, {\n    // read-only properties\n    kuzzle: {\n      value: kuzzle,\n      enumerable: true\n    },\n    // writable properties\n    headers: {\n      value: JSON.parse(JSON.stringify(kuzzle.headers)),\n      enumerable: true,\n      writable: true\n    }\n  });\n\n  this.setHeaders = kuzzle.setHeaders.bind(this);\n\n  if (this.kuzzle.bluebird) {\n    return this.kuzzle.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var blacklist = ['setHeaders'];\n\n        return passes && blacklist.indexOf(name) === -1;\n      }\n    });\n  }\n\n  return this;\n}\n\n// Dynamically builds this class' prototypes using the \"commands\" global variable\n(function () {\n  Object.keys(commands).forEach(function (command) {\n    MemoryStorage.prototype[command] = function () {\n      var\n        args = Array.prototype.slice.call(arguments),\n        options = null,\n        cb,\n        query = {\n          controller: 'ms',\n          action: command\n        },\n        data = {};\n\n      if (args.length && typeof args[args.length - 1] === 'function') {\n        cb = args.pop();\n      }\n\n      commands[command].getter && this.kuzzle.callbackRequired('MemoryStorage.' + command, cb);\n\n      if (!commands[command].getter) {\n        data.body = {};\n      }\n\n      if (commands[command].required) {\n        commands[command].required.forEach(function (param) {\n          var value = args.shift();\n\n          if (value === undefined) {\n            throw new Error('MemoryStorage.' + command + ': Missing parameter \"' + param + '\"');\n          }\n\n          assignParameter(data, commands[command].getter, param, value);\n        });\n      }\n\n      if (args.length > 1) {\n        throw new Error('MemoryStorage.' + command + ': Too many parameters provided');\n      }\n\n      if (args.length === 1 && typeof args[0] !== 'object' || Array.isArray(args[0])) {\n        throw new Error('MemoryStorage.' + command + ': Invalid optional parameter (expected an object)');\n      }\n\n      if (args.length) {\n        options = Object.assign({}, args[0]);\n\n        if (Array.isArray(commands[command].opts)) {\n          commands[command].opts.forEach(function (opt) {\n            if (options[opt] !== null && options[opt] !== undefined) {\n              assignParameter(data, commands[command].getter, opt, options[opt]);\n              delete options[opt];\n            }\n          });\n        }\n      }\n\n      /*\n       Options function mapper does not necessarily need\n       options to be passed by clients.\n       */\n      if (typeof commands[command].opts === 'function') {\n        commands[command].opts(data, options || {});\n      }\n\n      this.kuzzle.query(query, data, options, cb && function (err, res) {\n        if (err) {\n          return cb(err);\n        }\n\n        if (commands[command].mapResults) {\n          return cb(null, commands[command].mapResults(res.result));\n        }\n\n        cb(null, res.result);\n      });\n\n      if (!commands[command].getter) {\n        return this;\n      }\n    };\n  });\n})();\n\n/**\n *\n * @param {object} data - target data object\n * @param {boolean} getter - tells if the command is a getter one\n * @param {string} name - parameter name\n * @param {*} value - parameter value\n */\nfunction assignParameter(data, getter, name, value) {\n  if (getter || name === '_id') {\n    data[name] = value;\n  }\n  else {\n    data.body[name] = value;\n  }\n}\n\n/**\n * Assign the provided options for the georadius* redis functions\n * to the request object, as expected by Kuzzle API\n *\n * Mutates the provided data and options objects\n *\n * @param {object} data\n * @param {object} options\n */\nfunction assignGeoRadiusOptions(data, options) {\n  var parsed = [];\n\n  Object.keys(options)\n    .filter(function (opt) {\n      return options[opt] && ['withcoord', 'withdist', 'count', 'sort'].indexOf(opt) !== -1;\n    })\n    .forEach(function (opt) {\n      if (opt === 'withcoord' || opt === 'withdist') {\n        parsed.push(opt);\n        delete options[opt];\n      }\n      else if (opt === 'count' || opt === 'sort') {\n        if (opt === 'count') {\n          parsed.push('count');\n        }\n\n        parsed.push(options[opt]);\n      }\n\n      delete options[opt];\n    });\n\n  if (parsed.length > 0) {\n    data.options = parsed;\n  }\n}\n\n/**\n * Force the WITHSCORES option on z*range* routes\n *\n * Mutates the provided data and options objects\n *\n * @param {object} data\n * @param {object} options\n */\nfunction assignZrangeOptions(data, options) {\n  data.options = ['withscores'];\n\n  if (options.limit) {\n    data.limit = options.limit;\n    delete options.limit;\n  }\n}\n\n/**\n * Maps geopos results, from array<array<string>> to array<array<number>>\n *\n * @param {Array.<Array.<string>>} results\n * @return {Array.<Array.<Number>>}\n */\nfunction mapGeoposResults(results) {\n  return results.map(function (coords) {\n    return coords.map(function (latlon) {\n      return parseFloat(latlon);\n    });\n  });\n}\n\n\n/**\n * Maps georadius results to the format specified in the SDK documentation,\n * preventing different formats depending on the passed options\n *\n * Results can be either an array of point names, or an array\n * of arrays, each one of them containing the point name,\n * and additional informations depending on the passed options\n * (coordinates, distances)\n *\n * @param {Array} results\n * @return {Array.<Object>}\n */\nfunction mapGeoRadiusResults(results) {\n  // Simple array of point names (no options provided)\n  if (!Array.isArray(results[0])) {\n    return results.map(function (point) {\n      return {name: point};\n    });\n  }\n\n  return results.map(function (point) {\n    // The point id is always the first item\n    var\n      p = {\n        name: point[0]\n      },\n      i;\n\n    for (i = 1; i < point.length; i++) {\n      // withcoord result are in an array...\n      if (Array.isArray(point[i])) {\n        p.coordinates = point[i].map(function (coord) {\n          return parseFloat(coord);\n        });\n      }\n      else {\n        // ... and withdist are not\n        p.distance = parseFloat(point[i]);\n      }\n    }\n\n    return p;\n  });\n}\n\n/**\n * Map a string result to an array of strings.\n * Used to uniformize polymorphic results from redis\n *\n * @param {Array|string} results\n * @return {Array.<string>}\n */\nfunction mapStringToArray (results) {\n  return Array.isArray(results) ? results : [results];\n}\n\n/**\n * Map an array of strings to an array of integers\n *\n * @param {Array.<string>} results\n * @return {Array.<Number>}\n */\nfunction mapArrayStringToArrayInt(results) {\n  return results.map(function (value) {\n    return parseInt(value);\n  });\n}\n\n/**\n * Map zrange results with WITHSCORES:\n * [\n *  \"member1\",\n *  \"score of member1\",\n *  \"member2\",\n *  \"score of member2\"\n * ]\n *\n * into the following format:\n * [\n *  {\"member\": \"member1\", \"score\": <score of member1>},\n *  {\"member\": \"member2\", \"score\": <score of member2>},\n * ]\n *\n *\n * @param {Array.<string>} results\n * @return {Array.<Object>}\n */\nfunction mapZrangeResults(results) {\n  var\n    buffer = null,\n    mapped = [];\n\n  results.forEach(function (value) {\n    if (buffer === null) {\n      buffer = value;\n    }\n    else {\n      mapped.push({member: buffer, score: parseFloat(value)});\n      buffer = null;\n    }\n  });\n\n  return mapped;\n}\n\nmodule.exports = MemoryStorage;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/MemoryStorage.js\n// module id = 10\n// module chunks = 0","var\n  uuid = require('uuid'),\n  Document = require('./Document');\n\n/**\n * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n *\n * @callback responseCallback\n * @param {Object} err - Error object, NULL if the query is successful\n * @param {Object} [data] - The content of the query response\n */\n\n/**\n * This object is the result of a subscription request, allowing to manipulate the subscription itself.\n *\n * In Kuzzle, you don’t exactly subscribe to a room or a topic but, instead, you subscribe to documents.\n *\n * What it means is that, to subscribe, you provide to Kuzzle a set of matching filters.\n * Once you have subscribed, if a pub/sub message is published matching your filters, or if a matching stored\n * document change (because it is created, updated or deleted), then you’ll receive a notification about it.\n *\n * @param {object} collection - an instantiated and valid kuzzle object\n * @param {object} [options] - subscription optional configuration\n * @constructor\n */\nfunction Room(collection, options) {\n  // Define properties\n  Object.defineProperties(this, {\n    // private properties\n    callback: {\n      value: null,\n      writable: true\n    },\n    channel: {\n      value: null,\n      writable: true\n    },\n    id: {\n      value: uuid.v4()\n    },\n    lastRenewal: {\n      value: null,\n      writable: true\n    },\n    notifier: {\n      value: null,\n      writable: true\n    },\n    onDoneCB: {\n      value: null,\n      writable: true\n    },\n    queue: {\n      value: [],\n      writable: true\n    },\n    // Delay before allowing a subscription renewal\n    renewalDelay: {\n      value: 500\n    },\n    scope: {\n      value: options && options.scope ? options.scope : 'all'\n    },\n    state: {\n      value: options && options.state ? options.state : 'done'\n    },\n    subscribing: {\n      value: false,\n      writable: true\n    },\n    users: {\n      value: options && options.users ? options.users : 'none'\n    },\n    // read-only properties\n    collection: {\n      value: collection,\n      enumerable: true\n    },\n    kuzzle: {\n      value: collection.kuzzle,\n      enumerable: true\n    },\n    // writable properties\n    filters: {\n      value: null,\n      enumerable: true,\n      writable: true\n    },\n    headers: {\n      value: JSON.parse(JSON.stringify(collection.headers)),\n      enumerable: true,\n      writable: true\n    },\n    volatile: {\n      value: (options && options.volatile) ? options.volatile : {},\n      enumerable: true,\n      writable: true\n    },\n    roomId: {\n      value: null,\n      enumerable: true,\n      writable: true\n    },\n    subscribeToSelf: {\n      value: options && typeof options.subscribeToSelf === 'boolean' ? options.subscribeToSelf : true,\n      enumerable: true,\n      writable: true\n    }\n  });\n\n  if (this.kuzzle.bluebird) {\n    return this.kuzzle.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var whitelist = ['count'];\n\n        return passes && whitelist.indexOf(name) !== -1;\n      }\n    });\n  }\n\n  return this;\n}\n\n/**\n * Returns the number of other subscriptions on that room.\n *\n * @param {responseCallback} cb - Handles the query response\n */\nRoom.prototype.count = function (cb) {\n  var data;\n\n  this.kuzzle.callbackRequired('Room.count', cb);\n\n  data = this.kuzzle.addHeaders({body: {roomId: this.roomId}}, this.headers);\n\n  if (!isReady.call(this)) {\n    this.queue.push({action: 'count', args: [cb]});\n    return;\n  }\n\n  if (!this.roomId) {\n    throw new Error('Room.count: cannot count subscriptions on an inactive room');\n  }\n\n  this.kuzzle.query(this.collection.buildQueryArgs('realtime', 'count'), data, function (err, res) {\n    cb(err, res && res.result.count);\n  });\n};\n\n/**\n * Renew the subscription using new filters\n *\n * @param {object} [filters] - Filters in Kuzzle DSL format\n * @param {responseCallback} notificationCB - called for each new notification\n * @param {responseCallback} [cb] - handles the query response\n */\nRoom.prototype.renew = function (filters, notificationCB, cb) {\n  var\n    now = Date.now(),\n    subscribeQuery = {\n      scope: this.scope,\n      state: this.state,\n      users: this.users\n    },\n    self = this;\n\n  if (typeof filters === 'function') {\n    cb = notificationCB;\n    notificationCB = filters;\n    filters = null;\n  }\n\n  if (!cb) {\n    cb = self.onDoneCB;\n  }\n\n  self.kuzzle.callbackRequired('Room.renew', notificationCB);\n\n  /*\n    Skip subscription renewal if another one was performed a moment before\n   */\n  if (self.lastRenewal && (now - self.lastRenewal) <= self.renewalDelay) {\n    return cb && cb(new Error('Subscription already renewed less than ' + self.renewalDelay + 'ms ago'));\n  }\n\n  if (filters) {\n    self.filters = filters;\n  }\n\n  /*\n   if not yet connected, register itself to the subscriptions list and wait for the\n   main Kuzzle object to renew once online\n    */\n  if (self.kuzzle.state !== 'connected') {\n    self.callback = notificationCB;\n    self.onDoneCB = cb;\n    self.kuzzle.subscriptions.pending[self.id] = self;\n    return;\n  }\n\n  if (self.subscribing) {\n    self.queue.push({action: 'renew', args: [filters, notificationCB, cb]});\n    return;\n  }\n\n  self.unsubscribe();\n  self.roomId = null;\n  self.subscribing = true;\n  self.callback = notificationCB;\n  self.onDoneCB = cb;\n  self.kuzzle.subscriptions.pending[self.id] = self;\n\n  subscribeQuery.body = self.filters;\n  subscribeQuery = self.kuzzle.addHeaders(subscribeQuery, this.headers);\n\n  self.kuzzle.query(self.collection.buildQueryArgs('realtime', 'subscribe'), subscribeQuery, {volatile: self.volatile}, function (error, response) {\n    delete self.kuzzle.subscriptions.pending[self.id];\n    self.subscribing = false;\n\n    if (error) {\n      self.queue = [];\n      return cb && cb(new Error('Error during Kuzzle subscription: ' + error.message));\n    }\n\n    self.lastRenewal = now;\n    self.roomId = response.result.roomId;\n    self.channel = response.result.channel;\n\n    if (!self.kuzzle.subscriptions[self.roomId]) {\n      self.kuzzle.subscriptions[self.roomId] = {};\n    }\n\n    self.kuzzle.subscriptions[self.roomId][self.id] = self;\n\n    self.notifier = notificationCallback.bind(self);\n    self.kuzzle.network.on(self.channel, self.notifier);\n\n    dequeue.call(self);\n    cb && cb(null, self);\n  });\n};\n\n/**\n * Unsubscribes from Kuzzle.\n *\n * Stop listening immediately. If there is no listener left on that room, sends an unsubscribe request to Kuzzle, once\n * pending subscriptions reaches 0, and only if there is still no listener on that room.\n * We wait for pending subscriptions to finish to avoid unsubscribing while another subscription on that room is\n *\n * @return {*} this\n */\nRoom.prototype.unsubscribe = function () {\n  var\n    self = this,\n    room = self.roomId,\n    interval;\n\n  if (!isReady.call(this)) {\n    self.queue.push({action: 'unsubscribe', args: []});\n    return self;\n  }\n\n  if (room) {\n    self.kuzzle.network.off(self.channel, this.notifier);\n\n    if (Object.keys(self.kuzzle.subscriptions[room]).length === 1) {\n      delete self.kuzzle.subscriptions[room];\n\n      if (Object.keys(self.kuzzle.subscriptions.pending).length === 0) {\n        self.kuzzle.query(self.collection.buildQueryArgs('realtime', 'unsubscribe'), {body: {roomId: room}});\n      } else {\n        interval = setInterval(function () {\n          if (Object.keys(self.kuzzle.subscriptions.pending).length === 0) {\n            if (!self.kuzzle.subscriptions[room]) {\n              self.kuzzle.query(self.collection.buildQueryArgs('realtime', 'unsubscribe'), {body: {roomId: room}});\n            }\n            clearInterval(interval);\n          }\n        }, 100);\n      }\n    } else {\n      delete self.kuzzle.subscriptions[room][self.id];\n    }\n\n    self.roomId = null;\n  }\n\n  return self;\n};\n\n/**\n * Helper function allowing to set headers while chaining calls.\n *\n * If the replace argument is set to true, replace the current headers with the provided content.\n * Otherwise, it appends the content to the current headers, only replacing already existing values\n *\n * @param content - new headers content\n * @param [replace] - default: false = append the content. If true: replace the current headers with tj\n */\nRoom.prototype.setHeaders = function (content, replace) {\n  this.kuzzle.setHeaders.call(this, content, replace);\n  return this;\n};\n\n/**\n * Callback called by the network handler when a message is sent to the subscribed room ID\n * Calls the registered callback if the notification passes the subscription filters\n *\n * @param {object} data - data\n * @returns {*}\n */\nfunction notificationCallback (data) {\n  if (data.error) {\n    return this.callback(data.error);\n  }\n\n  if (data.action === 'jwtTokenExpired') {\n    this.kuzzle.jwtToken = undefined;\n    return this.kuzzle.emitEvent('jwtTokenExpired');\n  }\n\n  if (data.controller === 'document' || (data.controller === 'realtime' && data.action === 'publish')) {\n    data.type = 'document';\n    data.document = new Document(this.collection, data.result._id, data.result._source);\n    delete data.result;\n  }\n  else if (data.controller === 'realtime') {\n    data.type = 'user';\n    data.user = {count: data.result.count};\n    delete data.result;\n  }\n\n  if (this.kuzzle.requestHistory[data.requestId]) {\n    if (this.subscribeToSelf) {\n      this.callback(null, data);\n    }\n    delete this.kuzzle.requestHistory[data.requestId];\n  } else {\n    this.callback(null, data);\n  }\n}\n\n\n/**\n * Dequeue actions performed while subscription was being renewed\n */\nfunction dequeue () {\n  var element;\n\n  while (this.queue.length > 0) {\n    element = this.queue.shift();\n\n    this[element.action].apply(this, element.args);\n  }\n}\n\nfunction isReady() {\n  return this.kuzzle.state === 'connected' && !this.subscribing;\n}\n\nmodule.exports = Room;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Room.js\n// module id = 11\n// module chunks = 0","/**\n * @param {Collection} collection\n * @param {int} total\n * @param {Document[]} documents\n * @param {object} aggregations\n * @param {object} options\n * @param {object} filters\n * @param {SearchResult} previous\n * @property {Collection} collection\n * @property {number} total\n * @property {Document[]} documents\n * @property {object} aggregations\n * @property {object} options\n * @property {object} filters\n * @property {number} fetchedDocument\n * @constructor\n */\nfunction SearchResult (collection, total, documents, aggregations, options, filters, previous) {\n  Object.defineProperties(this, {\n    // read-only properties\n    collection: {\n      value: collection,\n      enumerable: true\n    },\n    total: {\n      value: total,\n      enumerable: true\n    },\n    documents: {\n      value: documents,\n      enumerable: true\n    },\n    aggregations: {\n      value: aggregations || {},\n      enumerable: true\n    },\n    options: {\n      value: options || {},\n      enumerable: true\n    },\n    filters: {\n      value: filters || {},\n      enumerable: true\n    },\n    // writable properties\n    fetchedDocument: {\n      value: previous instanceof SearchResult ? documents.length + previous.fetchedDocument : documents.length,\n      enumerable: true,\n      writable: true\n    }\n  });\n\n  // promisifying\n  if (this.collection.kuzzle.bluebird) {\n    return this.collection.kuzzle.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var whitelist = ['fetchNext'];\n\n        return passes && whitelist.indexOf(name) !== -1;\n      }\n    });\n  }\n\n  return this;\n}\n\n/**\n * @param {function} cb\n */\nSearchResult.prototype.fetchNext = function (cb) {\n  var\n    filters,\n    options = Object.assign({}, this.options);\n  \n  options.previous = this;\n\n  // retrieve next results with scroll if original search use it\n  if (options.scrollId) {\n    if (this.fetchedDocument >= this.getTotal()) {\n      cb(null, null);\n      return;\n    }\n\n    // from and size parameters are not valid for a scroll action\n    if (typeof options.from !== 'undefined') {\n      delete options.from;\n    }\n\n    if (options.size) {\n      delete options.size;\n    }\n\n    this.collection.scroll(options.scrollId, options, this.filters || {}, cb);\n\n    return;\n  }\n\n  // retrieve next results with from/size if original search use it\n  if (options.from !== undefined && options.size !== undefined) {\n    filters = Object.assign({}, this.filters);\n\n    // check if we need to do next request to fetch all matching documents\n    options.from += options.size;\n\n    if (options.from >= this.getTotal()) {\n      cb(null, null);\n\n      return;\n    }\n\n    this.collection.search(filters, options, cb);\n\n    return;\n  }\n\n  cb(new Error('Unable to retrieve next results from search: missing scrollId or from/size params'));\n};\n\n/**\n * @returns {Document[]}\n */\nSearchResult.prototype.getDocuments = function () {\n  return this.documents;\n};\n\n/**\n * @returns {number}\n */\nSearchResult.prototype.getTotal = function () {\n  return this.total;\n};\n\n/**\n * @returns {object}\n */\nSearchResult.prototype.getAggregations = function () {\n  return this.aggregations;\n};\n\n/**\n * @returns {Object}\n */\nSearchResult.prototype.getOptions = function() {\n  return this.options;\n};\n\n/**\n * @returns {object}\n */\nSearchResult.prototype.getFilters = function() {\n  return this.filters;\n};\n\n/**\n * @returns {object}\n */\nSearchResult.prototype.getCollection = function () {\n  return this.collection;\n};\n\n/**\n * @returns {number}\n */\nSearchResult.prototype.getFetchedDocument = function () {\n  return this.fetchedDocument;\n};\n\nmodule.exports = SearchResult;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/SearchResult.js\n// module id = 12\n// module chunks = 0","/**\n * Sugar-code handling the result of a Room.renew call\n * @constructor\n */\nfunction SubscribeResult() {\n  this.cbs = [];\n  this.error = null;\n  this.room = null;\n}\n\n/**\n * Registers a callback to be called with a subscription result\n * @param {Function} cb\n */\nSubscribeResult.prototype.onDone = function (cb) {\n  if (this.error || this.room) {\n    cb(this.error, this.room);\n  }\n  else {\n    this.cbs.push(cb);\n  }\n\n  return this;\n};\n\n/**\n * Calls all registered callbacks\n *\n * @param {Object} error object\n * @param {Room} room\n */\nSubscribeResult.prototype.done = function (error, room) {\n  this.error = error;\n  this.room = room;\n\n  this.cbs.forEach(function (cb) {\n    cb(error, room);\n  });\n};\n\nmodule.exports = SubscribeResult;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/SubscribeResult.js\n// module id = 13\n// module chunks = 0","/**\n *\n * @param host\n * @param port\n * @param sslConnection\n * @returns {Object} tnstantiated WebSocket/Socket.IO object\n */\n\nfunction network(host, port, sslConnection) {\n  // Web browser / NodeJS websocket handling\n  if (typeof window !== 'undefined') {\n    // use native websockets if the browser supports it\n    if (typeof WebSocket !== 'undefined') {\n      return new (require('./wrappers/websocket'))(host, port, sslConnection);\n    }\n    // otherwise fallback to socket.io, if available\n    else if (window.io) {\n      return new (require('./wrappers/socketio'))(host, port, sslConnection);\n    }\n\n    throw new Error('Aborting: no websocket support detected and no socket.io library loaded either.');\n  }\n\n  return new (require('./wrappers/websocket'))(host, port, sslConnection);\n}\n\nmodule.exports = network;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/networkWrapper/index.js\n// module id = 14\n// module chunks = 0","function SocketIO(host, port, ssl) {\n  this.host = host;\n  this.port = port;\n  this.ssl = ssl;\n  this.socket = null;\n\n  /**\n   * Creates a new socket from the provided arguments\n   *\n   * @constructor\n   * @param {boolean} autoReconnect\n   * @param {int} reconnectionDelay\n   */\n  this.connect = function (autoReconnect, reconnectionDelay) {\n    this.socket = window.io((this.ssl ? 'https://' : 'http://') + this.host + ':' + this.port, {\n      reconnection: autoReconnect,\n      reconnectionDelay: reconnectionDelay,\n      forceNew: true\n    });\n  };\n\n  /**\n   * Fires the provided callback whence a connection is established\n   *\n   * @param {function} callback\n   */\n  this.onConnect = function (callback) {\n    this.socket.on('connect', callback);\n  };\n\n  /**\n   * Fires the provided callback whenever a connection error is received\n   * @param {function} callback\n   */\n  this.onConnectError = function (callback) {\n    this.socket.on('connect_error', callback);\n  };\n\n  /**\n   * Fires the provided callback whenever a disconnection occurred\n   * @param {function} callback\n   */\n  this.onDisconnect = function (callback) {\n    this.socket.on('disconnect', callback);\n  };\n\n  /**\n   * Fires the provided callback whenever a connection has been reestablished\n   * @param {function} callback\n   */\n  this.onReconnect = function (callback) {\n    this.socket.on('reconnect', callback);\n  };\n\n  /**\n   * Registers a callback on a room. Once 1 message is received, fires the\n   * callback and unregister it afterward.\n   *\n   * @param {string} roomId\n   * @param {function} callback\n   */\n  this.once = function (roomId, callback) {\n    this.socket.once(roomId, callback);\n  };\n\n  /**\n   * Registers a callback on a room.\n   *\n   * @param {string} roomId\n   * @param {function} callback\n   */\n  this.on = function (roomId, callback) {\n    this.socket.on(roomId, callback);\n  };\n\n  /**\n   * Unregisters a callback from a room.\n   *\n   * @param {string} roomId\n   * @param {function} callback\n   */\n  this.off = function (roomId, callback) {\n    this.socket.off(roomId, callback);\n  };\n\n\n  /**\n   * Sends a payload to the connected server\n   *\n   * @param {Object} payload\n   */\n  this.send = function (payload) {\n    this.socket.emit('kuzzle', payload);\n  };\n\n  /**\n   * Closes the connection\n   */\n  this.close = function () {\n    this.socket.close();\n    this.socket = null;\n  };\n}\n\nmodule.exports = SocketIO;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/networkWrapper/wrappers/socketio.js\n// module id = 15\n// module chunks = 0","var SecurityDocument = require('./SecurityDocument');\n\nfunction Profile(Security, id, content) {\n\n  SecurityDocument.call(this, Security, id, content);\n\n  // Define properties\n  Object.defineProperties(this, {\n    // private properties\n    deleteActionName: {\n      value: 'deleteProfile'\n    },\n    updateActionName: {\n      value: 'updateProfile'\n    }\n  });\n\n  // promisifying\n  if (Security.kuzzle.bluebird) {\n    return Security.kuzzle.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var whitelist = ['hydrate', 'save'];\n\n        return passes && whitelist.indexOf(name) !== -1;\n      }\n    });\n  }\n\n}\n\nProfile.prototype = Object.create(SecurityDocument.prototype, {\n  constructor: {\n    value: Profile\n  }\n});\n\n/**\n * Persist to the persistent layer the current profile\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {Profile} this\n */\nProfile.prototype.save = function (options, cb) {\n  var\n    data,\n    self = this;\n\n  if (!this.content.policies) {\n    throw new Error('Argument \"policies\" is mandatory in a profile. This argument contains an array of objects.');\n  }\n\n  if (options && cb === undefined && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data = this.serialize();\n\n  self.kuzzle.query(self.Security.buildQueryArgs('createOrReplaceProfile'), data, options, cb && function (error) {\n    cb(error, error ? undefined : self);\n  });\n\n  return self;\n};\n\n\n/**\n * Add a policy in the policies list\n * @param {Object} policy - must be an object containing at least a \"roleId\" member which must be a string.\n *\n * @returns {Profile} this\n */\nProfile.prototype.addPolicy = function (policy) {\n\n  if (typeof policy !== 'object' || typeof policy.roleId !== 'string') {\n    throw new Error('Parameter \"policies\" must be an object containing at least a \"roleId\" member which must be a string.');\n  }\n\n  if (!this.content.policies) {\n    this.content.policies = [];\n  }\n\n  this.content.policies.push(policy);\n\n  return this;\n};\n\n/**\n * Set policies list\n * @param {Array} policies - must be an array of objects containing at least a \"roleId\" member which must be a string\n *\n * @returns {Profile} this\n */\nProfile.prototype.setPolicies = function (policies) {\n\n  if (!Array.isArray(policies)) {\n    throw new Error('Parameter \"policies\" must be an array of objects containing at least a \"roleId\" member which must be a string');\n  }\n\n  policies.map(function (policy) {\n    if (typeof policy !== 'object' || typeof policy.roleId !== 'string') {\n      throw new Error('Parameter \"policies\" must be an array of objects containing at least a \"roleId\" member which must be a string');\n    }\n  });\n\n  this.content.policies = policies;\n\n  return this;\n};\n\n/**\n * Serialize this object into a JSON object\n *\n * @return {object} JSON object representing this securityDocument\n */\nProfile.prototype.serialize = function () {\n  var\n    data = {};\n\n  if (this.id) {\n    data._id = this.id;\n  }\n\n  data.body = this.content;\n\n  return data;\n};\n\n/**\n * Returns the list of policies associated to this profile.\n * Each policy element is an array of objects containing at least a \"roleId\" member which must be a string\n *\n * @return {object} an array of policies\n */\nProfile.prototype.getPolicies = function () {\n  return this.content.policies;\n};\n\nmodule.exports = Profile;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/security/Profile.js\n// module id = 16\n// module chunks = 0","var SecurityDocument = require('./SecurityDocument');\n\nfunction Role(Security, id, content) {\n\n  SecurityDocument.call(this, Security, id, content);\n\n  // Define properties\n  Object.defineProperties(this, {\n    // private properties\n    deleteActionName: {\n      value: 'deleteRole'\n    },\n    updateActionName: {\n      value: 'updateRole'\n    }\n  });\n\n  // promisifying\n  if (Security.kuzzle.bluebird) {\n    return Security.kuzzle.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var whitelist = ['save'];\n\n        return passes && whitelist.indexOf(name) !== -1;\n      }\n    });\n  }\n\n}\n\nRole.prototype = Object.create(SecurityDocument.prototype, {\n  constructor: {\n    value: Role\n  }\n});\n\n/**\n * Saves this role into Kuzzle.\n *\n * If this is a new role, this function will create it in Kuzzle.\n * Otherwise, this method will replace the latest version of this role in Kuzzle by the current content\n * of this object.\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {Role} this object\n */\nRole.prototype.save = function (options, cb) {\n  var\n    data = this.serialize(),\n    self = this;\n\n  if (options && cb === undefined && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.query(this.Security.buildQueryArgs('createOrReplaceRole'), data, options, cb && function (error) {\n    cb(error, error ? undefined : self);\n  });\n\n  return this;\n};\n\nmodule.exports = Role;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/security/Role.js\n// module id = 17\n// module chunks = 0","var\n  Role = require('./Role'),\n  Profile = require('./Profile'),\n  User = require('./User');\n\n/**\n * Kuzzle security constructor\n *\n * @param kuzzle\n * @returns {Security}\n * @constructor\n */\nfunction Security(kuzzle) {\n\n  Object.defineProperty(this, 'kuzzle', {\n    value: kuzzle\n  });\n\n  Object.defineProperty(this, 'buildQueryArgs', {\n    value: function (action) {\n      return {\n        controller: 'security',\n        action: action\n      };\n    }\n  });\n\n  if (this.kuzzle.bluebird) {\n    return this.kuzzle.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var blacklist = ['role', 'profile', 'user', 'isActionAllowed'];\n\n        return passes && blacklist.indexOf(name) === -1;\n      }\n    });\n  }\n\n  return this;\n}\n\n\n/**\n * Retrieve a single Role using its unique role ID.\n *\n * @param {string} id\n * @param {object|responseCallback} [options] - Optional parameters\n * @param {responseCallback} [cb] - returns Kuzzle's response\n */\nSecurity.prototype.fetchRole = function (id, options, cb) {\n  var\n    data,\n    self = this;\n\n  if (!id) {\n    throw new Error('Id parameter is mandatory for fetchRole function');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data = {_id: id};\n\n  self.kuzzle.callbackRequired('Security.fetchRole', cb);\n\n  self.kuzzle.query(this.buildQueryArgs('getRole'), data, options, function (err, response) {\n    cb(err, err ? undefined : new Role(self, response.result._id, response.result._source));\n  });\n};\n\n/**\n * Executes a search on roles according to a filter\n *\n * /!\\ There is a small delay between role creation and their existence in our persistent search layer,\n * usually a couple of seconds.\n * That means that a role that was just been created won’t be returned by this function.\n *\n * @param {Object} filters - this object can contains an array `indexes` with a list of index id, a integer `from` and a integer `size`\n * @param {object|responseCallback} [options] - Optional parameters\n * @param {responseCallback} [cb] - returns Kuzzle's response\n *\n */\nSecurity.prototype.searchRoles = function (filters, options, cb) {\n  var\n    self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.callbackRequired('Security.searchRoles', cb);\n\n  self.kuzzle.query(this.buildQueryArgs('searchRoles'), {body: filters}, options, function (error, result) {\n    var documents;\n\n    if (error) {\n      return cb(error);\n    }\n\n    documents = result.result.hits.map(function (doc) {\n      return new Role(self, doc._id, doc._source);\n    });\n\n    cb(null, { total: result.result.total, roles: documents });\n  });\n};\n\n/**\n * Create a new role in Kuzzle.\n *\n * Takes an optional argument object with the following property:\n *    - replaceIfExist (boolean, default: false):\n *        If the same role already exists: throw an error if sets to false.\n *        Replace the existing role otherwise\n *\n * @param {string} id - role identifier\n * @param {object} content - a plain javascript object representing the role\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} [cb] - (optional) Handles the query response\n */\nSecurity.prototype.createRole = function (id, content, options, cb) {\n  var\n    self = this,\n    data = {},\n    action = 'createRole';\n\n  if (!id || typeof id !== 'string') {\n    throw new Error('Security.createRole: cannot create a role without a role ID');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data._id = id;\n  data.body = content;\n\n  if (options) {\n    action = options.replaceIfExist ? 'createOrReplaceRole' : 'createRole';\n  }\n\n  self.kuzzle.query(this.buildQueryArgs(action), data, options, cb && function (err, res) {\n    cb(err, err ? undefined : new Role(self, res.result._id, res.result._source));\n  });\n};\n\n\n/**\n * Update a role in Kuzzle.\n *\n * @param {string} id - role identifier\n * @param {object} content - a plain javascript object representing the role's modification\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} [cb] - (optional) Handles the query response\n * @returns {Security} this object\n */\nSecurity.prototype.updateRole = function (id, content, options, cb) {\n  var\n    self = this,\n    data = {_id: id, body: content},\n    action = 'updateRole';\n\n  if (!id || typeof id !== 'string') {\n    throw new Error('Security.updateRole: cannot update a role without a role ID');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.query(this.buildQueryArgs(action), data, options, cb && function (err) {\n    cb(err, err ? undefined : new Role(self, id, content));\n  });\n\n  return this;\n};\n\n/**\n * Delete role.\n *\n * There is a small delay between role deletion and their deletion in our advanced search layer,\n * usually a couple of seconds.\n * That means that a role that was just been delete will be returned by this function\n *\n *\n * @param {string} id - Role id to delete\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {Security} this object\n */\nSecurity.prototype.deleteRole = function (id, options, cb) {\n  var data = {_id: id};\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.query(this.buildQueryArgs('deleteRole'), data, options, cb && function (err, res) {\n    cb(err, err ? undefined : res.result._id);\n  });\n\n  return this;\n};\n\n/**\n * Instantiate a new Role object. Workaround to the module.exports limitation, preventing multiple\n * constructors to be exposed without having to use a factory or a composed object.\n *\n * @param {string} id - role id\n * @param {object} content - role content\n * @constructor\n */\nSecurity.prototype.role = function(id, content) {\n  return new Role(this, id, content);\n};\n\n\n/**\n * Get a specific profile from kuzzle\n *\n *\n * @param {string} id\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} cb - returns Kuzzle's response\n */\nSecurity.prototype.fetchProfile = function (id, options, cb) {\n  var\n    data,\n    self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  if (!id || typeof id !== 'string') {\n    throw new Error('Id parameter is mandatory for fetchProfile function');\n  }\n\n\n  data = {_id: id};\n\n  self.kuzzle.callbackRequired('Security.fetchProfile', cb);\n\n  self.kuzzle.query(this.buildQueryArgs('getProfile'), data, options, function (error, response) {\n    cb(error, error ? undefined : new Profile(self, response.result._id, response.result._source));\n  });\n};\n\n/**\n * Executes a search on profiles according to a filter\n *\n *\n * /!\\ There is a small delay between profile creation and their existence in our persistent search layer,\n * usually a couple of seconds.\n * That means that a profile that was just been created won’t be returned by this function.\n *\n * @param {Object} filters - this object can contains an array `roles` with a list of roles id, a integer `from` and a integer `size`\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} [cb] - returns Kuzzle's response\n */\nSecurity.prototype.searchProfiles = function (filters, options, cb) {\n  var\n    self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.callbackRequired('Security.searchProfiles', cb);\n\n  self.kuzzle.query(this.buildQueryArgs('searchProfiles'), {body: filters}, options, function (error, response) {\n    var documents;\n\n    if (error) {\n      return cb(error);\n    }\n\n    documents = response.result.hits.map(function (doc) {\n      return new Profile(self, doc._id, doc._source);\n    });\n\n    cb(null, { total: response.result.total, profiles: documents });\n  });\n};\n\n/**\n * Create a new profile in Kuzzle.\n *\n * Takes an optional argument object with the following property:\n *    - replaceIfExist (boolean, default: false):\n *        If the same profile already exists: throw an error if sets to false.\n *        Replace the existing profile otherwise\n *\n * @param {string} id - profile identifier\n * @param {object} content - attribute `roles` in `content` must only contains an array of role id\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} [cb] - (optional) Handles the query response\n */\nSecurity.prototype.createProfile = function (id, content, options, cb) {\n  var\n    self = this,\n    data = {},\n    action = 'createProfile';\n\n  if (!id || typeof id !== 'string') {\n    throw new Error('Security.createProfile: cannot create a profile without a profile ID');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data._id = id;\n  data.body = content;\n\n  if (options) {\n    action = options.replaceIfExist ? 'createOrReplaceProfile' : 'createProfile';\n  }\n\n  self.kuzzle.query(this.buildQueryArgs(action), data, options, cb && function (err, res) {\n    cb(err, err ? undefined : new Profile(self, res.result._id, res.result._source));\n  });\n};\n\n\n/**\n * Update a profile in Kuzzle.\n *\n * @param {string} id - profile identifier\n * @param {object} content - a plain javascript object representing the profile's modification\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} [cb] - (optional) Handles the query response\n * @returns {Security} this object\n */\nSecurity.prototype.updateProfile = function (id, content, options, cb) {\n  var\n    self = this,\n    data = {},\n    action = 'updateProfile';\n\n  if (!id || typeof id !== 'string') {\n    throw new Error('Security.updateProfile: cannot update a profile without a profile ID');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data._id = id;\n  data.body = content;\n\n  self.kuzzle.query(this.buildQueryArgs(action), data, options, cb && function (err, res) {\n    var updatedContent = {};\n\n    if (err) {\n      return cb(err);\n    }\n\n    Object.keys(res.result._source).forEach(function (property) {\n      updatedContent[property] = res.result._source[property];\n    });\n\n    cb(null, new Profile(self, res.result._id, updatedContent));\n  });\n\n  return this;\n};\n\n/**\n * Delete profile.\n *\n * There is a small delay between profile deletion and their deletion in our advanced search layer,\n * usually a couple of seconds.\n * That means that a profile that was just been delete will be returned by this function\n *\n *\n * @param {string} id - Profile id to delete\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {Security} this object\n */\nSecurity.prototype.deleteProfile = function (id, options, cb) {\n  var data = {_id: id};\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.query(this.buildQueryArgs('deleteProfile'), data, options, cb && function (err, res) {\n    cb(err, err ? undefined : res.result._id);\n  });\n\n  return this;\n};\n\n/**\n * Instantiate a new Profile object. Workaround to the module.exports limitation, preventing multiple\n * constructors to be exposed without having to use a factory or a composed object.\n *\n * @param {string} id - profile id\n * @param {object} content - profile content\n * @constructor\n */\nSecurity.prototype.profile = function(id, content) {\n  return new Profile(this, id, content);\n};\n\n/**\n * Get a specific user from kuzzle using its unique ID\n *\n * @param {string} id\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} cb - returns Kuzzle's response\n */\nSecurity.prototype.fetchUser = function (id, options, cb) {\n  var\n    data = {_id: id},\n    self = this;\n\n  if (!id || typeof id !== 'string') {\n    throw new Error('Id parameter is mandatory for fetchUser function');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.callbackRequired('Security.fetchUser', cb);\n\n  self.kuzzle.query(this.buildQueryArgs('getUser'), data, options, function (err, response) {\n    cb(err, err ? undefined : new User(self, response.result._id, response.result._source));\n  });\n};\n\n/**\n * Executes a search on user according to a filter\n *\n * /!\\ There is a small delay between user creation and their existence in our persistent search layer,\n * usually a couple of seconds.\n * That means that a user that was just been created won’t be returned by this function.\n *\n * @param {Object} filters - same filters as documents filters\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} [cb] - returns Kuzzle's response\n */\nSecurity.prototype.searchUsers = function (filters, options, cb) {\n  var\n    self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.callbackRequired('Security.searchUsers', cb);\n\n  self.kuzzle.query(this.buildQueryArgs('searchUsers'), {body: filters}, options, function (error, response) {\n    var documents;\n\n    if (error) {\n      return cb(error);\n    }\n\n    documents = response.result.hits.map(function (doc) {\n      return new User(self, doc._id, doc._source);\n    });\n\n    cb(null, { total: response.result.total, users: documents });\n  });\n};\n\n/**\n * Create a new user in Kuzzle.\n *\n * Takes an optional argument object with the following property:\n *    - replaceIfExist (boolean, default: false):\n *        If the same user already exists: throw an error if sets to false.\n *        Replace the existing user otherwise\n *\n * @param {string} id - user identifier\n * @param {object} content - attribute `profileIds` in `content` must only contain an array of profile ids\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} [cb] - (optional) Handles the query response\n */\nSecurity.prototype.createUser = function (id, content, options, cb) {\n  var\n    self = this,\n    data = {_id: id, body: content},\n    action = 'createUser';\n\n  if (!id || typeof id !== 'string') {\n    throw new Error('Security.createUser: cannot create a user without a user ID');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  if (options) {\n    action = options.replaceIfExist ? 'createOrReplaceUser' : 'createUser';\n  }\n\n  self.kuzzle.query(this.buildQueryArgs(action), data, null, cb && function (err, res) {\n    cb(err, err ? undefined : new User(self, res.result._id, res.result._source));\n  });\n};\n\n/**\n * Create a new restricted user in Kuzzle.\n *\n * This function will create a new user. It is not usable to update an existing user.\n * This function allows anonymous users to create a \"restricted\" user with predefined rights.\n *\n * @param {string} id - user identifier\n * @param {object} content - attribute `profile` in `content` must only contains the profile id\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} [cb] - (optional) Handles the query response\n */\nSecurity.prototype.createRestrictedUser = function (id, content, options, cb) {\n  var\n    self = this,\n    data = {_id: id, body: content};\n\n  if (!id || typeof id !== 'string') {\n    throw new Error('Security.createRestrictedUser: cannot create a user without a user ID');\n  }\n\n  if (content.profileIds) {\n    throw new Error('Security.createRestrictedUser: cannot provide profileIds');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.query(this.buildQueryArgs('createRestrictedUser'), data, null, cb && function (err, res) {\n    cb(err, err ? undefined : new User(self, res.result._id, res.result._source));\n  });\n};\n\n\n/**\n * Update an user in Kuzzle.\n *\n * @param {string} id - user identifier\n * @param {object} content - a plain javascript object representing the user's modification\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} [cb] - (optional) Handles the query response\n * @returns {Security} this object\n */\nSecurity.prototype.updateUser = function (id, content, options, cb) {\n  var\n    self = this,\n    data = {},\n    action = 'updateUser';\n\n  if (!id || typeof id !== 'string') {\n    throw new Error('Security.updateUser: cannot update an user without an user ID');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data._id = id;\n  data.body = content;\n\n  self.kuzzle.query(this.buildQueryArgs(action), data, options, cb && function (err, res) {\n    cb(err, err ? undefined : new User(self, res.result._id, res.result._source));\n  });\n\n  return this;\n};\n\n/**\n * Delete user.\n *\n * There is a small delay between user deletion and their deletion in our advanced search layer,\n * usually a couple of seconds.\n * That means that a user that was just been delete will be returned by this function\n *\n *\n * @param {string} id - Profile id to delete\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {Security} this object\n */\nSecurity.prototype.deleteUser = function (id, options, cb) {\n  var data = {_id: id};\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.query(this.buildQueryArgs('deleteUser'), data, options, cb && function (err, res) {\n    cb(err, err ? undefined : res.result._id);\n  });\n\n  return this;\n};\n\n/**\n * Instantiate a new User object. Workaround to the module.exports limitation, preventing multiple\n * constructors to be exposed without having to use a factory or a composed object.\n *\n * @param {string} id - user id\n * @param {object} content - user content\n * @constructor\n */\nSecurity.prototype.user = function(id, content) {\n  return new User(this, id, content);\n};\n\n/**\n * Tells whether an action is allowed, denied or conditional based on the rights\n * rights provided as the first argument. An action is defined as a couple of\n * action and controller (mandatory), plus an index and a collection(optional).\n *\n * @param {object} rights - The rights rights associated to a user\n *                            (see getMyrights and getUserrights).\n * @param {string} controller - The controller to check the action onto.\n * @param {string} action - The action to perform.\n * @param {string} index - (optional) The name of index to perform the action onto.\n * @param {string} collection - (optional) The name of the collection to perform the action onto.\n *\n * @returns {string} ['allowed', 'denied', 'conditional'] where conditional cases\n *                   correspond to rights containing closures.\n *                   See also http://kuzzle.io/guide/#roles-definition\n */\nSecurity.prototype.isActionAllowed = function(rights, controller, action, index, collection) {\n  var filteredRights;\n\n  if (!rights || typeof rights !== 'object') {\n    throw new Error('rights parameter is mandatory for isActionAllowed function');\n  }\n  if (!controller || typeof controller !== 'string') {\n    throw new Error('controller parameter is mandatory for isActionAllowed function');\n  }\n  if (!action || typeof action !== 'string') {\n    throw new Error('action parameter is mandatory for isActionAllowed function');\n  }\n\n  // We filter in all the rights that match the request (including wildcards).\n  filteredRights = rights\n    .filter(function (right) {\n      return right.controller === controller || right.controller === '*';\n    })\n    .filter(function (right) {\n      return right.action === action || right.action === '*';\n    })\n    .filter(function (right) {\n      return right.index === index || right.index === '*';\n    })\n    .filter(function (right) {\n      return right.collection === collection || right.collection === '*';\n    });\n\n  // Then, if at least one right allows the action, we return 'allowed'\n  if (filteredRights.some(function (item) { return item.value === 'allowed'; })) {\n    return 'allowed';\n  }\n  // If no right allows the action, we check for conditionals.\n  if (filteredRights.some(function (item) { return item.value === 'conditional'; })) {\n    return 'conditional';\n  }\n  // Otherwise we return 'denied'.\n  return 'denied';\n};\n\n\n/**\n * Gets the rights array of a given user.\n *\n * @param {string} userId The id of the user.\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {function} cb The callback containing the normalized array of rights.\n */\nSecurity.prototype.getUserRights = function (userId, options, cb) {\n  var\n    data = {_id: userId},\n    self = this;\n\n  if (!userId || typeof userId !== 'string') {\n    throw new Error('userId parameter is mandatory for getUserRights function');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.callbackRequired('Kuzzle.getUserRights', cb);\n\n  this.kuzzle.query(this.buildQueryArgs('getUserRights'), data, options, cb && function (err, res) {\n    cb(err, err ? undefined : res.result.hits);\n  });\n};\n\nmodule.exports = Security;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/security/Security.js\n// module id = 18\n// module chunks = 0","// Unique ID creation requires a high quality random # generator.  We feature\n// detect to determine the best RNG source, normalizing to a function that\n// returns 128-bits of randomness, since that's what's usually required\nvar rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\n// random #'s we need to init node and clockseq\nvar _seedBytes = rng();\n\n// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\nvar _nodeId = [\n  _seedBytes[0] | 0x01,\n  _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]\n];\n\n// Per 4.2.2, randomize (14 bit) clockseq\nvar _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;\n\n// Previous uuid creation time\nvar _lastMSecs = 0, _lastNSecs = 0;\n\n// See https://github.com/broofa/node-uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  var node = options.node || _nodeId;\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : bytesToUuid(b);\n}\n\nmodule.exports = v1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/uuid/v1.js\n// module id = 19\n// module chunks = 0","var rng = require('./lib/rng');\nvar bytesToUuid = require('./lib/bytesToUuid');\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options == 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/uuid/v4.js\n// module id = 20\n// module chunks = 0"],"sourceRoot":""}