{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///kuzzle.js","webpack:///webpack/bootstrap 9af9cfc29e5340e3766a","webpack:///./src/kuzzle.js","webpack:///./src/security/kuzzleSecurityDocument.js","webpack:///./src/networkWrapper/wrappers/websocket.js","webpack:///./src/security/kuzzleUser.js","webpack:///./~/uuid/uuid.js","webpack:///./src/kuzzleDataCollection.js","webpack:///./src/kuzzleDataMapping.js","webpack:///./src/kuzzleDocument.js","webpack:///./src/kuzzleMemoryStorage.js","webpack:///./src/kuzzleRoom.js","webpack:///./src/kuzzleSubscribeResult.js","webpack:///./src/networkWrapper/index.js","webpack:///./src/networkWrapper/wrappers/socketio.js","webpack:///./src/security/kuzzleProfile.js","webpack:///./src/security/kuzzleRole.js","webpack:///./src/security/kuzzleSecurity.js","webpack:///./~/uuid/lib/rng-browser.js"],"names":["root","factory","exports","module","define","amd","a","i","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","cleanQueue","self","now","Date","lastDocumentIndex","queueTTL","offlineQueue","forEach","query","index","ts","splice","droppedRequest","emitEvent","queueMaxSize","length","cleanHistory","requestHistory","Object","keys","key","setTimeout","emitRequest","request","cb","undefined","jwtToken","network","once","requestId","response","error","action","message","Error","assign","status","send","dequeue","additionalQueue","uniqueQueue","dequeuingProcess","shift","Math","max","replayInterval","queuing","offlineQueueLoader","Array","isArray","concat","filter","controller","hasOwnProperty","renewAllSubscriptions","subscriptions","roomId","subscriptionId","subscription","renew","callback","removeAllSubscriptions","unsubscribe","uuid","KuzzleDataCollection","KuzzleSecurity","KuzzleMemoryStorage","KuzzleUser","networkWrapper","Kuzzle","host","options","defineProperties","collections","value","writable","connectCB","eventListeners","connected","lastEmitted","listeners","disconnected","reconnected","jwtTokenExpired","loginAttempt","offlineQueuePush","offlineQueuePop","queryError","eventTimeout","state","pending","autoReconnect","enumerable","defaultIndex","reconnectionDelay","wsPort","ioPort","sslConnection","autoQueue","autoReplay","autoResubscribe","headers","metadata","queueFilter","opt","getOwnPropertyDescriptor","offlineMode","defineProperty","header","errorMessagePrefix","event","args","prototype","slice","arguments","eventProperties","listener","process","nextTick","fn","apply","connect","bluebird","promisifyAll","suffix","name","func","target","passes","whitelist","indexOf","disconnect","onConnect","onConnectError","connectionError","internal","onDisconnect","onReconnect","reconnect","checkToken","err","res","valid","setJwtToken","token","success","result","jwt","JSON","stringify","unsetJwtToken","getJwtToken","login","strategy","credentials","expiresIn","body","queuable","logout","v4","callbackRequired","whoAmI","security","_id","_source","getMyRights","hits","updateSelf","content","data","queryArgs","addListener","listenerId","knownEvents","listenerType","isValid","toString","push","getAllStatistics","getStatistics","timestamp","queryCB","startTime","dataCollectionFactory","collection","flushQueue","listCollections","collectionType","arg","type","from","size","listIndexes","indexes","close","getServerInfo","serverInfo","refreshIndex","getAutoRefresh","setAutoRefresh","autoRefresh","attr","object","refresh","meta","addHeaders","removeAllListeners","eventName","removeListener","replayQueue","setDefaultIndex","setHeaders","replace","startQueuing","stopQueuing","KuzzleSecurityDocument","kuzzleSecurity","kuzzle","setContent","serialize","buildQueryArgs","deleteActionName","update","updateActionName","WSNode","port","ssl","WebSocket","e","code","client","wasConnected","retrying","lasturl","url","window","perMessageDeflate","onopen","poke","onclose","onClientError","onerror","onmessage","payload","parse","room","keep","on","off","findIndex","readyState","OPEN","create","constructor","setProfiles","profileIds","addProfile","profileId","save","saveRestricted","getProfiles","buff_to_string","buf","offset","bth","_byteToHex","v1","b","clockseq","_clockseq","msecs","getTime","nsecs","_lastNSecs","dt","_lastMSecs","tl","tmh","node","_nodeId","n","rnds","random","rng","_rng","ii","_hexToByte","substr","_seedBytes","blacklist","KuzzleDocument","KuzzleDataMapping","KuzzleRoom","KuzzleSubscribeResult","advancedSearch","filters","documents","doc","newDocument","version","_version","total","aggregations","count","createDocument","document","updateIfExist","deleteDocument","ids","fetchDocument","documentId","fetchAllDocuments","getMapping","kuzzleMapping","publishMessage","replaceDocument","subscribe","subscribeResult","done","bind","truncate","updateDocument","documentFactory","roomFactory","dataMappingFactory","mapping","kuzzleDataCollection","properties","mappings","set","field","dataCollection","publish","values","keyVal","idOrKeys","commands","append","bgrewriteaof","bgsave","bitcount","bitop","bitpos","__opts__","blpop","brpoplpush","dbsize","decrby","del","discard","exec","exists","expire","expireat","flushdb","getbit","getrange","hdel","hexists","hincrby","hmset","hset","info","lastsave","lindex","linsert","lpush","lrange","lrem","lset","ltrim","mset","multi","pexpire","pexpireat","pfadd","pfmerge","ping","psetex","randomkey","rename","renamenx","restore","rpoplpush","sadd","sdiffstore","setbit","setex","setrange","sinterstore","sismember","smove","sort","spop","srem","sunionstore","unwatch","wait","zadd","zcount","zincrby","zinterstore","zlexcount","zrange","zrangebylex","zrangebyscore","zrem","zremrangebylex","zremrangebyscore","zrevrangebylex","zrevrangebyscore","zrevrank","decr","get","dump","hgetall","hkeys","hlen","hstrlen","hvals","incr","llen","lpop","persist","pttl","rpop","scard","smembers","strlen","ttl","zcard","getset","lpushx","mget","pfcount","sdiff","sinter","sunion","watch","incrby","incrbyfloat","brpop","hget","hmget","hsetnx","msetnx","rpush","hincrbyfloat","srandmember","zrevrange","zscore","command","pop","v","channel","lastRenewal","notifier","onDoneCB","queue","renewalDelay","scope","subscribing","users","subscribeToSelf","notificationCallback","element","isReady","notificationCB","subscribeQuery","interval","setInterval","clearInterval","cbs","onDone","io","SocketIO","socket","reconnection","forceNew","emit","KuzzleProfile","policies","addPolicy","policy","roleId","setPolicies","map","getPolicies","KuzzleRole","getRole","searchRoles","roles","createRole","replaceIfExist","updateRole","deleteRole","roleFactory","getProfile","searchProfiles","profiles","createProfile","updateProfile","updatedContent","property","deleteProfile","profileFactory","getUser","searchUsers","createUser","createRestrictedUser","updateUser","deleteUser","userFactory","isActionAllowed","rights","filteredRights","right","some","item","getUserRights","userId","crypto","msCrypto","getRandomValues","_rnds8","Uint8Array","_rnds","r"],"mappings":"CAAA,SAAAA,EAAAC,GACA,mBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,QACA,sBAAAG,gBAAAC,IACAD,UAAAH,OACA,CACA,GAAAK,GAAAL,GACA,QAAAM,KAAAD,IAAA,gBAAAJ,iBAAAF,GAAAO,GAAAD,EAAAC,KAECC,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAT,OAGA,IAAAC,GAAAS,EAAAD,IACAT,WACAW,GAAAF,EACAG,QAAA,EAUA,OANAL,GAAAE,GAAAI,KAAAZ,EAAAD,QAAAC,IAAAD,QAAAQ,GAGAP,EAAAW,QAAA,EAGAX,EAAAD,QAvBA,GAAAU,KAqCA,OATAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,GAGAR,EAAA,KDgBM,SAASP,EAAQD,EAASQ,GEolBhC,QAAAS,KACA,GACAC,GAAAZ,KACAa,EAAAC,KAAAD,MACAE,IAEAH,GAAAI,SAAA,IACAJ,EAAAK,aAAAC,QAAA,SAAAC,EAAAC,GACAD,EAAAE,GAAAR,EAAAD,EAAAI,WACAD,EAAAK,KAIAL,QACAH,EAAAK,aACAK,OAAA,EAAAP,EAAA,GACAG,QAAA,SAAAK,GACAX,EAAAY,UAAA,kBAAAD,EAAAJ,UAKAP,EAAAa,aAAA,GAAAb,EAAAK,aAAAS,OAAAd,EAAAa,cACAb,EAAAK,aACAK,OAAA,EAAAV,EAAAK,aAAAS,OAAAd,EAAAa,cACAP,QAAA,SAAAK,GACAX,EAAAY,UAAA,kBAAAD,EAAAJ,SASA,QAAAQ,GAAAC,GACA,GACAf,GAAAC,KAAAD,KAEAgB,QAAAC,KAAAF,GAAAV,QAAA,SAAAa,GACAH,EAAAG,GAAAlB,EAAA,WACAe,GAAAG,KAIAC,WAAA,WACAL,EAAAC,IACG,KASH,QAAAK,GAAAC,EAAAC,GACA,GACAvB,GAAAZ,MAEAoC,SAAAxB,EAAAyB,UAAAF,IACAvB,EAAA0B,QAAAC,KAAAL,EAAAM,UAAA,SAAAC,GACA,GAAAC,GAAA,IAEA,YAAAR,EAAAS,QAAAF,EAAAC,OAAA,kBAAAD,EAAAC,MAAAE,UACAhC,EAAAyB,SAAAD,OACAxB,EAAAY,UAAA,kBAAAU,EAAAC,IAGAM,EAAAC,QACAA,EAAA,GAAAG,OAAAJ,EAAAC,MAAAE,SACAf,OAAAiB,OAAAJ,EAAAD,EAAAC,OACAA,EAAAK,OAAAN,EAAAM,OACAnC,EAAAY,UAAA,aAAAkB,EAAAR,EAAAC,IAGAA,GACAA,EAAAO,EAAAD,KAKAzC,KAAAsC,QAAAU,KAAAd,GAGAtB,EAAAgB,eAAAM,EAAAM,WAAA1B,KAAAD,MAMA,QAAAoC,KACA,GAEAC,GADAtC,EAAAZ,KAEAmD,KACAC,EAAA,WACAxC,EAAAK,aAAAS,OAAA,GACAO,EAAA1B,KAAAK,IAAAK,aAAA,GAAAE,MAAAP,EAAAK,aAAA,GAAAkB,IACAvB,EAAAY,UAAA,kBAAAZ,EAAAK,aAAAoC,SAEArB,WAAA,WACAoB,KACSE,KAAAC,IAAA,EAAA3C,EAAA4C,kBAET5C,EAAA6C,SAAA,EAIA,IAAA7C,EAAA8C,mBAAA,CACA,qBAAA9C,GAAA8C,mBACA,SAAAb,OAAA,iFAAAjC,GAAA8C,mBAIA,IADAR,EAAAtC,EAAA8C,sBACAC,MAAAC,QAAAV,GAYA,SAAAL,OAAA,0FAAAK,GAXAtC,GAAAK,aAAAiC,EACAW,OAAAjD,EAAAK,cACA6C,OAAA,SAAA5B,GAEA,IAAAA,EAAAf,OAAAiB,SAAAF,EAAAf,MAAAqB,YAAAN,EAAAf,MAAAwB,SAAAT,EAAAf,MAAA4C,WACA,SAAAlB,OAAA,gGAGA,QAAAM,EAAAa,eAAA9B,EAAAf,MAAAqB,aAAAW,EAAAjB,EAAAf,MAAAqB,YAAA,KAOAY,IAOA,QAAAa,KACA,GAAArD,GAAAZ,IAEA6B,QAAAC,KAAAlB,EAAAsD,eAAAhD,QAAA,SAAAiD,GACAtC,OAAAC,KAAAlB,EAAAsD,cAAAC,IAAAjD,QAAA,SAAAkD,GACA,GAAAC,GAAAzD,EAAAsD,cAAAC,GAAAC,EACAC,GAAAC,MAAAD,EAAAE,cAQA,QAAAC,KACA,GAAA5D,GAAAZ,IAEA6B,QAAAC,KAAAlB,EAAAsD,eAAAhD,QAAA,SAAAiD,GACAtC,OAAAC,KAAAlB,EAAAsD,cAAAC,IAAAjD,QAAA,SAAAkD,GACA,GAAAC,GAAAzD,EAAAsD,cAAAC,GAAAC,EACAC,GAAAI,kBAxyBA,GACAC,GAAAxE,EAAA,GACAyE,EAAAzE,EAAA,GACA0E,EAAA1E,EAAA,IACA2E,EAAA3E,EAAA,GACA4E,EAAA5E,EAAA,GACA6E,EAAA7E,EAAA,GAmBAP,GAAAD,QAAAsF,OAAA,SAAAC,EAAAC,EAAA/C,GACA,GAAAvB,GAAAZ,IAEA,MAAAA,eAAAgF,SACA,UAAAA,QAAAC,EAAAC,EAAA/C,EAQA,IALAA,GAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,OAGAD,GAAA,KAAAA,EACA,SAAApC,OAAA,wBAmQA,OAhQAhB,QAAAsD,iBAAAnF,MAEAoF,aACAC,SACAC,UAAA,GAEAC,WACAF,MAAAlD,GAEAqD,gBACAH,OACAI,WAAoBC,YAAA,KAAAC,cACpBjD,OAAgBgD,YAAA,KAAAC,cAChBC,cAAuBF,YAAA,KAAAC,cACvBE,aAAsBH,YAAA,KAAAC,cACtBG,iBAA0BJ,YAAA,KAAAC,cAC1BI,cAAuBL,YAAA,KAAAC,cACvBK,kBAA2BL,cAC3BM,iBAA0BN,cAC1BO,YAAqBP,gBAGrBQ,cACAd,MAAA,KAEA5B,SACA4B,OAAA,EACAC,UAAA,GAEA1D,gBACAyD,SACAC,UAAA,GAEAc,OACAf,MAAA,eACAC,UAAA,GAEApB,eAaAmB,OACAgB,YAEAf,UAAA,GAGAgB,eACAjB,OAAAH,GAAA,iBAAAA,GAAAoB,eAAApB,EAAAoB,cACAC,YAAA,GAEAC,cACAnB,MAAAH,GAAA,gBAAAA,GAAAsB,aAAAtB,EAAAsB,aAAApE,OACAkD,UAAA,EACAiB,YAAA,GAEAE,mBACApB,MAAAH,GAAA,gBAAAA,GAAAuB,kBAAAvB,EAAAuB,kBAAA,IACAF,YAAA,GAEAtB,MACAI,MAAAJ,EACAK,UAAA,EACAiB,YAAA,GAEAG,QACArB,MAAAH,GAAA,gBAAAA,GAAAwB,OAAAxB,EAAAwB,OAAA,KACAH,YAAA,EACAjB,UAAA,GAEAqB,QACAtB,MAAAH,GAAA,gBAAAA,GAAAyB,OAAAzB,EAAAyB,OAAA,KACAJ,YAAA,EACAjB,UAAA,GAEAsB,eACAvB,SAAAH,GAAA,iBAAAA,GAAA0B,gBAAA1B,EAAA0B,cACAL,YAAA,GAEAM,WACAxB,OAAA,EACAkB,YAAA,EACAjB,UAAA,GAEAwB,YACAzB,OAAA,EACAkB,YAAA,EACAjB,UAAA,GAEAyB,iBACA1B,OAAA,EACAkB,YAAA,EACAjB,UAAA,GAEA0B,SACA3B,SACAkB,YAAA,EACAjB,UAAA,GAEA2B,UACA5B,SACAkB,YAAA,EACAjB,UAAA,GAYArE,cACAoE,SACAkB,YAAA,EACAjB,UAAA,GAEA4B,aACA7B,MAAA,KACAkB,YAAA,EACAjB,UAAA,GAEA7D,cACA4D,MAAA,IACAkB,YAAA,EACAjB,UAAA,GAEAtE,UACAqE,MAAA,KACAkB,YAAA,EACAjB,UAAA,GAEA9B,gBACA6B,MAAA,GACAkB,YAAA,EACAjB,UAAA,GAEAjD,UACAgD,MAAAjD,OACAmE,YAAA,EACAjB,UAAA,GAEA5B,oBACA2B,MAAA,KACAkB,YAAA,EACAjB,UAAA,KAIAJ,IACArD,OAAAC,KAAAoD,GAAAhE,QAAA,SAAAiG,GACAvG,EAAAoD,eAAAmD,IAAAtF,OAAAuF,yBAAAxG,EAAAuG,GAAA7B,WACA1E,EAAAuG,GAAAjC,EAAAiC,MAIA,SAAAjC,EAAAmC,aAAArH,KAAAsG,gBACAtG,KAAA6G,UAAA7G,KAAA8G,WAAA9G,KAAA+G,iBAAA,IAKAlF,OAAAyF,eAAAtH,KAAA,WACAqF,MAAA,WACA,oBAAAzE,EAAAwF,MACA,SAAAvD,OAAA,iGAMAhB,OAAAyF,eAAAtH,KAAA,cACAqF,MAAA,SAAAlE,EAAA6F,GAOA,MANAnF,QAAAC,KAAAkF,GAAA9F,QAAA,SAAAqG,GACApG,EAAAoG,KACApG,EAAAoG,GAAAP,EAAAO,MAIApG,KAQAU,OAAAyF,eAAAtH,KAAA,oBACAqF,MAAA,SAAAmC,EAAAjD,GACA,IAAAA,GAAA,kBAAAA,GACA,SAAA1B,OAAA2E,EAAA,yDAQA3F,OAAAyF,eAAAtH,KAAA,YACAqF,MAAA,GAAAT,GAAA5E,MACAuG,YAAA,IAOA1E,OAAAyF,eAAAtH,KAAA,aACAqF,MAAA,SAAAoC,GACA,GACA5G,GAAAC,KAAAD,MACA6G,EAAA/D,MAAAgE,UAAAC,MAAArH,KAAAsH,UAAA,GACAC,EAAA9H,KAAAwF,eAAAiC,EAEA,SAAAK,EAAApC,aAAAoC,EAAApC,aAAA7E,EAAAb,KAAAmG,gBAIA2B,EAAAnC,UAAAzE,QAAA,SAAA6G,GACAC,QAAAC,SAAA,WACAF,EAAAG,GAAAC,MAAA/F,OAAAsF,YAKAtF,SAAA0F,EAAApC,cACAoC,EAAApC,YAAA7E,QAKAgB,OAAAyF,eAAAtH,KAAA,iBACAqF,MAAA,GAAAR,GAAA7E,MACAuG,YAAA,IAIArB,KAAAkD,SAAA,SAAAlD,EAAAkD,QAGApI,KAAAoG,MAAA,QAFApG,KAAAoI,UAKAzG,EAAA3B,KAAA4B,gBAEA5B,KAAAqI,SACArI,KAAAqI,SAAAC,aAAAtI,MACAuI,OAAA,UACAzE,OAAA,SAAA0E,EAAAC,EAAAC,EAAAC,GACA,GAAAC,IAAA,mDACA,+DACA,iDACA,iDAGA,OAAAD,IAAAC,EAAAC,QAAAL,WAVA,QAoBAxD,OAAA2C,UAAAS,QAAA,WACA,GAAAxH,GAAAZ,IAQA,OANAY,GAAA0B,SACA1B,EAAAkI,aAGAlI,EAAA0B,QAAAyC,EAAAnE,EAAAqE,KAAArE,EAAA8F,OAAA9F,EAAA+F,OAAA/F,EAAAgG,gBAEA,yDAAAiC,QAAA7I,KAAAoG,aACAxF,EAAA2E,WACA3E,EAAA2E,UAAA,KAAA3E,GAEAA,IAGAA,EAAAwF,MAAA,aACAxF,EAAA0B,QAAA8F,QAAAxH,EAAA0F,cAAA1F,EAAA6F,mBAEA7F,EAAA0B,QAAAyG,UAAA,WACAnI,EAAAwF,MAAA,YACAnC,EAAA1D,KAAAK,GACAqC,EAAA1C,KAAAK,GACAA,EAAAY,UAAA,aAEAZ,EAAA2E,WACA3E,EAAA2E,UAAA,KAAA3E,KAIAA,EAAA0B,QAAA0G,eAAA,SAAAtG,GACA,GAAAuG,GAAA,GAAApG,OAAA,gDAAAjC,EAAAqE,KAAA,IAEAgE,GAAAC,SAAAxG,EACA9B,EAAAwF,MAAA,QACAxF,EAAAY,UAAA,QAAAyH,GAEArI,EAAA2E,WACA3E,EAAA2E,UAAA0D,KAIArI,EAAA0B,QAAA6G,aAAA,WACAvI,EAAAwF,MAAA,UAEAxF,EAAA0F,eACA1F,EAAAkI,aAGAlI,EAAAiG,YACAjG,EAAA6C,SAAA,GAGA7C,EAAAY,UAAA,kBAGAZ,EAAA0B,QAAA8G,YAAA,WACA,GAAAC,GAAA,WAEAzI,EAAAmG,iBACA9C,EAAA1D,KAAAK,GAIAA,EAAAkG,aACAnG,EAAAJ,KAAAK,GACAqC,EAAA1C,KAAAK,IAIAA,EAAAY,UAAA,eAGAZ,GAAAwF,MAAA,YAEAxF,EAAAyB,SACAzB,EAAA0I,WAAA1I,EAAAyB,SAAA,SAAAkH,EAAAC,IAEAD,GAAAC,EAAAC,QACA7I,EAAAyB,SAAAD,OACAxB,EAAAY,UAAA,oBAGA6H,MAGAA,MAIArJ,OAQAgF,OAAA2C,UAAA+B,YAAA,SAAAC,GACA,mBAAAA,GACA3J,KAAAqC,SAAAsH,MACG,oBAAAA,GAaH,MADA3J,MAAAwB,UAAA,gBAAoCoI,SAAA,EAAAlH,MAAA,2BAAAiH,IACpC3J,IAZA,KAAA2J,EAAAE,SAAAF,EAAAE,OAAAC,KAAA,gBAAAH,GAAAE,OAAAC,IAQA,MALA9J,MAAAwB,UAAA,gBACAoI,SAAA,EACAlH,MAAA,0DAAAqH,KAAAC,UAAAL,KAGA3J,IAPAA,MAAAqC,SAAAsH,EAAAE,OAAAC,IAgBA,MAFA7F,GAAA1D,KAAAP,MACAA,KAAAwB,UAAA,gBAAkCoI,SAAA,IAClC5J,MAOAgF,OAAA2C,UAAAsC,cAAA,WAKA,MAJAjK,MAAAqC,SAAAD,OAEAoC,EAAAjE,KAAAP,MAEAA,MAOAgF,OAAA2C,UAAAuC,YAAA,WACA,MAAAlK,MAAAqC,UAYA2C,OAAA2C,UAAAwC,MAAA,SAAAC,GACA,GAKAC,GAJAzJ,EAAAZ,KACAkC,GACAkI,YAGAjI,EAAA,IAGA0F,WAAA,KACA,gBAAAA,WAAA,GACAwC,EAAAxC,UAAA,GACK,gBAAAA,WAAA,oBAAAA,WAAA,GACL3F,EAAAoI,UAAAzC,UAAA,GACK,kBAAAA,WAAA,KACL1F,EAAA0F,UAAA,KAGAA,UAAA,KACA,gBAAAA,WAAA,oBAAAA,WAAA,GACA3F,EAAAoI,UAAAzC,UAAA,GACK,kBAAAA,WAAA,KACL1F,EAAA0F,UAAA,KAGAA,UAAA,sBAAAA,WAAA,KACA1F,EAAA0F,UAAA,IAGA,gBAAAwC,IACAxI,OAAAC,KAAAuI,GAAAnJ,QAAA,SAAAa,GACAG,EAAAH,GAAAsI,EAAAtI,KAIA/B,KAAAmB,OAAc4C,WAAA,OAAApB,OAAA,UAAuC4H,KAAArI,IAAiBsI,UAAA,GAAgB,SAAA9H,EAAAD,GACtFC,GAQAP,KAAAO,GACA9B,EAAAY,UAAA,gBAAsCoI,SAAA,EAAAlH,QAAAE,YARtCH,EAAAoH,OAAAC,KACAlJ,EAAA8I,YAAAjH,EAAAoH,OAAAC,KAGA3H,KAAA,KAAAM,EAAAoH,YAeA7E,OAAA2C,UAAA8C,OAAA,SAAAtI,GACA,GACAvB,GAAAZ,KACAkC,GACAS,OAAA,SACAoB,WAAA,OACAvB,UAAAkC,EAAAgG,KACAH,QAaA,OAVAvK,MAAAmB,OAAc4C,WAAA,OAAApB,OAAA,UAAqCT,GAAYsI,UAAA,GAAgB,kBAAArI,GAAA,cAAAO,GAC/E,OAAAA,GACA9B,EAAAqJ,gBACA9H,EAAA,KAAAvB,IAGAuB,EAAAO,KAIA9B,GAUAoE,OAAA2C,UAAA2B,WAAA,SAAAK,EAAApF,GACA,GACArC,IACAqI,MACAZ,SAIA3J,MAAA2K,iBAAA,oBAAApG,GAEAvE,KAAAmB,OAAc4C,WAAA,OAAApB,OAAA,cAAyCT,GAAYsI,UAAA,GAAgB,SAAAjB,EAAA9G,GACnF,MAAA8G,GACAhF,EAAAgF,OAGAhF,GAAA,KAAA9B,EAAAoH,WAUA7E,OAAA2C,UAAAiD,OAAA,SAAArG,GACA,GAAA3D,GAAAZ,IAEAY,GAAA+J,iBAAA,gBAAApG,GAEA3D,EAAAO,OAAc4C,WAAA,OAAApB,OAAA,wBAAqD,SAAA4G,EAAA9G,GACnE,MAAA8G,GACAhF,EAAAgF,OAGAhF,GAAA,QAAAO,GAAAlE,EAAAiK,SAAApI,EAAAoH,OAAAiB,IAAArI,EAAAoH,OAAAkB,aAUA/F,OAAA2C,UAAAqD,YAAA,SAAA9F,EAAA/C,GACA,GAAAvB,GAAAZ,IAEAmC,IAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAtE,EAAA+J,iBAAA,qBAAAxI,GAEAvB,EAAAO,OAAc4C,WAAA,OAAApB,OAAA,kBAA6CuC,EAAA,SAAAqE,EAAAC,GAC3D,MAAAD,GACApH,EAAAoH,OAGApH,GAAA,KAAAqH,EAAAK,OAAAoB,SAYAjG,OAAA2C,UAAAuD,WAAA,SAAAC,EAAAjG,EAAA/C,GACA,GACAvB,GAAAZ,KACAoL,KACAC,GAAiBtH,WAAA,OAAApB,OAAA,aAajB,OAXAR,IAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAkG,EAAAb,KAAAY,EAEAvK,EAAAO,MAAAkK,EAAAD,EAAAlG,EAAA/C,GAAA,SAAAoH,EAAAC,GACArH,EAAAoH,IAAAnH,OAAAoH,EAAAK,UAGA7J,MAmLAgF,OAAA2C,UAAA2D,YAAA,SAAA7D,EAAAM,GACA,GAGAwD,GAFAC,EAAA3J,OAAAC,KAAA9B,KAAAwF,gBACAiG,QAAA1D,EAKA,IAFA/H,KAAA0L,UAEAF,EAAA3C,QAAApB,QACA,SAAA5E,OAAA,IAAA4E,EAAA,yCAAA+D,EAAAG,WAGA,iBAAAF,EACA,SAAA5I,OAAA,qDAAA4I,EAKA,OAFAF,GAAA7G,EAAAgG,KACA1K,KAAAwF,eAAAiC,GAAA9B,UAAAiG,MAA6CvL,GAAAkL,EAAArD,GAAAH,IAC7CwD,GAWAvG,OAAA2C,UAAAkE,iBAAA,SAAA3G,EAAA/C,GACAA,GAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAlF,KAAA2K,iBAAA,0BAAAxI,GAEAnC,KAAAmB,OAAc4C,WAAA,QAAApB,OAAA,kBAA8CuC,EAAA,SAAAqE,EAAAC,GAC5D,MAAAD,GACApH,EAAAoH,OAGApH,GAAA,KAAAqH,EAAAK,OAAAoB,SAYAjG,OAAA2C,UAAAmE,cAAA,SAAAC,EAAA7G,EAAA/C,GACA,GACA6J,GACAzB,CAEApI,KACA,IAAA0F,UAAAnG,QACAS,EAAA0F,UAAA,GACA3C,EAAA,KACA6G,EAAA,OAEA5J,EAAA0F,UAAA,GACA,gBAAAA,WAAA,IACA3C,EAAA2C,UAAA,GACAkE,EAAA,OAEAA,EAAAlE,UAAA,GACA3C,EAAA,QAKA8G,EAAA,SAAAzC,EAAAC,GACA,MAAAD,GACApH,EAAAoH,OAGApH,GAAA,KAAA4J,EAAAvC,EAAAK,OAAAoB,MAAAzB,EAAAK,UAGA7J,KAAA2K,iBAAA,uBAAAxI,GAEAoI,EAAAwB,GAAsBxB,MAAO0B,UAAAF,OAC7B/L,KAAAmB,OAAc4C,WAAA,QAAApB,OAAAoJ,EAAA,2BAAqExB,EAAArF,EAAA8G,IAWnFhH,OAAA2C,UAAAuE,sBAAA,SAAAC,EAAA/K,GAGA,GAFApB,KAAA0L,WAEAtK,EAAA,CACA,IAAApB,KAAAwG,aACA,SAAA3D,OAAA,oEAGAzB,GAAApB,KAAAwG,aAGA,mBAAApF,IAAA,gBAAA+K,GACA,SAAAtJ,OAAA,wDAWA,OARA7C,MAAAoF,YAAAhE,KACApB,KAAAoF,YAAAhE,OAGApB,KAAAoF,YAAAhE,GAAA+K,KACAnM,KAAAoF,YAAAhE,GAAA+K,GAAA,GAAAxH,GAAA3E,KAAAmM,EAAA/K,IAGApB,KAAAoF,YAAAhE,GAAA+K,IAQAnH,OAAA2C,UAAAyE,WAAA,WAEA,MADApM,MAAAiB,gBACAjB,MAUAgF,OAAA2C,UAAA0E,gBAAA,WACA,GAEAjL,GACA8D,EACA/C,EAEAhB,EALAmL,EAAA,MAIA5E,EAAA/D,MAAAgE,UAAAC,MAAArH,KAAAsH,UAiBA,IAdAH,EAAAxG,QAAA,SAAAqL,GACA,aAAAA,IACA,aACAnL,EAAAmL,CACA,MACA,cACArH,EAAAqH,CACA,MACA,gBACApK,EAAAoK,MAKAnL,EAAA,CACA,IAAApB,KAAAwG,aACA,SAAA3D,OAAA,yCAGAzB,GAAApB,KAAAwG,aAGAxG,KAAA2K,iBAAA,yBAAAxI,GAEA+C,KAAAsH,OACAF,EAAApH,EAAAsH,MAGArL,GAAWoJ,MAAOiC,KAAAF,IAElBpH,KAAAuH,OACAtL,EAAAoJ,KAAAkC,KAAAvH,EAAAuH,MAGAvH,KAAAwH,OACAvL,EAAAoJ,KAAAmC,KAAAxH,EAAAwH,MAGA1M,KAAAmB,OAAcC,QAAA2C,WAAA,OAAApB,OAAA,mBAA4DxB,EAAA+D,EAAA,SAAAqE,EAAAC,GAC1E,MAAAD,GACApH,EAAAoH,OAGApH,GAAA,KAAAqH,EAAAK,OAAAzE,gBAUAJ,OAAA2C,UAAAgF,YAAA,SAAAzH,EAAA/C,GACAA,GAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAlF,KAAA2K,iBAAA,qBAAAxI,GAEAnC,KAAAmB,OAAc4C,WAAA,OAAApB,OAAA,kBAA8CuC,EAAA,SAAAqE,EAAAC,GAC5DrH,EAAAoH,IAAAnH,OAAAoH,EAAAK,OAAA+C,YAOA5H,OAAA2C,UAAAmB,WAAA,WACA,GAAAqD,EAEAnM,MAAAoG,MAAA,eACApG,KAAAsC,QAAAuK,QACA7M,KAAAsC,QAAA,IAEA,KAAA6J,IAAAnM,MAAAoF,YACApF,KAAAoF,YAAApB,eAAAmI,UACAnM,MAAAoF,YAAA+G,IAWAnH,OAAA2C,UAAAmF,cAAA,SAAA5H,EAAA/C,GACAA,GAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAlF,KAAA2K,iBAAA,uBAAAxI,GAEAnC,KAAAmB,OAAc4C,WAAA,OAAApB,OAAA,iBAA6CuC,EAAA,SAAAqE,EAAAC,GAC3D,MAAAD,GACApH,EAAAoH,OAGApH,GAAA,KAAAqH,EAAAK,OAAAkD,eAYA/H,OAAA2C,UAAAqF,aAAA,WACA,GACA5L,GACA8D,EACA/C,CAgBA,IAdAwB,MAAAgE,UAAAC,MAAArH,KAAAsH,WAAA3G,QAAA,SAAAqL,GACA,aAAAA,IACA,aACAnL,EAAAmL,CACA,MACA,cACArH,EAAAqH,CACA,MACA,gBACApK,EAAAoK,MAKAnL,EAAA,CACA,IAAApB,KAAAwG,aACA,SAAA3D,OAAA,sCAEAzB,GAAApB,KAAAwG,aAKA,MAFAxG,MAAAmB,OAAcC,QAAA2C,WAAA,QAAApB,OAAA,mBAA+DuC,EAAA/C,GAE7EnC,MAUAgF,OAAA2C,UAAAsF,eAAA,WACA,GACA7L,GACA8D,EACA/C,CAgBA,IAdAwB,MAAAgE,UAAAC,MAAArH,KAAAsH,WAAA3G,QAAA,SAAAqL,GACA,aAAAA,IACA,aACAnL,EAAAmL,CACA,MACA,cACArH,EAAAqH,CACA,MACA,gBACApK,EAAAoK,MAKAnL,EAAA,CACA,IAAApB,KAAAwG,aACA,SAAA3D,OAAA,wCAEAzB,GAAApB,KAAAwG,aAGAxG,KAAA2K,iBAAA,wBAAAxI,GACAnC,KAAAmB,OAAcC,QAAA2C,WAAA,QAAApB,OAAA,qBAAiEuC,EAAA/C,IAY/E6C,OAAA2C,UAAAuF,eAAA,WACA,GACA9L,GACA+L,EACAjI,EACA/C,CAmBA,IAjBAwB,MAAAgE,UAAAC,MAAArH,KAAAsH,WAAA3G,QAAA,SAAAqL,GACA,aAAAA,IACA,aACAnL,EAAAmL,CACA,MACA,eACAY,EAAAZ,CACA,MACA,cACArH,EAAAqH,CACA,MACA,gBACApK,EAAAoK,MAKAnL,EAAA,CACA,IAAApB,KAAAwG,aACA,SAAA3D,OAAA,wCAEAzB,GAAApB,KAAAwG,aAGA,GAAApE,SAAA+K,EACA,SAAAtK,OAAA,uDAKA,OAFA7C,MAAAmB,OAAcC,QAAA2C,WAAA,QAAApB,OAAA,mBAAgE4H,MAAQ4C,gBAA4BjI,EAAA/C,GAElHnC,MAQAgF,OAAA2C,UAAA9G,IAAA,SAAAqE,EAAA/C,GACAA,GAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAlF,KAAA2K,iBAAA,aAAAxI,GAEAnC,KAAAmB,OAAc4C,WAAA,OAAApB,OAAA,UAAsCuC,EAAA,SAAAqE,EAAAC,GACpDrH,EAAAoH,EAAAC,KAAAK,OAAAhJ,QAiBAmE,OAAA2C,UAAAxG,MAAA,SAAAkK,EAAAlK,EAAA+D,EAAA/C,GACA,GACAiL,GACAC,GACA1K,OAAA0I,EAAA1I,OACAoB,WAAAsH,EAAAtH,WACAkD,SAAAjH,KAAAiH,UAEArG,EAAAZ,IASA,IAPAA,KAAA0L,UAEAvJ,GAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAA,EAAA,CACA,GAAAA,EAAAsF,YAAA,eAAA5J,EAAAwF,MACA,MAAAxF,EAGAsE,GAAAoI,UACAD,EAAAC,QAAApI,EAAAoI,SAGApI,EAAA+B,UACApF,OAAAC,KAAAoD,EAAA+B,UAAA/F,QAAA,SAAAqM,GACAF,EAAApG,SAAAsG,GAAArI,EAAA+B,SAAAsG,KAKA,IAAApM,GAAA,gBAAAA,IAAAwC,MAAAC,QAAAzC,GACA,SAAA0B,OAAA,4BAAA1B,EAGAA,GAAA8F,UACApF,OAAAC,KAAAX,EAAA8F,UAAA/F,QAAA,SAAAqM,GACAF,EAAApG,SAAAsG,GAAApM,EAAA8F,SAAAsG,IAIA,KAAAH,IAAAjM,GACA,aAAAiM,GAAAjM,EAAA6C,eAAAoJ,KACAC,EAAAD,GAAAjM,EAAAiM,GAyCA,OArCAC,GAAAzM,EAAA4M,WAAAH,EAAArN,KAAAgH,SAMA5E,SAAAxB,EAAAyB,UAAA,SAAAgL,EAAAtJ,YAAA,eAAAsJ,EAAA1K,SACA0K,EAAAvD,IAAAlJ,EAAAyB,UAGAgJ,EAAAc,aACAkB,EAAAlB,WAAAd,EAAAc,YAGAd,EAAAjK,QACAiM,EAAAjM,MAAAiK,EAAAjK,OAGAiM,EAAA7K,YACA6K,EAAA7K,UAAAkC,EAAAgG,MAGA,cAAA9J,EAAAwF,OAAAlB,KAAAsF,YAAA,EACA,cAAA5J,EAAAwF,MACAnE,EAAA1B,KAAAP,KAAAqN,EAAAlL,GACKA,GACLA,EAAA,GAAAU,OAAA,oFAAAkH,KAAAC,UAAAqD,MAEGzM,EAAA6C,UAAA,6BAAAoF,QAAAjI,EAAAwF,eACHzF,EAAAJ,KAAAP,KAAAqN,EAAAlL,GAEAvB,EAAAsG,cAAAtG,EAAAsG,YAAAmG,KACAzM,EAAAK,aAAA2K,MAA8BvK,GAAAP,KAAAD,MAAAM,MAAAkM,EAAAlL,OAC9BvB,EAAAY,UAAA,oBAA0CL,MAAAkM,EAAAlL,SAI1CvB,GASAoE,OAAA2C,UAAA8F,mBAAA,SAAAhG,GACA,GACA+D,GAAA3J,OAAAC,KAAA9B,KAAAwF,gBACA5E,EAAAZ,IAEA,IAAAyH,EAAA,CACA,GAAA+D,EAAA3C,QAAApB,QACA,SAAA5E,OAAA,IAAA4E,EAAA,yCAAA+D,EAAAG,WAGA3L,MAAAwF,eAAAiC,GAAA9B,iBAEA6F,GAAAtK,QAAA,SAAAwM,GACA9M,EAAA4E,eAAAkI,GAAA/H,cAIA,OAAA3F,OAUAgF,OAAA2C,UAAAgG,eAAA,SAAAlG,EAAA8D,GACA,GACAC,GAAA3J,OAAAC,KAAA9B,KAAAwF,gBACA5E,EAAAZ,IAEA,IAAAwL,EAAA3C,QAAApB,QACA,SAAA5E,OAAA,IAAA4E,EAAA,yCAAA+D,EAAAG,WASA,OANA3L,MAAAwF,eAAAiC,GAAA9B,UAAAzE,QAAA,SAAA6G,EAAA3G,GACA2G,EAAA1H,KAAAkL,GACA3K,EAAA4E,eAAAiC,GAAA9B,UAAArE,OAAAF,EAAA,KAIApB,MAOAgF,OAAA2C,UAAAiG,YAAA,WAMA,MALA,YAAA5N,KAAAoG,OAAApG,KAAA8G,aACAnG,EAAAJ,KAAAP,MACAiD,EAAA1C,KAAAP,OAGAA,MASAgF,OAAA2C,UAAAkG,gBAAA,SAAAzM,GACA,mBAAAA,GACA,SAAAyB,OAAA,2BAAAzB,EAAA,gCAGA,QAAAA,EAAAM,OACA,SAAAmB,OAAA,iDAKA,OAFA7C,MAAAwG,aAAApF,EAEApB,MAYAgF,OAAA2C,UAAAmG,WAAA,SAAA3C,EAAA4C,GACA,GAAAnN,GAAAZ,IAEA,oBAAAmL,IAAAxH,MAAAC,QAAAuH,GACA,SAAAtI,OAAA,+CAAAsI,GAWA,OARA4C,GACAnN,EAAAoG,QAAAmE,EAEAtJ,OAAAC,KAAAqJ,GAAAjK,QAAA,SAAAa,GACAnB,EAAAoG,QAAAjF,GAAAoJ,EAAApJ,KAIAnB,GAMAoE,OAAA2C,UAAAqG,aAAA,WAIA,MAHA,YAAAhO,KAAAoG,OAAApG,KAAA6G,YACA7G,KAAAyD,SAAA,GAEAzD,MAMAgF,OAAA2C,UAAAsG,YAAA,WAKA,MAJA,YAAAjO,KAAAoG,OAAApG,KAAA6G,YACA7G,KAAAyD,SAAA,GAGAzD,OF8DM,SAASL,EAAQD,GG7+CvB,QAAAwO,GAAAC,EAAA9N,EAAA8K,GAEA,IAAA9K,EACA,SAAAwC,OAAA,sCA8BA,IA1BAhB,OAAAsD,iBAAAnF,MAEAoO,QACA/I,MAAA8I,EAAAC,QAEAD,gBACA9I,MAAA8I,GAIA9N,IACAgF,MAAAhF,EACAkG,YAAA,GAEA4E,SACA9F,SACAC,UAAA,EACAiB,YAAA,KAIA4E,GACAnL,KAAAqO,WAAAlD,GAAA,GAIAgD,EAAAC,OAAA/F,SACA,MAAA8F,GAAAC,OAAA/F,SAAAC,aAAAtI,MACAuI,OAAA,UACAzE,OAAA,SAAA0E,EAAAC,EAAAC,EAAAC,GACA,GAAAC,IAAA,kBAEA,OAAAD,IAAAC,EAAAC,QAAAL,WAaA0F,EAAAvG,UAAA0G,WAAA,SAAAjD,GAEA,MADApL,MAAAmL,QAAAC,EACApL,MAQAkO,EAAAvG,UAAA2G,UAAA,WACA,GACAlD,KAQA,OANApL,MAAAK,KACA+K,EAAAN,IAAA9K,KAAAK,IAGA+K,EAAAb,KAAAvK,KAAAmL,QAEAC,GASA8C,EAAAvG,UAAAuG,UAAA,SAAAhJ,EAAA/C,GACA,GACAvB,GAAAZ,IAEAkF,IAAA9C,SAAAD,GAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAtE,EAAAwN,OAAAjN,MAAAnB,KAAAmO,eAAAI,eAAAvO,KAAAwO,mBAAgF1D,IAAA9K,KAAAK,IAAa6E,EAAA,SAAAxC,EAAA8G,GAC7F,MAAA9G,KACAP,KAAAO,QAGAP,GACAA,EAAA,KAAAqH,EAAAK,OAAAiB,SAaAoD,EAAAvG,UAAA8G,OAAA,SAAAtD,EAAAjG,EAAA/C,GACA,GACAiJ,MACAxK,EAAAZ,IAEA,oBAAAmL,GACA,SAAAtI,OAAA,uCAuBA,OApBAqC,IAAA9C,SAAAD,GAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAkG,EAAAN,IAAAlK,EAAAP,GACA+K,EAAAb,KAAAY,EAEAvK,EAAAwN,OAAAjN,MAAAnB,KAAAmO,eAAAI,eAAAvO,KAAA0O,kBAAAtD,EAAAlG,EAAA,SAAAxC,EAAAD,GACA,MAAAC,KACAP,KAAAO,IAGA9B,EAAAyN,WAAA5L,EAAAoH,OAAAkB,cAEA5I,GACAA,EAAA,KAAAvB,OAIAZ,MAGAL,EAAAD,QAAAwO,GHm/CM,SAASvO,EAAQD,EAASQ,GIhoDhC,QAAAyO,GAAA1J,EAAA2J,EAAAC,GACA,GAAAjO,GAAAZ,IACAA,MAAA8O,UAAA,mBAAAA,qBAAA5O,GAAA,cAAA6O,GAAA,GAAAlM,OAAA,gCAAAkM,GAAAC,KAAA,mBAAAD,MACA/O,KAAAiF,OACAjF,KAAA4O,OACA5O,KAAA6O,MACA7O,KAAAiP,OAAA,KACAjP,KAAAkP,cAAA,EACAlP,KAAAmP,UAAA,EACAnP,KAAAoP,QAAA,KASApP,KAAA2F,WACAjD,SACA0F,WACAU,cACAO,cAWArJ,KAAAoI,QAAA,SAAA9B,EAAAG,GACA,GACA4I,IAAArP,KAAA6O,IAAA,kBAAA7O,KAAAiF,KAAA,IAAAjF,KAAA4O,KACA1J,EAAA,mBAAAoK,QAAAlN,QAA6DmN,mBAAA,EAE7DF,KAAArP,KAAAoP,UACAxO,EAAAsO,cAAA,EACAlP,KAAAoP,QAAAC,GAGArP,KAAAiP,OAAA,GAAAjP,MAAA8O,UAAAO,EAAAnK,GAEAlF,KAAAiP,OAAAO,OAAA,WACA5O,EAAAsO,aACAO,EAAA7O,EAAA+E,UAAA,aAGA8J,EAAA7O,EAAA+E,UAAA,WAEA/E,EAAAsO,cAAA,GAGAlP,KAAAiP,OAAAS,QAAA,SAAAV,EAAApM,GACA,MAAAoM,EACAS,EAAA7O,EAAA+E,UAAA,cAGAgK,EAAApP,KAAAK,EAAA0F,EAAAG,EAAA7D,IAIA5C,KAAAiP,OAAAW,QAAA,SAAAlN,GACAiN,EAAApP,KAAAK,EAAA0F,EAAAG,EAAA/D,IAGA1C,KAAAiP,OAAAY,UAAA,SAAAC,GACA,GAAA1E,GAAArB,KAAAgG,MAAAD,EAAA1E,MAAA0E,EAEA1E,GAAA4E,MAAApP,EAAA+E,UAAAyF,EAAA4E,OACAP,EAAA7O,EAAA+E,UAAAyF,EAAA4E,KAAA5E,KAUApL,KAAA+I,UAAA,SAAAxE,GACAvE,KAAA2F,UAAAyC,QAAAwD,MACA1D,GAAA3D,EACA0L,MAAA,KAQAjQ,KAAAgJ,eAAA,SAAAzE,GACAvE,KAAA2F,UAAAjD,MAAAkJ,MACA1D,GAAA3D,EACA0L,MAAA,KAQAjQ,KAAAmJ,aAAA,SAAA5E,GACAvE,KAAA2F,UAAAmD,WAAA8C,MACA1D,GAAA3D,EACA0L,MAAA,KAQAjQ,KAAAoJ,YAAA,SAAA7E,GACAvE,KAAA2F,UAAA0D,UAAAuC,MACA1D,GAAA3D,EACA0L,MAAA,KAWAjQ,KAAAuC,KAAA,SAAA4B,EAAAI,GACAvE,KAAA2F,UAAAxB,KACAnE,KAAA2F,UAAAxB,OAGAnE,KAAA2F,UAAAxB,GAAAyH,MACA1D,GAAA3D,EACA0L,MAAA,KAUAjQ,KAAAkQ,GAAA,SAAA/L,EAAAI,GACAvE,KAAA2F,UAAAxB,KACAnE,KAAA2F,UAAAxB,OAGAnE,KAAA2F,UAAAxB,GAAAyH,MACA1D,GAAA3D,EACA0L,MAAA,KAUAjQ,KAAAmQ,IAAA,SAAAhM,EAAAI,GACA,GAAAnD,EAEApB,MAAA2F,UAAAxB,KACA/C,EAAApB,KAAA2F,UAAAxB,GAAAiM,UAAA,SAAArI,GACA,MAAAA,GAAAG,KAAA3D,IAGAnD,SACA,IAAApB,KAAA2F,UAAAxB,GAAAzC,SAAA,4CAAAmH,QAAA1E,cACAnE,MAAA2F,UAAAxB,GAGAnE,KAAA2F,UAAAxB,GAAA7C,OAAAF,EAAA,MAYApB,KAAAgD,KAAA,SAAA8M,GACA9P,KAAAiP,QAAAjP,KAAAiP,OAAAoB,aAAArQ,KAAAiP,OAAAqB,MACAtQ,KAAAiP,OAAAjM,KAAA+G,KAAAC,UAAA8F,KAOA9P,KAAA6M,MAAA,WACA7M,KAAA2F,WACAjD,SACA0F,WACAU,cACAO,cAGArJ,KAAAkP,cAAA,EACAlP,KAAAiP,OAAApC,QACA7M,KAAAiP,OAAA,MAmBA,QAAAQ,GAAA9J,EAAAxB,EAAA2L,GACA,GACA/P,GACA2B,EAAAiE,EAAAxB,GAAAzC,MAEA,KAAA3B,EAAA,EAAaA,EAAA2B,IAAY3B,EACzB4F,EAAAxB,GAAApE,GAAAmI,GAAA4H,GAEAnK,EAAAxB,GAAApE,GAAAkQ,OACAtK,EAAAxB,GAAAzC,OAAA,GACAiE,EAAAxB,GAAA7C,OAAAvB,EAAA,KACAA,IACA2B,SAGAiE,GAAAxB,IAaA,QAAAwL,GAAArJ,EAAAG,EAAA7D,GACA,GAAAhC,GAAAZ,IAEAsG,KAAA1F,EAAAuO,WACAvO,EAAAuO,UAAA,EACAnN,WAAA,WACApB,EAAAuO,UAAA,EACAvO,EAAAwH,QAAA9B,EAAAG,IACKA,IAGLgJ,EAAA7O,EAAA+E,UAAA,QAAA/C,GAGAjD,EAAAD,QAAAiP,GJuoDM,SAAShP,EAAQD,EAASQ,GK14DhC,QAAA4E,GAAAqJ,EAAA9N,EAAA8K,GAgBA,GAdA+C,EAAA3N,KAAAP,KAAAmO,EAAA9N,EAAA8K,GAGAtJ,OAAAsD,iBAAAnF,MAEAwO,kBACAnJ,MAAA,cAEAqJ,kBACArJ,MAAA,gBAKA8I,EAAAC,OAAA/F,SACA,MAAA8F,GAAAC,OAAA/F,SAAAC,aAAAtI,MACAuI,OAAA,UACAzE,OAAA,SAAA0E,EAAAC,EAAAC,EAAAC,GACA,GAAAC,IAAA,wBAEA,OAAAD,IAAAC,EAAAC,QAAAL,WA/BA,GACA0F,GAAAhO,EAAA,EAoCA4E,GAAA6C,UAAA9F,OAAA0O,OAAArC,EAAAvG,WACA6I,aACAnL,MAAAP,KAUAA,EAAA6C,UAAA8I,YAAA,SAAAC,GACA,IAAA/M,MAAAC,QAAA8M,IAAA,gBAAAA,GAAA,GACA,SAAA7N,OAAA,qDAKA,OAFA7C,MAAAmL,QAAAuF,aAEA1Q,MASA8E,EAAA6C,UAAAgJ,WAAA,SAAAC,GACA,mBAAAA,GACA,SAAA/N,OAAA,yCAWA,OARA7C,MAAAmL,QAAAuF,aACA1Q,KAAAmL,QAAAuF,eAGA1Q,KAAAmL,QAAAuF,WAAA7H,QAAA+H,SACA5Q,KAAAmL,QAAAuF,WAAA9E,KAAAgF,GAGA5Q,MAcA8E,EAAA6C,UAAAkJ,KAAA,SAAA3L,EAAA/C,GACA,GACAiJ,GAAApL,KAAAsO,YACA1N,EAAAZ,IAWA,OATAkF,IAAA9C,SAAAD,GAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAtE,EAAAwN,OAAAjN,MAAAnB,KAAAmO,eAAAI,eAAA,uBAAAnD,EAAAlG,EAAA/C,GAAA,SAAAO,GACAP,EAAAO,IAAAN,OAAAxB,KAGAA,GAcAkE,EAAA6C,UAAAmJ,eAAA,SAAA5L,EAAA/C,GACA,GACAiJ,GAAApL,KAAAsO,YACA1N,EAAAZ,IAWA,OATAkF,IAAA9C,SAAAD,GAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAtE,EAAAwN,OAAAjN,MAAAnB,KAAAmO,eAAAI,eAAA,wBAAAnD,EAAAlG,EAAA/C,GAAA,SAAAO,GACAP,EAAAO,IAAAN,OAAAxB,KAGAA,GAQAkE,EAAA6C,UAAA2G,UAAA,WACA,OAAUxD,IAAA9K,KAAAK,GAAAkK,KAAAvK,KAAAmL,UAQVrG,EAAA6C,UAAAoJ,YAAA,WACA,MAAA/Q,MAAAmL,QAAAuF,YAGA/Q,EAAAD,QAAAoF,GL05DM,SAASnF,EAAQD,EAASQ,GMxiEhC,QAAA8Q,GAAAC,EAAAC,GACA,GAAAnR,GAAAmR,GAAA,EACAC,EAAAC,CACA,OAAAD,GAAAF,EAAAlR,MAAAoR,EAAAF,EAAAlR,MACAoR,EAAAF,EAAAlR,MAAAoR,EAAAF,EAAAlR,MAAA,IACAoR,EAAAF,EAAAlR,MAAAoR,EAAAF,EAAAlR,MAAA,IACAoR,EAAAF,EAAAlR,MAAAoR,EAAAF,EAAAlR,MAAA,IACAoR,EAAAF,EAAAlR,MAAAoR,EAAAF,EAAAlR,MAAA,IACAoR,EAAAF,EAAAlR,MAAAoR,EAAAF,EAAAlR,MACAoR,EAAAF,EAAAlR,MAAAoR,EAAAF,EAAAlR,MACAoR,EAAAF,EAAAlR,MAAAoR,EAAAF,EAAAlR,MAwBA,QAAAsR,GAAAnM,EAAA+L,EAAAC,GACA,GAAAnR,GAAAkR,GAAAC,GAAA,EACAI,EAAAL,KAEA/L,QAEA,IAAAqM,GAAAnP,SAAA8C,EAAAqM,SAAArM,EAAAqM,SAAAC,EAMAC,EAAArP,SAAA8C,EAAAuM,MAAAvM,EAAAuM,OAAA,GAAA3Q,OAAA4Q,UAIAC,EAAAvP,SAAA8C,EAAAyM,MAAAzM,EAAAyM,MAAAC,EAAA,EAGAC,EAAAJ,EAAAK,GAAAH,EAAAC,GAAA,GAcA,IAXAC,EAAA,GAAAzP,SAAA8C,EAAAqM,WACAA,IAAA,UAKAM,EAAA,GAAAJ,EAAAK,IAAA1P,SAAA8C,EAAAyM,QACAA,EAAA,GAIAA,GAAA,IACA,SAAA9O,OAAA,kDAGAiP,GAAAL,EACAG,EAAAD,EACAH,EAAAD,EAGAE,GAAA,WAGA,IAAAM,IAAA,eAAAN,GAAAE,GAAA,UACAL,GAAAvR,KAAAgS,IAAA,OACAT,EAAAvR,KAAAgS,IAAA,OACAT,EAAAvR,KAAAgS,IAAA,MACAT,EAAAvR,KAAA,IAAAgS,CAGA,IAAAC,GAAAP,EAAA,wBACAH,GAAAvR,KAAAiS,IAAA,MACAV,EAAAvR,KAAA,IAAAiS,EAGAV,EAAAvR,KAAAiS,IAAA,SACAV,EAAAvR,KAAAiS,IAAA,OAGAV,EAAAvR,KAAAwR,IAAA,MAGAD,EAAAvR,KAAA,IAAAwR,CAIA,QADAU,GAAA/M,EAAA+M,MAAAC,EACAC,EAAA,EAAiBA,EAAA,IAAOA,EACxBb,EAAAvR,EAAAoS,GAAAF,EAAAE,EAGA,OAAAlB,KAAAD,EAAAM,GAMA,QAAA5G,GAAAxF,EAAA+L,EAAAC,GAEA,GAAAnR,GAAAkR,GAAAC,GAAA,CAEA,sBACAD,EAAA,UAAA/L,EAAA,GAAAvB,OAAA,SACAuB,EAAA,MAEAA,OAEA,IAAAkN,GAAAlN,EAAAmN,SAAAnN,EAAAoN,KAAAC,IAOA,IAJAH,EAAA,MAAAA,EAAA,MACAA,EAAA,MAAAA,EAAA,OAGAnB,EACA,OAAAuB,GAAA,EAAoBA,EAAA,KAASA,EAC7BvB,EAAAlR,EAAAyS,GAAAJ,EAAAI,EAIA,OAAAvB,IAAAD,EAAAoB,GA5IA,OALAG,GAAArS,EAAA,IAGAkR,KACAqB,KACA1S,EAAA,EAAeA,EAAA,MAASA,EACxBqR,EAAArR,MAAA,KAAA4L,SAAA,IAAA+G,OAAA,GACAD,EAAArB,EAAArR,KAsBA,IAAA4S,GAAAJ,IAGAL,GACA,EAAAS,EAAA,GACAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,GAAAA,EAAA,IAIAnB,EAAA,OAAAmB,EAAA,MAAAA,EAAA,IAGAb,EAAA,EAAAF,EAAA,EA4GAlN,EAAAgG,CACAhG,GAAA2M,KACA3M,EAAAgG,KAEA/K,EAAAD,QAAAgF,GN4jEM,SAAS/E,EAAQD,EAASQ,GOlsEhC,QAAAyE,GAAAyJ,EAAAjC,EAAA/K,GACA,IAAAA,IAAA+K,EACA,SAAAtJ,OAAA,wFAoCA,OAjCAhB,QAAAsD,iBAAAnF,MAEAmM,YACA9G,MAAA8G,EACA5F,YAAA,GAEAnF,OACAiE,MAAAjE,EACAmF,YAAA,GAEA6H,QACA/I,MAAA+I,EACA7H,YAAA,GAGAS,SACA3B,MAAA0E,KAAAgG,MAAAhG,KAAAC,UAAAoE,EAAApH,UACAT,YAAA,EACAjB,UAAA,KAIAzD,OAAAyF,eAAAtH,KAAA,kBACAqF,MAAA,SAAAtB,EAAApB,GACA,OACAoB,aACApB,SACAwJ,WAAAnM,KAAAmM,WACA/K,MAAApB,KAAAoB,UAKApB,KAAAoO,OAAA/F,SACArI,KAAAoO,OAAA/F,SAAAC,aAAAtI,MACAuI,OAAA,UACAzE,OAAA,SAAA0E,EAAAC,EAAAC,EAAAC,GACA,GAAAiK,IAAA,0CAEA,OAAAjK,IAAAiK,EAAA/J,QAAAL,WAKAxI,KAvEA,GACA6S,GAAA3S,EAAA,GACA4S,EAAA5S,EAAA,GACA6S,EAAA7S,EAAA,GACA8S,EAAA9S,EAAA,GAiFAyE,GAAAgD,UAAAsL,eAAA,SAAAC,EAAAhO,EAAA/C,GACA,GACAhB,GACAP,EAAAZ,IAEAmC,IAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAtE,EAAAwN,OAAAzD,iBAAA,sCAAAxI,GAEAhB,EAAAP,EAAAwN,OAAAZ,YAAkCjD,KAAA2I,GAAclT,KAAAgH,SAEhDpG,EAAAwN,OAAAjN,MAAAnB,KAAAuO,eAAA,iBAAApN,EAAA+D,EAAA,SAAAxC,EAAAmH,GACA,GACApH,GACA0Q,IAEA,OAAAzQ,GACAP,EAAAO,IAGAmH,SAAAoB,KAAA/J,QAAA,SAAAkS,GACA,GAAAC,GAAA,GAAAR,GAAAjS,EAAAwS,EAAAtI,IAAAsI,EAAArI,QAEAsI,GAAAC,QAAAF,EAAAG,SAEAJ,EAAAvH,KAAAyH,KAGA5Q,GACA+Q,MAAA3J,SAAA2J,MACAL,aAGAtJ,SAAA4J,eACAhR,EAAAgR,aAAA5J,SAAA4J,kBAGAtR,GAAA,KAAAM,OAeAkC,EAAAgD,UAAA+L,MAAA,SAAAR,EAAAhO,EAAA/C,GACA,GACAhB,EAEAgB,IAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAlF,KAAAoO,OAAAzD,iBAAA,6BAAAxI,GAEAhB,EAAAnB,KAAAoO,OAAAZ,YAAkCjD,KAAA2I,GAAclT,KAAAgH,SAEhDhH,KAAAoO,OAAAjN,MAAAnB,KAAAuO,eAAA,gBAAApN,EAAA+D,EAAA,SAAAxC,EAAAmH,GACA1H,EAAAO,EAAAmH,YAAA6J,UAaA/O,EAAAgD,UAAA4I,OAAA,SAAArL,EAAA/C,GACA,GAAAiJ,KAUA,OARAjJ,IAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAkG,EAAApL,KAAAoO,OAAAZ,WAAApC,EAAApL,KAAAgH,SACAhH,KAAAoO,OAAAjN,MAAAnB,KAAAuO,eAAA,4BAAAnD,EAAAlG,EAAA/C,GAEAnC,MAmBA2E,EAAAgD,UAAAgM,eAAA,SAAAtT,EAAAuT,EAAA1O,EAAA/C,GACA,GACAvB,GAAAZ,KACAoL,KACAzI,EAAA,QA0CA,OAxCAtC,IAAA,gBAAAA,KACA8B,EAAA+C,EACAA,EAAA0O,EACAA,EAAAvT,EACAA,EAAA,MAGA8B,GAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGA0O,YAAAf,GACAzH,EAAAwI,EAAAtF,YAEAlD,EAAAb,KAAAqJ,EAGA1O,IACAvC,EAAAuC,EAAA2O,cAAA,4BAGAxT,IACA+K,EAAAN,IAAAzK,GAGA+K,EAAAxK,EAAAwN,OAAAZ,WAAApC,EAAAxK,EAAAoG,SAEApG,EAAAwN,OAAAjN,MAAAnB,KAAAuO,eAAA,QAAA5L,GAAAyI,EAAAlG,EAAA/C,GAAA,SAAAoH,EAAAC,GACA,GAAA4J,EAEA,OAAA7J,GACApH,EAAAoH,IAGA6J,EAAA,GAAAP,GAAAjS,EAAA4I,EAAAK,OAAAiB,IAAAtB,EAAAK,OAAAkB,SACAqI,EAAAE,QAAA9J,EAAAK,OAAA0J,aACApR,GAAA,KAAAiR,MAGApT,MAmBA2E,EAAAgD,UAAAmM,eAAA,SAAAvH,EAAArH,EAAA/C,GACA,GACAQ,GACAyI,IA0BA,OAxBA,gBAAAmB,IACAnB,EAAAN,IAAAyB,EACA5J,EAAA,WAEAyI,EAAAb,KAAAgC,EACA5J,EAAA,iBAGAR,GAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAkG,EAAApL,KAAAoO,OAAAZ,WAAApC,EAAApL,KAAAgH,SAEAhH,KAAAoO,OAAAjN,MAAAnB,KAAAuO,eAAA,QAAA5L,GAAAyI,EAAAlG,EAAA/C,GAAA,SAAAoH,EAAAC,GACAD,EACApH,EAAAoH,GAGApH,EAAA,gBAAAQ,GAAA6G,EAAAK,OAAAiB,KAAAtB,EAAAK,OAAAkK,OAIA/T,MAUA2E,EAAAgD,UAAAqM,cAAA,SAAAC,EAAA/O,EAAA/C,GACA,GACAiJ,IAAYN,IAAAmJ,GACZrT,EAAAZ,IAEAmC,IAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAtE,EAAAwN,OAAAzD,iBAAA,6BAAAxI,GACAiJ,EAAAxK,EAAAwN,OAAAZ,WAAApC,EAAApL,KAAAgH,SAEApG,EAAAwN,OAAAjN,MAAAnB,KAAAuO,eAAA,cAAAnD,EAAAlG,EAAA,SAAAqE,EAAAC,GACA,GAAAoK,EAEA,OAAArK,GACApH,EAAAoH,IAGAqK,EAAA,GAAAf,GAAAjS,EAAA4I,EAAAK,OAAAiB,IAAAtB,EAAAK,OAAAkB,SACA6I,EAAAN,QAAA9J,EAAAK,OAAA0J,aACApR,GAAA,KAAAyR,OAUAjP,EAAAgD,UAAAuM,kBAAA,SAAAhP,EAAA/C,GACA,GAAA+Q,KAEA/Q,IAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAIAA,IACAA,EAAAuH,OACAyG,EAAAzG,KAAAvH,EAAAuH,MAGAvH,EAAAwH,OACAwG,EAAAxG,KAAAxH,EAAAwH,OAIA1M,KAAAoO,OAAAzD,iBAAA,gCAAAxI,GAEAnC,KAAAiT,eAAAC,EAAAhO,EAAA/C,IAUAwC,EAAAgD,UAAAwM,WAAA,SAAAjP,EAAA/C,GACA,GAAAiS,EAEAjS,IAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAlF,KAAAoO,OAAAzD,iBAAA,kCAAAxI,GAEAiS,EAAA,GAAAtB,GAAA9S,MACAoU,EAAA9G,QAAApI,EAAA/C,IAeAwC,EAAAgD,UAAA0M,eAAA,SAAAT,EAAA1O,EAAA/C,GACA,GAAAiJ,KAWA,OATAwI,aAAAf,GACAzH,EAAAwI,EAAAtF,YAEAlD,EAAAb,KAAAqJ,EAGAxI,EAAApL,KAAAoO,OAAAZ,WAAApC,EAAApL,KAAAgH,SACAhH,KAAAoO,OAAAjN,MAAAnB,KAAAuO,eAAA,mBAAAnD,EAAAlG,EAAA/C,GAEAnC,MAgBA2E,EAAAgD,UAAA2M,gBAAA,SAAAL,EAAA9I,EAAAjG,EAAA/C,GACA,GACAvB,GAAAZ,KACAoL,GACAN,IAAAmJ,EACA1J,KAAAY,EAsBA,OAnBAhJ,IAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAkG,EAAAxK,EAAAwN,OAAAZ,WAAApC,EAAApL,KAAAgH,SAEApG,EAAAwN,OAAAjN,MAAAnB,KAAAuO,eAAA,2BAAAnD,EAAAlG,EAAA/C,GAAA,SAAAoH,EAAAC,GACA,GAAAoK,EAEA,OAAArK,GACApH,EAAAoH,IAGAqK,EAAA,GAAAf,GAAAjS,EAAA4I,EAAAK,OAAAiB,IAAAtB,EAAAK,OAAAkB,SACA6I,EAAAN,QAAA9J,EAAAK,OAAA0J,aACApR,GAAA,KAAAyR,MAGA5T,MAYA2E,EAAAgD,UAAA4M,UAAA,SAAArB,EAAAhO,EAAA/C,GACA,GACA6N,GACAwE,CAcA,OAZArS,IAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAlF,KAAAoO,OAAAzD,iBAAA,iCAAAxI,GAEAqS,EAAA,GAAAxB,GACAhD,EAAA,GAAA+C,GAAA/S,KAAAkF,GAEA8K,EAAA1L,MAAA4O,EAAA/Q,EAAAqS,EAAAC,KAAAC,KAAAF,IAEAA,GAWA7P,EAAAgD,UAAAgN,SAAA,SAAAzP,EAAA/C,GACA,GAAAiJ,KAUA,OARAjJ,IAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAkG,EAAApL,KAAAoO,OAAAZ,WAAApC,EAAApL,KAAAgH,SACAhH,KAAAoO,OAAAjN,MAAAnB,KAAAuO,eAAA,8BAAAnD,EAAAlG,EAAA/C,GAEAnC,MAiBA2E,EAAAgD,UAAAiN,eAAA,SAAAX,EAAA9I,EAAAjG,EAAA/C,GACA,GACAiJ,IACAN,IAAAmJ,EACA1J,KAAAY,GAEAvK,EAAAZ,IAiBA,OAfAmC,IAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAkG,EAAAxK,EAAAwN,OAAAZ,WAAApC,EAAApL,KAAAgH,SAEApG,EAAAwN,OAAAjN,MAAAnB,KAAAuO,eAAA,kBAAAnD,EAAAlG,EAAA/C,GAAA,SAAAoH,EAAAC,GACA,MAAAD,GACApH,EAAAoH,OAGA,IAAAsJ,GAAAjS,EAAA4I,EAAAK,OAAAiB,KAAAwC,QAAAnL,KAGAvB,GAYA+D,EAAAgD,UAAAkN,gBAAA,SAAAxU,EAAA8K,GACA,UAAA0H,GAAA7S,KAAAK,EAAA8K,IAUAxG,EAAAgD,UAAAmN,YAAA,SAAA5P,GACA,UAAA6N,GAAA/S,KAAAkF,IAUAP,EAAAgD,UAAAoN,mBAAA,SAAAC,GACA,UAAAlC,GAAA9S,KAAAgV,IAYArQ,EAAAgD,UAAAmG,WAAA,SAAA3C,EAAA4C,GAEA,MADA/N,MAAAoO,OAAAN,WAAAvN,KAAAP,KAAAmL,EAAA4C,GACA/N,MAGAL,EAAAD,QAAAiF,GP+tEM,SAAShF,EAAQD,GQtxFvB,QAAAoT,GAAAmC,EAAAD,GAwBA,MAvBAnT,QAAAsD,iBAAAnF,MAEAmM,YACA9G,MAAA4P,EACA1O,YAAA,GAEA6H,QACA/I,MAAA4P,EAAA7G,OACA7H,YAAA,GAGAS,SACA3B,MAAA0E,KAAAgG,MAAAhG,KAAAC,UAAAiL,EAAAjO,UACAT,YAAA,EACAjB,UAAA,GAEA0P,SACA3P,MAAA2P,MACAzO,YAAA,EACAjB,UAAA,KAIAtF,KAAAoO,OAAA/F,SACArI,KAAAoO,OAAA/F,SAAAC,aAAAtI,MACAuI,OAAA,UACAzE,OAAA,SAAA0E,EAAAC,EAAAC,EAAAC,GACA,GAAAiK,IAAA,mBAEA,OAAAjK,IAAAiK,EAAA/J,QAAAL,WAKAxI,KASA8S,EAAAnL,UAAAQ,MAAA,SAAAjD,EAAA/C,GACA,GACAvB,GAAAZ,KACAoL,EAAApL,KAAAoO,OAAAZ,YAAmCjD,MAAO2K,WAAAlV,KAAAgV,UAA0BhV,KAAAgH,QAepE,OAbA7E,IAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAtE,EAAAwN,OAAAjN,MAAAnB,KAAAmM,WAAAoC,eAAA,yBAAAnD,EAAAlG,EAAA,SAAAqE,GACA,MAAAA,GACApH,KAAAoH,OAGA3I,GAAA0M,QAAApI,EAAA/C,KAGAnC,MAYA8S,EAAAnL,UAAA2F,QAAA,SAAApI,EAAA/C,GACA,GACAvB,GAAAZ,KACAoL,EAAApL,KAAAoO,OAAAZ,cAAoCxN,KAAAgH,QAgCpC,OA9BA7E,IAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAlF,KAAAoO,OAAAjN,MAAAnB,KAAAmM,WAAAoC,eAAA,sBAAAnD,EAAAlG,EAAA,SAAAqE,EAAAC,GACA,MAAAD,KACApH,KAAAoH,GAGAC,EAAAK,OAAAjJ,EAAAuL,WAAA/K,OACAoI,EAAAK,OAAAjJ,EAAAuL,WAAA/K,OAAA+T,SAAAvU,EAAAuL,wBACAvL,EAAAoU,QAAAxL,EAAAK,OAAAjJ,EAAAuL,WAAA/K,OAAA+T,SAAAvU,EAAAuL,uBAAA+I,WAGA9S,SAAAxB,EAAAoU,UACApU,EAAAoU,iBASA7S,GACAA,EAAA,KAAAvB,KAPAuB,KAAA,GAAAU,OAAA,mCAAAjC,EAAAuL,wBAGAhK,KAAA,GAAAU,OAAA,8BAAAjC,EAAAuL,WAAA/K,UAQApB,MAaA8S,EAAAnL,UAAAyN,IAAA,SAAAC,EAAAL,GAGA,MAFAhV,MAAAgV,QAAAK,GAAAL,EAEAhV,MAYA8S,EAAAnL,UAAAmG,WAAA,SAAA3C,EAAA4C,GAEA,MADA/N,MAAAoO,OAAAN,WAAAvN,KAAAP,KAAAmL,EAAA4C,GACA/N,MAGAL,EAAAD,QAAAoT,GRkzFM,SAASnT,EAAQD,GS/7FvB,QAAAmT,GAAAoC,EAAAhB,EAAA9I,GA4DA,MA3DAtJ,QAAAsD,iBAAAnF,MAEAmM,YACA9G,MAAA4P,EAAA9I,WACA5F,YAAA,GAEA+O,gBACAjQ,MAAA4P,EACA1O,YAAA,GAEA6H,QACA/I,MAAA4P,EAAA7G,OACA7H,YAAA,GAGAlG,IACAgF,MAAAjD,OACAmE,YAAA,EACAjB,UAAA,GAEA6F,SACA9F,SACAC,UAAA,EACAiB,YAAA,GAEAS,SACA3B,MAAA0E,KAAAgG,MAAAhG,KAAAC,UAAAiL,EAAAjO,UACAT,YAAA,EACAjB,UAAA,GAEAgO,SACAjO,MAAAjD,OACAmE,YAAA,EACAjB,UAAA,MAKA6F,GAAA8I,GAAA,gBAAAA,KACA9I,EAAA8I,EACAA,EAAA,MAGA9I,IACAA,EAAAoI,WACAvT,KAAAsT,QAAAnI,EAAAoI,eACApI,GAAAoI,UAEAvT,KAAAqO,WAAAlD,GAAA,IAGA8I,GACApS,OAAAyF,eAAAtH,KAAA,MACAqF,MAAA4O,EACA1N,YAAA,IAKAvG,KAAAoO,OAAA/F,SACArI,KAAAoO,OAAA/F,SAAAC,aAAAtI,MACAuI,OAAA,UACAzE,OAAA,SAAA0E,EAAAC,EAAAC,EAAAC,GACA,GAAAC,IAAA,0BAEA,OAAAD,IAAAC,EAAAC,QAAAL,WAKAxI,KAQA6S,EAAAlL,UAAA2G,UAAA,WACA,GACAlD,KAUA,OARApL,MAAAK,KACA+K,EAAAN,IAAA9K,KAAAK,IAGA+K,EAAAb,KAAAvK,KAAAmL,QACAC,EAAAmI,SAAAvT,KAAAsT,QACAlI,EAAApL,KAAAoO,OAAAZ,WAAApC,EAAApL,KAAAgH,UAUA6L,EAAAlL,UAAAgE,SAAA,WACA,MAAA5B,MAAAC,UAAAhK,KAAAsO,cAcAuE,EAAAlL,UAAAkL,UAAA,SAAA3N,EAAA/C,GACA,GAAAvB,GAAAZ,IAOA,IALAmC,GAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,OAGAtE,EAAAP,GACA,SAAAwC,OAAA,wEAGA7C,MAAAoO,OAAAjN,MAAAnB,KAAAsV,eAAA/G,eAAA,kBAAAvO,KAAAsO,YAAApJ,EAAA/C,GAAA,SAAAoH,GACApH,EAAAoH,IAAAnH,OAAAxB,EAAAP,OAWAwS,EAAAlL,UAAA2F,QAAA,SAAApI,EAAA/C,GACA,GAAAvB,GAAAZ,IAOA,IALAmC,GAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,OAGAtE,EAAAP,GACA,SAAAwC,OAAA,gFAGA7C,MAAAoO,OAAAzD,iBAAA,yBAAAxI,GAEAvB,EAAAwN,OAAAjN,MAAAP,EAAA0U,eAAA/G,eAAA,eAAwEzD,IAAAlK,EAAAP,IAAa6E,EAAA,SAAAxC,EAAA8G,GACrF,GAAA6J,EAEA,OAAA3Q,GACAP,EAAAO,IAGA2Q,EAAA,GAAAR,GAAAjS,EAAA0U,eAAA1U,EAAAP,GAAAmJ,EAAAK,OAAAkB,SACAsI,EAAAC,QAAA9J,EAAAK,OAAA0J,aAEApR,GAAA,KAAAkR,OAmBAR,EAAAlL,UAAAkJ,KAAA,SAAA3L,EAAA/C,GACA,GACAiJ,GAAApL,KAAAsO,YACA1N,EAAAZ,IAoBA,OAlBAkF,IAAA9C,SAAAD,GAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAtE,EAAAwN,OAAAjN,MAAAnB,KAAAsV,eAAA/G,eAAA,2BAAAnD,EAAAlG,EAAA,SAAAxC,EAAA8G,GACA,MAAA9G,GACAP,KAAAO,IAGA9B,EAAAP,GAAAmJ,EAAAK,OAAAiB,IACAlK,EAAA0S,QAAA9J,EAAAK,OAAA0J,cAEApR,GACAA,EAAA,KAAAvB,OAIAA,GAaAiS,EAAAlL,UAAA4N,QAAA,SAAArQ;AACA,GAAAkG,GAAApL,KAAAsO,WAIA,OAFAtO,MAAAoO,OAAAjN,MAAAnB,KAAAsV,eAAA/G,eAAA,mBAAAnD,EAAAlG,GAEAlF,MAUA6S,EAAAlL,UAAA0G,WAAA,SAAAjD,EAAA2C,GACA,GAAAnN,GAAAZ,IAWA,OATA+N,GACA/N,KAAAmL,QAAAC,EAGAvJ,OAAAC,KAAAsJ,GAAAlK,QAAA,SAAAa,GACAnB,EAAAuK,QAAApJ,GAAAqJ,EAAArJ,KAIA/B,MAUA6S,EAAAlL,UAAA4M,UAAA,SAAArP,EAAA/C,GACA,GAAA+Q,EASA,IAPAhO,IAAA/C,GAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAlF,KAAAoO,OAAAzD,iBAAA,2BAAAxI,IAEAnC,KAAAK,GACA,SAAAwC,OAAA,sFAKA,OAFAqQ,IAAaa,KAAOyB,QAAAxV,KAAAK,MAEpBL,KAAAsV,eAAAf,UAAArB,EAAAhO,EAAA/C,IAYA0Q,EAAAlL,UAAAmG,WAAA,SAAA3C,EAAA4C,GAEA,MADA/N,MAAAoO,OAAAN,WAAAvN,KAAAP,KAAAmL,EAAA4C,GACA/N,MAIAL,EAAAD,QAAAmT,GT49FM,SAASlT,EAAQD,GUpvGvB,QAAAmF,GAAAuJ,GAiBA,MAhBAvM,QAAAsD,iBAAAnF,MAEAoO,QACA/I,MAAA+I,EACA7H,YAAA,GAGAS,SACA3B,MAAA0E,KAAAgG,MAAAhG,KAAAC,UAAAoE,EAAApH,UACAT,YAAA,EACAjB,UAAA,KAIAtF,KAAA8N,WAAAM,EAAAN,WAAA4G,KAAA1U,MAEAA,KAAAoO,OAAA/F,SACArI,KAAAoO,OAAA/F,SAAAC,aAAAtI,MACAuI,OAAA,UACAzE,OAAA,SAAA0E,EAAAC,EAAAC,EAAAC,GACA,GAAAiK,IAAA,aAEA,OAAAjK,IAAAiK,EAAA/J,QAAAL,WAKAxI,MAOA,WAEA,GACAyV,IAAA,cACAC,GAAA,aACAC,GACAC,OAAAH,EACAI,gBACAC,UACAC,UAAA,oBACAC,OAAA,sBAAAN,GACAO,QAAA,YAA6BC,UAAA,iBAC7BC,OAAAT,EAAA,WACAU,YAAA,wBACAC,UACAC,OAAAb,EACAc,KAAAb,GACAc,WACAC,QACAC,QAAAhB,GACAiB,QAAA,gBACAC,UAAA,kBACAC,WAEAC,QAAA,eACAC,UAAA,oBACAC,MAAA,yBACAC,SAAA,cACAC,SAAA,sBACAC,OAAA,eACAC,MAAA,sBACAC,MAAA,WACAvV,MAAA,WACAwV,YACAC,QAAA,YACAC,SAAA,iCACAC,OAAA,yBACAC,QAAA,qBACAC,MAAA,sBACAC,MAAA,oBACAC,OAAA,qBACAC,MAAA,UACAC,SACA1K,QAAA,qBACA2K,SAAA,qBACAC,WAAA,kBACAC,OAAA,6BACAC,SAAA,sCACAC,QACAC,QAAA,6BACA9C,SAAA,qBACA+C,aACAC,QAAA,eACAC,UAAA,eACAC,SAAA,sBACAC,WAAA,wBACAC,MAAA,2BACA9H,QACAuE,KAAA,cAA4Bc,UAAA,uBAC5B0C,YAAA,cAAAlD,GACAmD,QAAA,uBACAC,OAAA,wBACAC,UAAA,uBACAC,aAAA,cAAAtD,GACAuD,WAAA,eACAC,OAAA,6BACAC,MAAA,MAAoBjD,UAAA,2DACpBkD,MAAA,cACAC,MAAA,2BACAC,aAAA,cAAA5D,GACA6D,WACAC,MAAA,uBACAC,MAAA,MAAoBvD,UAAA,oDACpBwD,QAAA,kBACAC,SAAA,uBACAC,aAAA,cAAAlE,GAA8CQ,UAAA,kCAC9C2D,WAAA,kBACAC,QAAA,qBAAuC5D,UAAA,gBACvC6D,aAAA,kBAAyC7D,UAAA,oBACzC8D,eAAA,kBAA2C9D,UAAA,iCAC3C+D,MAAA,eACAC,gBAAA,kBACAC,kBAAA,kBACAC,gBAAA,kBAA4ClE,UAAA,oBAC5CmE,kBAAA,kBAA8CnE,UAAA,iCAC9CoE,UAAA,eAIA3E,GAAA4E,KAAA5E,EAAA6E,IAAA7E,EAAA8E,KAAA9E,EAAA+E,QAAA/E,EAAAgF,MAAAhF,EAAAiF,KAAAjF,EAAAkF,QAAAlF,EAAAmF,MAAAnF,EAAAoF,KAAApF,EAAAqF,KAAArF,EAAAsF,KAAAtF,EAAAuF,QAAAvF,EAAAwF,KAAAxF,EAAAyF,KAAAzF,EAAA0F,MAAA1F,EAAA2F,SAAA3F,EAAA4F,OAAA5F,EAAA6F,IAAA7F,EAAAnJ,KAAAmJ,EAAA8F,OAAA,MAGA9F,EAAA+F,OAAA/F,EAAAgG,OAAAlG,EAGAE,EAAAY,IAAAZ,EAAAe,OAAAf,EAAAiG,KAAAjG,EAAAkG,QAAAlG,EAAAmG,MAAAnG,EAAAoG,OAAApG,EAAAqG,OAAArG,EAAAsG,OAAAvG,GAEAC,EAAAuG,OAAAvG,EAAAwG,YAAAxG,EAAAW,OACAX,EAAAyG,MAAAzG,EAAAQ,MACAR,EAAA0G,KAAA1G,EAAAsB,QACAtB,EAAA2G,MAAA3G,EAAAqB,KACArB,EAAA4G,OAAA5G,EAAAyB,KACAzB,EAAA6G,OAAA7G,EAAAmC,KACAnC,EAAA8G,MAAA9G,EAAA8B,MACA9B,EAAA+G,aAAA/G,EAAAuB,QACAvB,EAAAgH,YAAAhH,EAAAyD,KACAzD,EAAAiH,UAAAjH,EAAAmE,OACAnE,EAAAkH,OAAAlH,EAAA2E,SAEAzY,OAAAC,KAAA6T,GAAAzU,QAAA,SAAA4b,GACAjY,EAAA8C,UAAAmV,GAAA,WACA,GAGA3a,GAFAuF,EAAA/D,MAAAgE,UAAAC,MAAArH,KAAAsH,WACA3C,EAAA,KAEA/D,GACA4C,WAAA,KACApB,OAAAma,GAEA1R,IA0CA,OAxCA,kBAAA1D,KAAAhG,OAAA,KACAS,EAAAuF,EAAAqV,OAGArV,EAAAhG,QAAA,gBAAAgG,KAAAhG,OAAA,QAAAG,OAAAC,KAAA4F,IAAAhG,OAAA,IAAAA,QAAAU,SAAAsF,IAAAhG,OAAA,GAAA8I,WACAtF,EAAAwC,EAAAqV,OAGApH,EAAAmH,GAAA5b,QAAA,SAAA8b,EAAAjd,GACAqC,SAAAsF,EAAA3H,KAIA4D,MAAAC,QAAAoZ,KACAA,EAAArZ,MAAAC,QAAA8D,EAAA3H,IAAAid,EAAA,GAAAA,EAAA,IAGA,OAAAA,EACA5R,EAAAN,IAAApD,EAAA3H,IAGAqL,EAAAb,OACAa,EAAAb,SAGA,gBAAAyS,IAAA5a,SAAA4a,EAAA9G,SACA8G,EAAA9G,SAAAhV,QAAA,SAAAqL,GACAnK,SAAAsF,EAAA3H,GAAAwM,KACAnB,EAAAb,KAAAgC,GAAA7E,EAAA3H,GAAAwM,MAKAnB,EAAAb,KAAAyS,GAAAtV,EAAA3H,OAKAC,KAAAoO,OAAAjN,QAAAiK,EAAAlG,EAAA/C,GAEAnC,WAOAL,EAAAD,QAAAmF,GVyxGM,SAASlF,EAAQD,EAASQ,GW1+GhC,QAAA6S,GAAAkC,EAAA/P,GAqFA,MAnFArD,QAAAsD,iBAAAnF,MAEAuE,UACAc,MAAA,KACAC,UAAA,GAEA2X,SACA5X,MAAA,KACAC,UAAA,GAEAjF,IACAgF,MAAAX,EAAAgG,MAEAwS,aACA7X,MAAA,KACAC,UAAA,GAEA6X,UACA9X,MAAA,KACAC,UAAA,GAEA8X,UACA/X,MAAA,KACAC,UAAA,GAEA+X,OACAhY,SACAC,UAAA,GAGAgY,cACAjY,MAAA,KAEAkY,OACAlY,MAAAH,KAAAqY,MAAArY,EAAAqY,MAAA,OAEAnX,OACAf,MAAAH,KAAAkB,MAAAlB,EAAAkB,MAAA,QAEAoX,aACAnY,OAAA,EACAC,UAAA,GAEAmY,OACApY,MAAAH,KAAAuY,MAAAvY,EAAAuY,MAAA,QAGAtR,YACA9G,MAAA4P,EACA1O,YAAA,GAEA6H,QACA/I,MAAA4P,EAAA7G,OACA7H,YAAA,GAGA2M,SACA7N,MAAA,KACAkB,YAAA,EACAjB,UAAA,GAEA0B,SACA3B,MAAA0E,KAAAgG,MAAAhG,KAAAC,UAAAiL,EAAAjO,UACAT,YAAA,EACAjB,UAAA,GAEA2B,UACA5B,MAAAH,KAAA+B,SAAA/B,EAAA+B,YACAV,YAAA,EACAjB,UAAA,GAEAnB,QACAkB,MAAA,KACAkB,YAAA,EACAjB,UAAA,GAEAoY,iBACArY,OAAAH,GAAA,iBAAAA,GAAAwY,iBAAAxY,EAAAwY,gBACAnX,YAAA,EACAjB,UAAA,KAIAtF,KAAAoO,OAAA/F,SACArI,KAAAoO,OAAA/F,SAAAC,aAAAtI,MACAuI,OAAA,UACAzE,OAAA,SAAA0E,EAAAC,EAAAC,EAAAC,GACA,GAAAC,IAAA,QAEA,OAAAD,IAAAC,EAAAC,QAAAL,WAKAxI,KA+LA,QAAA2d,GAAAvS,GACA,MAAAA,GAAA1I,MACA1C,KAAAuE,SAAA6G,EAAA1I,OAGA,oBAAA0I,EAAAzI,QACA3C,KAAAoO,OAAA/L,SAAAD,OACApC,KAAAoO,OAAA5M,UAAA,yBAGAxB,KAAAoO,OAAAxM,eAAAwJ,EAAA5I,YACAxC,KAAA0d,iBACA1d,KAAAuE,SAAA,KAAA6G,SAEApL,MAAAoO,OAAAxM,eAAAwJ,EAAA5I,YAEAxC,KAAAuE,SAAA,KAAA6G,IAQA,QAAAnI,KAGA,IAFA,GAAA2a,GAEA5d,KAAAqd,MAAA3b,OAAA,GACAkc,EAAA5d,KAAAqd,MAAAha,QAEArD,KAAA4d,EAAAjb,QAAAwF,MAAAnI,KAAA4d,EAAAlW,MAIA,QAAAmW,KACA,oBAAA7d,KAAAoO,OAAAhI,QAAApG,KAAAwd,YA1VA,GACA9Y,GAAAxE,EAAA,EA+HA6S,GAAApL,UAAA+L,MAAA,SAAAvR,GACA,GAAAiJ,EAMA,IAJApL,KAAAoO,OAAAzD,iBAAA,mBAAAxI,GAEAiJ,EAAApL,KAAAoO,OAAAZ,YAAiCjD,MAAOpG,OAAAnE,KAAAmE,SAAqBnE,KAAAgH,UAE7D6W,EAAAtd,KAAAP,MAEA,WADAA,MAAAqd,MAAAzR,MAAqBjJ,OAAA,QAAA+E,MAAAvF,IAIrB,KAAAnC,KAAAmE,OACA,SAAAtB,OAAA,mEAGA7C,MAAAoO,OAAAjN,MAAAnB,KAAAmM,WAAAoC,eAAA,qBAAAnD,EAAA,SAAA7B,EAAAC,GACArH,EAAAoH,EAAAC,KAAAK,OAAA6J,UAWAX,EAAApL,UAAArD,MAAA,SAAA4O,EAAA4K,EAAA3b,GACA,GACAtB,GAAAC,KAAAD,MACAkd,GACAR,MAAAvd,KAAAud,MACAnX,MAAApG,KAAAoG,MACAqX,MAAAzd,KAAAyd,OAEA7c,EAAAZ,IAiBA,OAfA,kBAAAkT,KACA/Q,EAAA2b,EACAA,EAAA5K,EACAA,EAAA,MAGA/Q,IACAA,EAAAvB,EAAAwc,UAGAxc,EAAAwN,OAAAzD,iBAAA,mBAAAmT,GAKAld,EAAAsc,aAAArc,EAAAD,EAAAsc,aAAAtc,EAAA0c,aACAnb,KAAA,GAAAU,OAAA,0CAAAjC,EAAA0c,aAAA,YAGApK,IACAtS,EAAAsS,WAOA,cAAAtS,EAAAwN,OAAAhI,OACAxF,EAAA2D,SAAAuZ,EACAld,EAAAwc,SAAAjb,OACAvB,EAAAwN,OAAAlK,cAAAmC,QAAAzF,EAAAP,IAAAO,IAIAA,EAAA4c,gBACA5c,GAAAyc,MAAAzR,MAAqBjJ,OAAA,QAAA+E,MAAAwL,EAAA4K,EAAA3b,MAIrBvB,EAAA6D,cACA7D,EAAAuD,OAAA,KACAvD,EAAA4c,aAAA,EACA5c,EAAA2D,SAAAuZ,EACAld,EAAAwc,SAAAjb,EACAvB,EAAAwN,OAAAlK,cAAAmC,QAAAzF,EAAAP,IAAAO,EAEAmd,EAAAxT,KAAA3J,EAAAsS,QACA6K,EAAAnd,EAAAwN,OAAAZ,WAAAuQ,EAAA/d,KAAAgH,aAEApG,GAAAwN,OAAAjN,MAAAP,EAAAuL,WAAAoC,eAAA,kBAAAwP,GAAwF9W,SAAArG,EAAAqG,UAAwB,SAAAvE,EAAAD,GAIhH,aAHA7B,GAAAwN,OAAAlK,cAAAmC,QAAAzF,EAAAP,IACAO,EAAA4c,aAAA,EAEA9a,GACA9B,EAAAyc,SACAlb,KAAA,GAAAU,OAAA,qCAAAH,EAAAE,YAGAhC,EAAAsc,YAAArc,EACAD,EAAAuD,OAAA1B,EAAAoH,OAAA1F,OACAvD,EAAAqc,QAAAxa,EAAAoH,OAAAoT,QAEArc,EAAAwN,OAAAlK,cAAAtD,EAAAuD,UACAvD,EAAAwN,OAAAlK,cAAAtD,EAAAuD,YAGAvD,EAAAwN,OAAAlK,cAAAtD,EAAAuD,QAAAvD,EAAAP,IAAAO,EAEAA,EAAAuc,SAAAQ,EAAAjJ,KAAA9T,GACAA,EAAAwN,OAAA9L,QAAA4N,GAAAtP,EAAAqc,QAAArc,EAAAuc,UAEAla,EAAA1C,KAAAK,QACAuB,KAAA,KAAAvB,UAaAmS,EAAApL,UAAAlD,YAAA,WACA,GAGAuZ,GAFApd,EAAAZ,KACAgQ,EAAApP,EAAAuD,MAGA,OAAA0Z,GAAAtd,KAAAP,OAKAgQ,IACApP,EAAAwN,OAAA9L,QAAA6N,IAAAvP,EAAAqc,QAAAjd,KAAAmd,UAEA,IAAAtb,OAAAC,KAAAlB,EAAAwN,OAAAlK,cAAA8L,IAAAtO,cACAd,GAAAwN,OAAAlK,cAAA8L,GAEA,IAAAnO,OAAAC,KAAAlB,EAAAwN,OAAAlK,cAAAmC,SAAA3E,OACAd,EAAAwN,OAAAjN,MAAAP,EAAAuL,WAAAoC,eAAA,oBAA+EhE,MAAOpG,OAAA6L,KAEtFgO,EAAAC,YAAA,WACA,IAAApc,OAAAC,KAAAlB,EAAAwN,OAAAlK,cAAAmC,SAAA3E,SACAd,EAAAwN,OAAAlK,cAAA8L,IACApP,EAAAwN,OAAAjN,MAAAP,EAAAuL,WAAAoC,eAAA,oBAAqFhE,MAAOpG,OAAA6L,KAE5FkO,cAAAF,KAES,YAGTpd,GAAAwN,OAAAlK,cAAA8L,GAAApP,EAAAP,IAGAO,EAAAuD,OAAA,MAGAvD,IA7BAA,EAAAyc,MAAAzR,MAAqBjJ,OAAA,cAAA+E,UACrB9G,IAwCAmS,EAAApL,UAAAmG,WAAA,SAAA3C,EAAA4C,GAEA,MADA/N,MAAAoO,OAAAN,WAAAvN,KAAAP,KAAAmL,EAAA4C,GACA/N,MAgDAL,EAAAD,QAAAqT,GXygHM,SAASpT,EAAQD,GYl2HvB,QAAAsT,KACAhT,KAAAme,OACAne,KAAA0C,MAAA,KACA1C,KAAAgQ,KAAA,KAOAgD,EAAArL,UAAAyW,OAAA,SAAAjc,GAQA,MAPAnC,MAAA0C,OAAA1C,KAAAgQ,KACA7N,EAAAnC,KAAA0C,MAAA1C,KAAAgQ,MAGAhQ,KAAAme,IAAAvS,KAAAzJ,GAGAnC,MASAgT,EAAArL,UAAA8M,KAAA,SAAA/R,EAAAsN,GACAhQ,KAAA0C,QACA1C,KAAAgQ,OAEAhQ,KAAAme,IAAAjd,QAAA,SAAAiB,GACAA,EAAAO,EAAAsN,MAIArQ,EAAAD,QAAAsT,GZ62HM,SAASrT,EAAQD,EAASQ,Ga54HhC,QAAAoC,GAAA2C,EAAAyB,EAAAC,EAAAC,GAEA,sBAAA0I,QAAA,CAEA,sBAAAR,WACA,WAAA5O,EAAA,IAAA+E,EAAAyB,EAAAE,EAGA,IAAA0I,OAAA+O,GACA,WAAAne,EAAA,KAAA+E,EAAA0B,EAAAC,EAGA,UAAA/D,OAAA,mFAGA,WAAA3C,EAAA,IAAA+E,EAAAyB,EAAAE,GAGAjH,EAAAD,QAAA4C,Gb45HM,SAAS3C,EAAQD,Gcv7HvB,QAAA4e,GAAArZ,EAAA2J,EAAAC,GACA7O,KAAAiF,OACAjF,KAAA4O,OACA5O,KAAA6O,MACA7O,KAAAue,OAAA,KASAve,KAAAoI,QAAA,SAAA9B,EAAAG,GACAzG,KAAAue,OAAAjP,OAAA+O,IAAAre,KAAA6O,IAAA,sBAAA7O,KAAAiF,KAAA,IAAAjF,KAAA4O,MACA4P,aAAAlY,EACAG,oBACAgY,UAAA,KASAze,KAAA+I,UAAA,SAAAxE,GACAvE,KAAAue,OAAArO,GAAA,UAAA3L,IAOAvE,KAAAgJ,eAAA,SAAAzE,GACAvE,KAAAue,OAAArO,GAAA,gBAAA3L,IAOAvE,KAAAmJ,aAAA,SAAA5E,GACAvE,KAAAue,OAAArO,GAAA,aAAA3L,IAOAvE,KAAAoJ,YAAA,SAAA7E,GACAvE,KAAAue,OAAArO,GAAA,YAAA3L,IAUAvE,KAAAuC,KAAA,SAAA4B,EAAAI,GACAvE,KAAAue,OAAAhc,KAAA4B,EAAAI,IASAvE,KAAAkQ,GAAA,SAAA/L,EAAAI,GACAvE,KAAAue,OAAArO,GAAA/L,EAAAI,IASAvE,KAAAmQ,IAAA,SAAAhM,EAAAI,GACAvE,KAAAue,OAAApO,IAAAhM,EAAAI,IASAvE,KAAAgD,KAAA,SAAA8M,GACA9P,KAAAue,OAAAG,KAAA,SAAA5O,IAMA9P,KAAA6M,MAAA,WACA7M,KAAAue,OAAA1R,QACA7M,KAAAue,OAAA,MAIA5e,EAAAD,QAAA4e,Gd87HM,SAAS3e,EAAQD,EAASQ,GeniIhC,QAAAye,GAAAxQ,EAAA9N,EAAA8K,GAgBA,GAdA+C,EAAA3N,KAAAP,KAAAmO,EAAA9N,EAAA8K,GAGAtJ,OAAAsD,iBAAAnF,MAEAwO,kBACAnJ,MAAA,iBAEAqJ,kBACArJ,MAAA,mBAKA8I,EAAAC,OAAA/F,SACA,MAAA8F,GAAAC,OAAA/F,SAAAC,aAAAtI,MACAuI,OAAA,UACAzE,OAAA,SAAA0E,EAAAC,EAAAC,EAAAC,GACA,GAAAC,IAAA,iBAEA,OAAAD,IAAAC,EAAAC,QAAAL,WAzBA,GACA0F,GAAAhO,EAAA,EA+BAye,GAAAhX,UAAA9F,OAAA0O,OAAArC,EAAAvG,WACA6I,aACAnL,MAAAsZ,KAWAA,EAAAhX,UAAAkJ,KAAA,SAAA3L,EAAA/C,GACA,GACAiJ,GACAxK,EAAAZ,IAEA,KAAAA,KAAAmL,QAAAyT,SACA,SAAA/b,OAAA,6FAcA,OAXAqC,IAAA9C,SAAAD,GAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAkG,EAAApL,KAAAsO,YAEA1N,EAAAwN,OAAAjN,MAAAP,EAAAuN,eAAAI,eAAA,0BAAAnD,EAAAlG,EAAA/C,GAAA,SAAAO,GACAP,EAAAO,IAAAN,OAAAxB,KAGAA,GAUA+d,EAAAhX,UAAAkX,UAAA,SAAAC,GAEA,mBAAAA,IAAA,gBAAAA,GAAAC,OACA,SAAAlc,OAAA,uGASA,OANA7C,MAAAmL,QAAAyT,WACA5e,KAAAmL,QAAAyT,aAGA5e,KAAAmL,QAAAyT,SAAAhT,KAAAkT,GAEA9e,MASA2e,EAAAhX,UAAAqX,YAAA,SAAAJ,GAEA,IAAAjb,MAAAC,QAAAgb,GACA,SAAA/b,OAAA,gHAWA,OARA+b,GAAAK,IAAA,SAAAH,GACA,mBAAAA,IAAA,gBAAAA,GAAAC,OACA,SAAAlc,OAAA,mHAIA7C,KAAAmL,QAAAyT,WAEA5e,MAQA2e,EAAAhX,UAAA2G,UAAA,WACA,GACAlD,KAQA,OANApL,MAAAK,KACA+K,EAAAN,IAAA9K,KAAAK,IAGA+K,EAAAb,KAAAvK,KAAAmL,QAEAC,GASAuT,EAAAhX,UAAAuX,YAAA,WACA,MAAAlf,MAAAmL,QAAAyT,UAGAjf,EAAAD,QAAAif,Gf6iIM,SAAShf,EAAQD,EAASQ,GgBxrIhC,QAAAif,GAAAhR,EAAA9N,EAAA8K,GAgBA,GAdA+C,EAAA3N,KAAAP,KAAAmO,EAAA9N,EAAA8K,GAGAtJ,OAAAsD,iBAAAnF,MAEAwO,kBACAnJ,MAAA,cAEAqJ,kBACArJ,MAAA,gBAKA8I,EAAAC,OAAA/F,SACA,MAAA8F,GAAAC,OAAA/F,SAAAC,aAAAtI,MACAuI,OAAA,UACAzE,OAAA,SAAA0E,EAAAC,EAAAC,EAAAC,GACA,GAAAC,IAAA,OAEA,OAAAD,IAAAC,EAAAC,QAAAL,WAxBA,GAAA0F,GAAAhO,EAAA,EA+BAif,GAAAxX,UAAA9F,OAAA0O,OAAArC,EAAAvG,WACA6I,aACAnL,MAAA8Z,KAeAA,EAAAxX,UAAAkJ,KAAA,SAAA3L,EAAA/C,GACA,GACAiJ,GAAApL,KAAAsO,YACA1N,EAAAZ,IAWA,OATAkF,IAAA9C,SAAAD,GAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAtE,EAAAwN,OAAAjN,MAAAnB,KAAAmO,eAAAI,eAAA,uBAAAnD,EAAAlG,EAAA/C,GAAA,SAAAO,GACAP,EAAAO,IAAAN,OAAAxB,KAGAZ,MAGAL,EAAAD,QAAAyf,GhBgsIM,SAASxf,EAAQD,EAASQ,GiBrvIhC,QAAA0E,GAAAwJ,GAeA,MAbAvM,QAAAyF,eAAAtH,KAAA,UACAqF,MAAA+I,IAGAvM,OAAAyF,eAAAtH,KAAA,kBACAqF,MAAA,SAAA1C,GACA,OACAoB,WAAA,WACApB,aAKA3C,KAAAoO,OAAA/F,SACArI,KAAAoO,OAAA/F,SAAAC,aAAAtI,MACAuI,OAAA,UACAzE,OAAA,SAAA0E,EAAAC,EAAAC,EAAAC,GACA,GAAAiK,IAAA,+DAEA,OAAAjK,IAAAiK,EAAA/J,QAAAL,WAKAxI,KAtCA,GACAmf,GAAAjf,EAAA,IACAye,EAAAze,EAAA,IACA4E,EAAA5E,EAAA,EA8CA0E,GAAA+C,UAAAyX,QAAA,SAAA/e,EAAA6E,EAAA/C,GACA,GACAiJ,GACAxK,EAAAZ,IAEA,KAAAK,EACA,SAAAwC,OAAA,iDAGAV,IAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAkG,GAAUN,IAAAzK,GAEVO,EAAAwN,OAAAzD,iBAAA,yBAAAxI,GAEAvB,EAAAwN,OAAAjN,MAAAnB,KAAAuO,eAAA,WAAAnD,EAAAlG,EAAA,SAAAqE,EAAA9G,GACAN,EAAAoH,IAAAnH,OAAA,GAAA+c,GAAAve,EAAA6B,EAAAoH,OAAAiB,IAAArI,EAAAoH,OAAAkB,aAgBAnG,EAAA+C,UAAA0X,YAAA,SAAAnM,EAAAhO,EAAA/C,GACA,GACAvB,GAAAZ,IAEAmC,IAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAtE,EAAAwN,OAAAzD,iBAAA,6BAAAxI,GAEAvB,EAAAwN,OAAAjN,MAAAnB,KAAAuO,eAAA,gBAAyDhE,KAAA2I,GAAchO,EAAA,SAAAxC,EAAAmH,GACvE,GAAAsJ,EAEA,OAAAzQ,GACAP,EAAAO,IAGAyQ,EAAAtJ,SAAAoB,KAAAgU,IAAA,SAAA7L,GACA,UAAA+L,GAAAve,EAAAwS,EAAAtI,IAAAsI,EAAArI,eAGA5I,GAAA,MAAcqR,MAAA3J,SAAA2J,MAAA8L,MAAAnM,QAiBdvO,EAAA+C,UAAA4X,WAAA,SAAAlf,EAAA8K,EAAAjG,EAAA/C,GACA,GACAvB,GAAAZ,KACAoL,KACAzI,EAAA,YAEA,KAAAtC,GAAA,gBAAAA,GACA,SAAAwC,OAAA,oEAGAV,IAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAkG,EAAAN,IAAAzK,EACA+K,EAAAb,KAAAY,EAEAjG,IACAvC,EAAAuC,EAAAsa,eAAA,oCAGA5e,EAAAwN,OAAAjN,MAAAnB,KAAAuO,eAAA5L,GAAAyI,EAAAlG,EAAA/C,GAAA,SAAAoH,EAAAC,GACArH,EAAAoH,IAAAnH,OAAA,GAAA+c,GAAAve,EAAA4I,EAAAK,OAAAiB,IAAAtB,EAAAK,OAAAkB,aAcAnG,EAAA+C,UAAA8X,WAAA,SAAApf,EAAA8K,EAAAjG,EAAA/C,GACA,GACAvB,GAAAZ,KACAoL,GAAYN,IAAAzK,EAAAkK,KAAAY,GACZxI,EAAA,YAEA,KAAAtC,GAAA,gBAAAA,GACA,SAAAwC,OAAA,oEAYA,OATAV,IAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAtE,EAAAwN,OAAAjN,MAAAnB,KAAAuO,eAAA5L,GAAAyI,EAAAlG,EAAA/C,GAAA,SAAAoH,GACApH,EAAAoH,IAAAnH,OAAA,GAAA+c,GAAAve,EAAAP,EAAA8K,MAGAnL,MAgBA4E,EAAA+C,UAAA+X,WAAA,SAAArf,EAAA6E,EAAA/C,GACA,GAAAiJ,IAAcN,IAAAzK,EAWd,OATA8B,IAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAlF,KAAAoO,OAAAjN,MAAAnB,KAAAuO,eAAA,cAAAnD,EAAAlG,EAAA/C,GAAA,SAAAoH,EAAAC,GACArH,EAAAoH,IAAAnH,OAAAoH,EAAAK,OAAAiB,OAGA9K,MAWA4E,EAAA+C,UAAAgY,YAAA,SAAAtf,EAAA8K,GACA,UAAAgU,GAAAnf,KAAAK,EAAA8K,IAYAvG,EAAA+C,UAAAiY,WAAA,SAAAvf,EAAA6E,EAAA/C,GACA,GACAiJ,GACAxK,EAAAZ,IAOA,IALAmC,GAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,OAGA7E,GAAA,gBAAAA,GACA,SAAAwC,OAAA,oDAIAuI,IAAUN,IAAAzK,GAEVO,EAAAwN,OAAAzD,iBAAA,4BAAAxI,GAEAvB,EAAAwN,OAAAjN,MAAAnB,KAAAuO,eAAA,cAAAnD,EAAAlG,EAAA,SAAAxC,EAAAD,GACAN,EAAAO,IAAAN,OAAA,GAAAuc,GAAA/d,EAAA6B,EAAAoH,OAAAiB,IAAArI,EAAAoH,OAAAkB,aAgBAnG,EAAA+C,UAAAkY,eAAA,SAAA3M,EAAAhO,EAAA/C,GACA,GACAvB,GAAAZ,IAEAmC,IAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAtE,EAAAwN,OAAAzD,iBAAA,gCAAAxI,GAEAvB,EAAAwN,OAAAjN,MAAAnB,KAAAuO,eAAA,mBAA4DhE,KAAA2I,GAAchO,EAAA,SAAAxC,EAAAD,GAC1E,GAAA0Q,EAEA,OAAAzQ,GACAP,EAAAO,IAGAyQ,EAAA1Q,EAAAoH,OAAAoB,KAAAgU,IAAA,SAAA7L,GACA,UAAAuL,GAAA/d,EAAAwS,EAAAtI,IAAAsI,EAAArI,eAGA5I,GAAA,MAAcqR,MAAA/Q,EAAAoH,OAAA2J,MAAAsM,SAAA3M,QAiBdvO,EAAA+C,UAAAoY,cAAA,SAAA1f,EAAA8K,EAAAjG,EAAA/C,GACA,GACAvB,GAAAZ,KACAoL,KACAzI,EAAA,eAEA,KAAAtC,GAAA,gBAAAA,GACA,SAAAwC,OAAA,6EAGAV,IAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAkG,EAAAN,IAAAzK,EACA+K,EAAAb,KAAAY,EAEAjG,IACAvC,EAAAuC,EAAAsa,eAAA,0CAGA5e,EAAAwN,OAAAjN,MAAAnB,KAAAuO,eAAA5L,GAAAyI,EAAAlG,EAAA/C,GAAA,SAAAoH,EAAAC,GACArH,EAAAoH,IAAAnH,OAAA,GAAAuc,GAAA/d,EAAA4I,EAAAK,OAAAiB,IAAAtB,EAAAK,OAAAkB,aAcAnG,EAAA+C,UAAAqY,cAAA,SAAA3f,EAAA8K,EAAAjG,EAAA/C,GACA,GACAvB,GAAAZ,KACAoL,KACAzI,EAAA,eAEA,KAAAtC,GAAA,gBAAAA,GACA,SAAAwC,OAAA,6EAyBA,OAtBAV,IAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAkG,EAAAN,IAAAzK,EACA+K,EAAAb,KAAAY,EAEAvK,EAAAwN,OAAAjN,MAAAnB,KAAAuO,eAAA5L,GAAAyI,EAAAlG,EAAA/C,GAAA,SAAAoH,EAAAC,GACA,GAAAyW,KAEA,OAAA1W,GACApH,EAAAoH,IAGA1H,OAAAC,KAAA0H,EAAAK,OAAAkB,SAAA7J,QAAA,SAAAgf,GACAD,EAAAC,GAAA1W,EAAAK,OAAAkB,QAAAmV,SAGA/d,GAAA,QAAAwc,GAAA/d,EAAA4I,EAAAK,OAAAiB,IAAAmV,OAGAjgB,MAgBA4E,EAAA+C,UAAAwY,cAAA,SAAA9f,EAAA6E,EAAA/C,GACA,GAAAiJ,IAAcN,IAAAzK,EAWd,OATA8B,IAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAlF,KAAAoO,OAAAjN,MAAAnB,KAAAuO,eAAA,iBAAAnD,EAAAlG,EAAA/C,GAAA,SAAAoH,EAAAC,GACArH,EAAAoH,IAAAnH,OAAAoH,EAAAK,OAAAiB,OAGA9K,MAWA4E,EAAA+C,UAAAyY,eAAA,SAAA/f,EAAA8K,GACA,UAAAwT,GAAA3e,KAAAK,EAAA8K,IAUAvG,EAAA+C,UAAA0Y,QAAA,SAAAhgB,EAAA6E,EAAA/C,GACA,GACAiJ,IAAYN,IAAAzK,GACZO,EAAAZ,IAEA,KAAAK,GAAA,gBAAAA,GACA,SAAAwC,OAAA,iDAGAV,IAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAtE,EAAAwN,OAAAzD,iBAAA,yBAAAxI,GAEAvB,EAAAwN,OAAAjN,MAAAnB,KAAAuO,eAAA,WAAAnD,EAAAlG,EAAA,SAAAqE,EAAA9G,GACAN,EAAAoH,IAAAnH,OAAA,GAAA0C,GAAAlE,EAAA6B,EAAAoH,OAAAiB,IAAArI,EAAAoH,OAAAkB,aAeAnG,EAAA+C,UAAA2Y,YAAA,SAAApN,EAAAhO,EAAA/C,GACA,GACAvB,GAAAZ,IAEAmC,IAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAtE,EAAAwN,OAAAzD,iBAAA,6BAAAxI,GAEAvB,EAAAwN,OAAAjN,MAAAnB,KAAAuO,eAAA,gBAAyDhE,KAAA2I,GAAchO,EAAA,SAAAxC,EAAAD,GACvE,GAAA0Q,EAEA,OAAAzQ,GACAP,EAAAO,IAGAyQ,EAAA1Q,EAAAoH,OAAAoB,KAAAgU,IAAA,SAAA7L,GACA,UAAAtO,GAAAlE,EAAAwS,EAAAtI,IAAAsI,EAAArI,eAGA5I,GAAA,MAAcqR,MAAA/Q,EAAAoH,OAAA2J,MAAAiK,MAAAtK,QAiBdvO,EAAA+C,UAAA4Y,WAAA,SAAAlgB,EAAA8K,EAAAjG,EAAA/C,GACA,GACAvB,GAAAZ,KACAoL,GAAYN,IAAAzK,EAAAkK,KAAAY,GACZxI,EAAA,YAEA,KAAAtC,GAAA,gBAAAA,GACA,SAAAwC,OAAA,oEAGAV,IAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAA,IACAvC,EAAAuC,EAAAsa,eAAA,oCAGA5e,EAAAwN,OAAAjN,MAAAnB,KAAAuO,eAAA5L,GAAAyI,EAAA,KAAAjJ,GAAA,SAAAoH,EAAAC,GACArH,EAAAoH,IAAAnH,OAAA,GAAA0C,GAAAlE,EAAA4I,EAAAK,OAAAiB,IAAAtB,EAAAK,OAAAkB,aAeAnG,EAAA+C,UAAA6Y,qBAAA,SAAAngB,EAAA8K,EAAAjG,EAAA/C,GACA,GACAvB,GAAAZ,KACAoL,GAAYN,IAAAzK,EAAAkK,KAAAY,EAEZ,KAAA9K,GAAA,gBAAAA,GACA,SAAAwC,OAAA,8EAGA,IAAAsI,EAAAuF,WACA,SAAA7N,OAAA,iEAGAV,IAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAtE,EAAAwN,OAAAjN,MAAAnB,KAAAuO,eAAA,wBAAAnD,EAAA,KAAAjJ,GAAA,SAAAoH,EAAAC,GACArH,EAAAoH,IAAAnH,OAAA,GAAA0C,GAAAlE,EAAA4I,EAAAK,OAAAiB,IAAAtB,EAAAK,OAAAkB,aAcAnG,EAAA+C,UAAA8Y,WAAA,SAAApgB,EAAA8K,EAAAjG,EAAA/C,GACA,GACAvB,GAAAZ,KACAoL,KACAzI,EAAA,YAEA,KAAAtC,GAAA,gBAAAA,GACA,SAAAwC,OAAA,sEAeA,OAZAV,IAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAkG,EAAAN,IAAAzK,EACA+K,EAAAb,KAAAY,EAEAvK,EAAAwN,OAAAjN,MAAAnB,KAAAuO,eAAA5L,GAAAyI,EAAAlG,EAAA/C,GAAA,SAAAoH,EAAAC,GACArH,EAAAoH,IAAAnH,OAAA,GAAA0C,GAAAlE,EAAA4I,EAAAK,OAAAiB,IAAAtB,EAAAK,OAAAkB,YAGA/K,MAgBA4E,EAAA+C,UAAA+Y,WAAA,SAAArgB,EAAA6E,EAAA/C,GACA,GAAAiJ,IAAcN,IAAAzK,EAWd,OATA8B,IAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAlF,KAAAoO,OAAAjN,MAAAnB,KAAAuO,eAAA,cAAAnD,EAAAlG,EAAA/C,GAAA,SAAAoH,EAAAC,GACArH,EAAAoH,IAAAnH,OAAAoH,EAAAK,OAAAiB,OAGA9K,MAWA4E,EAAA+C,UAAAgZ,YAAA,SAAAtgB,EAAA8K,GACA,UAAArG,GAAA9E,KAAAK,EAAA8K,IAmBAvG,EAAA+C,UAAAiZ,gBAAA,SAAAC,EAAA9c,EAAApB,EAAAvB,EAAA+K,GACA,GAAA2U,EAEA,KAAAD,GAAA,gBAAAA,GACA,SAAAhe,OAAA,6DAEA,KAAAkB,GAAA,gBAAAA,GACA,SAAAlB,OAAA,iEAEA,KAAAF,GAAA,gBAAAA,GACA,SAAAE,OAAA,6DAmBA,OAfAie,GAAAD,EACA/c,OAAA,SAAAid,GACA,MAAAA,GAAAhd,gBAAA,MAAAgd,EAAAhd,aAEAD,OAAA,SAAAid,GACA,MAAAA,GAAApe,YAAA,MAAAoe,EAAApe,SAEAmB,OAAA,SAAAid,GACA,MAAAA,GAAA3f,WAAA,MAAA2f,EAAA3f,QAEA0C,OAAA,SAAAid,GACA,MAAAA,GAAA5U,gBAAA,MAAA4U,EAAA5U,aAIA2U,EAAAE,KAAA,SAAAC,GAA2C,kBAAAA,EAAA5b,QAC3C,UAGAyb,EAAAE,KAAA,SAAAC,GAA2C,sBAAAA,EAAA5b,QAC3C,cAGA,UAWAT,EAAA+C,UAAAuZ,cAAA,SAAAC,EAAAjc,EAAA/C,GACA,GACAiJ,IAAYN,IAAAqW,GACZvgB,EAAAZ,IAEA,KAAAmhB,GAAA,gBAAAA,GACA,SAAAte,OAAA,2DAGAV,IAAA,kBAAA+C,KACA/C,EAAA+C,EACAA,EAAA,MAGAtE,EAAAwN,OAAAzD,iBAAA,uBAAAxI,GAEAnC,KAAAoO,OAAAjN,MAAAnB,KAAAuO,eAAA,iBAAAnD,EAAAlG,EAAA/C,GAAA,SAAAoH,EAAAC,GACArH,EAAAoH,IAAAnH,OAAAoH,EAAAK,OAAAoB,SAIAtL,EAAAD,QAAAkF,GjBwwIM,SAASjF,EAAQD,EAASQ,GkBj9JhC,GAAAoS,GAEA8O,EAAA,OAAAA,QAAA,OAAAC,QACA,IAAAD,KAAAE,gBAAA,CAGA,GAAAC,GAAA,GAAAC,YAAA,GACAlP,GAAA,WAEA,MADA8O,GAAAE,gBAAAC,GACAA,GAIA,IAAAjP,EAAA,CAKA,GAAAmP,GAAA,GAAA9d,OAAA,GACA2O,GAAA,WACA,OAAAoP,GAAA3hB,EAAA,EAAsBA,EAAA,GAAQA,IAC9B,OAAAA,KAAA2hB,EAAA,WAAApe,KAAA+O,UACAoP,EAAA1hB,GAAA2hB,MAAA,EAAA3hB,IAAA,MAGA,OAAA0hB,IAIA9hB,EAAAD,QAAA4S","file":"kuzzle.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar\n\t  uuid = __webpack_require__(4),\n\t  KuzzleDataCollection = __webpack_require__(5),\n\t  KuzzleSecurity = __webpack_require__(15),\n\t  KuzzleMemoryStorage = __webpack_require__(8),\n\t  KuzzleUser = __webpack_require__(3),\n\t  networkWrapper = __webpack_require__(11);\n\t\n\t/**\n\t * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n\t *\n\t * @callback responseCallback\n\t * @param {Object} err - Error object, NULL if the query is successful\n\t * @param {Object} [data] - The content of the query response\n\t */\n\t\n\t/**\n\t * Kuzzle object constructor.\n\t *\n\t * @constructor\n\t * @param host - Server name or IP Address to the Kuzzle instance\n\t * @param [options] - Connection options\n\t * @param {responseCallback} [cb] - Handles connection response\n\t * @constructor\n\t */\n\tmodule.exports = Kuzzle = function (host, options, cb) {\n\t  var self = this;\n\t\n\t  if (!(this instanceof Kuzzle)) {\n\t    return new Kuzzle(host, options, cb);\n\t  }\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  if (!host || host === '') {\n\t    throw new Error('host argument missing');\n\t  }\n\t\n\t  Object.defineProperties(this, {\n\t    // 'private' properties\n\t    collections: {\n\t      value: {},\n\t      writable: true\n\t    },\n\t    connectCB: {\n\t      value: cb\n\t    },\n\t    eventListeners: {\n\t      value: {\n\t        connected: {lastEmitted: null, listeners: []},\n\t        error: {lastEmitted: null, listeners: []},\n\t        disconnected: {lastEmitted: null, listeners: []},\n\t        reconnected: {lastEmitted: null, listeners: []},\n\t        jwtTokenExpired: {lastEmitted: null, listeners: []},\n\t        loginAttempt: {lastEmitted: null, listeners: []},\n\t        offlineQueuePush: {listeners: []},\n\t        offlineQueuePop: {listeners: []},\n\t        queryError: {listeners: []}\n\t      }\n\t    },\n\t    eventTimeout: {\n\t      value: 200\n\t    },\n\t    queuing: {\n\t      value: false,\n\t      writable: true\n\t    },\n\t    requestHistory: {\n\t      value: {},\n\t      writable: true\n\t    },\n\t    state: {\n\t      value: 'initializing',\n\t      writable: true\n\t    },\n\t    subscriptions: {\n\t      /*\n\t       Contains the centralized subscription list in the following format:\n\t          pending: <number of pending subscriptions>\n\t          'roomId': {\n\t            kuzzleRoomID_1: kuzzleRoomInstance_1,\n\t            kuzzleRoomID_2: kuzzleRoomInstance_2,\n\t            kuzzleRoomID_...: kuzzleRoomInstance_...\n\t          }\n\t\n\t       This was made to allow multiple subscriptions on the same set of filters, something that Kuzzle does not permit.\n\t       This structure also allows renewing subscriptions after a connection loss\n\t       */\n\t      value: {\n\t        pending: {}\n\t      },\n\t      writable: true\n\t    },\n\t    // read-only properties\n\t    autoReconnect: {\n\t      value: (options && typeof options.autoReconnect === 'boolean') ? options.autoReconnect : true,\n\t      enumerable: true\n\t    },\n\t    defaultIndex: {\n\t      value: (options && typeof options.defaultIndex === 'string') ? options.defaultIndex : undefined,\n\t      writable: true,\n\t      enumerable: true\n\t    },\n\t    reconnectionDelay: {\n\t      value: (options && typeof options.reconnectionDelay === 'number') ? options.reconnectionDelay : 1000,\n\t      enumerable: true\n\t    },\n\t    host: {\n\t      value: host,\n\t      writable: true,\n\t      enumerable: true\n\t    },\n\t    wsPort: {\n\t      value: (options && typeof options.wsPort === 'number') ? options.wsPort : 7513,\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    ioPort: {\n\t      value: (options && typeof options.ioPort === 'number') ? options.ioPort : 7512,\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    sslConnection: {\n\t      value: (options && typeof options.sslConnection === 'boolean') ? options.sslConnection : false,\n\t      enumerable: true\n\t    },\n\t    autoQueue: {\n\t      value: false,\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    autoReplay: {\n\t      value: false,\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    autoResubscribe: {\n\t      value: true,\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    headers: {\n\t      value: {},\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    metadata: {\n\t      value: {},\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    /*\n\t      Offline queue use the following format:\n\t            [\n\t              {\n\t                ts: <query timestamp>,\n\t                query: 'query',\n\t                cb: callbackFunction\n\t              }\n\t            ]\n\t     */\n\t    offlineQueue: {\n\t      value: [],\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    queueFilter: {\n\t      value: null,\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    queueMaxSize: {\n\t      value: 500,\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    queueTTL: {\n\t      value: 120000,\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    replayInterval: {\n\t      value: 10,\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    jwtToken: {\n\t      value: undefined,\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    offlineQueueLoader: {\n\t      value: null,\n\t      enumerable: true,\n\t      writable: true\n\t    }\n\t  });\n\t\n\t  if (options) {\n\t    Object.keys(options).forEach(function (opt) {\n\t      if (self.hasOwnProperty(opt) && Object.getOwnPropertyDescriptor(self, opt).writable) {\n\t        self[opt] = options[opt];\n\t      }\n\t    });\n\t\n\t    if (options.offlineMode === 'auto' && this.autoReconnect) {\n\t      this.autoQueue = this.autoReplay = this.autoResubscribe = true;\n\t    }\n\t  }\n\t\n\t  // Helper function ensuring that this Kuzzle object is still valid before performing a query\n\t  Object.defineProperty(this, 'isValid', {\n\t    value: function () {\n\t      if (self.state === 'disconnected') {\n\t        throw new Error('This Kuzzle object has been invalidated. Did you try to access it after a disconnect call?');\n\t      }\n\t    }\n\t  });\n\t\n\t  // Helper function copying headers to the query data\n\t  Object.defineProperty(this, 'addHeaders', {\n\t    value: function (query, headers) {\n\t      Object.keys(headers).forEach(function (header) {\n\t        if (!query[header]) {\n\t          query[header] = headers[header];\n\t        }\n\t      });\n\t\n\t      return query;\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Some methods (mainly read queries) require a callback function. This function exists to avoid repetition of code,\n\t   * and is called by these methods\n\t   */\n\t  Object.defineProperty(this, 'callbackRequired', {\n\t    value: function (errorMessagePrefix, callback) {\n\t      if (!callback || typeof callback !== 'function') {\n\t        throw new Error(errorMessagePrefix + ': a callback argument is required for read queries');\n\t      }\n\t    }\n\t  });\n\t\n\t  /**\n\t   * Create an attribute security that embed all methods to manage Role, Profile and User\n\t   */\n\t  Object.defineProperty(this, 'security', {\n\t    value: new KuzzleSecurity(this),\n\t    enumerable: true\n\t  });\n\t\n\t  /**\n\t   * Emit an event to all registered listeners\n\t   * An event cannot be emitted multiple times before a timeout has been reached.\n\t   */\n\t  Object.defineProperty(this, 'emitEvent', {\n\t    value: function emitEvent(event) {\n\t      var\n\t        now = Date.now(),\n\t        args = Array.prototype.slice.call(arguments, 1),\n\t        eventProperties = this.eventListeners[event];\n\t\n\t      if (eventProperties.lastEmitted && eventProperties.lastEmitted >= now - this.eventTimeout) {\n\t        return false;\n\t      }\n\t\n\t      eventProperties.listeners.forEach(function (listener) {\n\t        process.nextTick(function () {\n\t          listener.fn.apply(undefined, args);\n\t        });\n\t      });\n\t\n\t      // Events without the 'lastEmitted' property can be emitted without minimum time between emissions\n\t      if (eventProperties.lastEmitted !== undefined) {\n\t        eventProperties.lastEmitted = now;\n\t      }\n\t    }\n\t  });\n\t\n\t  Object.defineProperty(this, 'memoryStorage', {\n\t    value: new KuzzleMemoryStorage(this),\n\t    enumerable: true\n\t  });\n\t\n\t\n\t  if (!options || !options.connect || options.connect === 'auto') {\n\t    this.connect();\n\t  } else {\n\t    this.state = 'ready';\n\t  }\n\t\n\t  cleanHistory(this.requestHistory);\n\t\n\t  if (this.bluebird) {\n\t    return this.bluebird.promisifyAll(this, {\n\t      suffix: 'Promise',\n\t      filter: function (name, func, target, passes) {\n\t        var whitelist = ['getAllStatistics', 'getServerInfo', 'getStatistics',\n\t          'listCollections', 'listIndexes', 'login', 'logout', 'now', 'query',\n\t          'checkToken', 'whoAmI', 'updateSelf', 'getMyRights',\n\t          'refreshIndex', 'getAutoRefresh', 'setAutoRefresh'\n\t        ];\n\t\n\t        return passes && whitelist.indexOf(name) !== -1;\n\t      }\n\t    });\n\t  }\n\t};\n\t\n\t/**\n\t * Connects to a Kuzzle instance using the provided host name.\n\t * @returns {Object} this\n\t */\n\tKuzzle.prototype.connect = function () {\n\t  var self = this;\n\t\n\t  if (self.network) {\n\t    self.disconnect();\n\t  }\n\t\n\t  self.network = networkWrapper(self.host, self.wsPort, self.ioPort, self.sslConnection);\n\t\n\t  if (['initializing', 'ready', 'disconnected', 'error', 'offline'].indexOf(this.state) === -1) {\n\t    if (self.connectCB) {\n\t      self.connectCB(null, self);\n\t    }\n\t    return self;\n\t  }\n\t\n\t  self.state = 'connecting';\n\t  self.network.connect(self.autoReconnect, self.reconnectionDelay);\n\t\n\t  self.network.onConnect(function () {\n\t    self.state = 'connected';\n\t    renewAllSubscriptions.call(self);\n\t    dequeue.call(self);\n\t    self.emitEvent('connected');\n\t\n\t    if (self.connectCB) {\n\t      self.connectCB(null, self);\n\t    }\n\t  });\n\t\n\t  self.network.onConnectError(function (error) {\n\t    var connectionError = new Error('Unable to connect to kuzzle proxy server at \"' + self.host + '\"');\n\t\n\t    connectionError.internal = error;\n\t    self.state = 'error';\n\t    self.emitEvent('error', connectionError);\n\t\n\t    if (self.connectCB) {\n\t      self.connectCB(connectionError);\n\t    }\n\t  });\n\t\n\t  self.network.onDisconnect(function () {\n\t    self.state = 'offline';\n\t\n\t    if (!self.autoReconnect) {\n\t      self.disconnect();\n\t    }\n\t\n\t    if (self.autoQueue) {\n\t      self.queuing = true;\n\t    }\n\t\n\t    self.emitEvent('disconnected');\n\t  });\n\t\n\t  self.network.onReconnect(function () {\n\t    var reconnect = function () {\n\t      // renew subscriptions\n\t      if (self.autoResubscribe) {\n\t        renewAllSubscriptions.call(self);\n\t      }\n\t\n\t      // replay queued requests\n\t      if (self.autoReplay) {\n\t        cleanQueue.call(self);\n\t        dequeue.call(self);\n\t      }\n\t\n\t      // alert listeners\n\t      self.emitEvent('reconnected');\n\t    };\n\t\n\t    self.state = 'connected';\n\t\n\t    if (self.jwtToken) {\n\t      self.checkToken(self.jwtToken, function (err, res) {\n\t        // shouldn't obtain an error but let's invalidate the token anyway\n\t        if (err || !res.valid) {\n\t          self.jwtToken = undefined;\n\t          self.emitEvent('jwtTokenExpired');\n\t        }\n\t\n\t        reconnect();\n\t      });\n\t    } else {\n\t      reconnect();\n\t    }\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Set the jwtToken used to query kuzzle\n\t * @param token\n\t * @returns {Kuzzle}\n\t */\n\tKuzzle.prototype.setJwtToken = function(token) {\n\t  if (typeof token === 'string') {\n\t    this.jwtToken = token;\n\t  } else if (typeof token === 'object') {\n\t    if (token.result && token.result.jwt && typeof token.result.jwt === 'string') {\n\t      this.jwtToken = token.result.jwt;\n\t    } else {\n\t      this.emitEvent('loginAttempt', {\n\t        success: false,\n\t        error: 'Cannot find a valid JWT token in the following object: ' + JSON.stringify(token)\n\t      });\n\t\n\t      return this;\n\t    }\n\t  } else {\n\t    this.emitEvent('loginAttempt', {success: false, error: 'Invalid token argument: ' + token});\n\t    return this;\n\t  }\n\t\n\t  renewAllSubscriptions.call(this);\n\t  this.emitEvent('loginAttempt', {success: true});\n\t  return this;\n\t};\n\t\n\t/**\n\t * Unset the jwtToken used to query kuzzle\n\t * @returns {Kuzzle}\n\t */\n\tKuzzle.prototype.unsetJwtToken = function() {\n\t  this.jwtToken = undefined;\n\t\n\t  removeAllSubscriptions.call(this);\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Get the jwtToken used by kuzzle\n\t * @returns {Kuzzle}\n\t */\n\tKuzzle.prototype.getJwtToken = function() {\n\t  return this.jwtToken;\n\t};\n\t\n\t/**\n\t * Send login request to kuzzle with credentials\n\t * If login success, store the jwtToken into kuzzle object\n\t *\n\t * @param strategy\n\t * @param credentials\n\t * @param expiresIn\n\t * @param cb\n\t */\n\tKuzzle.prototype.login = function (strategy) {\n\t  var\n\t    self = this,\n\t    request = {\n\t      strategy: strategy\n\t    },\n\t    credentials,\n\t    cb = null;\n\t\n\t  // Handle arguments (credentials, expiresIn, cb)\n\t  if (arguments[1]) {\n\t    if (typeof arguments[1] === 'object') {\n\t      credentials = arguments[1];\n\t    } else if (typeof arguments[1] === 'number' || typeof arguments[1] === 'string') {\n\t      request.expiresIn = arguments[1];\n\t    } else if (typeof arguments[1] === 'function') {\n\t      cb = arguments[1];\n\t    }\n\t  }\n\t  if (arguments[2]) {\n\t    if (typeof arguments[2] === 'number' || typeof arguments[2] === 'string') {\n\t      request.expiresIn = arguments[2];\n\t    } else if (typeof arguments[2] === 'function') {\n\t      cb = arguments[2];\n\t    }\n\t  }\n\t  if (arguments[3] && typeof arguments[3] === 'function') {\n\t    cb = arguments[3];\n\t  }\n\t\n\t  if (typeof credentials === 'object') {\n\t    Object.keys(credentials).forEach(function (key) {\n\t      request[key] = credentials[key];\n\t    });\n\t  }\n\t\n\t  this.query({controller: 'auth', action: 'login'}, {body: request}, {queuable: false}, function(error, response) {\n\t    if (!error) {\n\t      if (response.result.jwt) {\n\t        self.setJwtToken(response.result.jwt);\n\t      }\n\t\n\t      cb && cb(null, response.result);\n\t    }\n\t    else {\n\t      cb && cb(error);\n\t      self.emitEvent('loginAttempt', {success: false, error: error.message});\n\t    }\n\t  });\n\t};\n\t\n\t/**\n\t * Send logout request to kuzzle with jwtToken.\n\t *\n\t * @param cb\n\t * @returns {Kuzzle}\n\t */\n\tKuzzle.prototype.logout = function (cb) {\n\t  var\n\t    self = this,\n\t    request = {\n\t      action: 'logout',\n\t      controller: 'auth',\n\t      requestId: uuid.v4(),\n\t      body: {}\n\t    };\n\t\n\t  this.query({controller: 'auth', action: 'logout'}, request, {queuable: false}, typeof cb !== 'function' ? null : function(error) {\n\t    if (error === null) {\n\t      self.unsetJwtToken();\n\t      cb(null, self);\n\t    }\n\t    else {\n\t      cb(error);\n\t    }\n\t  });\n\t\n\t  return self;\n\t};\n\t\n\t/**\n\t * Checks whether a given jwt token still represents a valid session in Kuzzle.\n\t *\n\t * @param  {string}   token     The jwt token to check\n\t * @param  {function} callback  The callback to be called when the response is\n\t *                              available. The signature is `function(error, response)`.\n\t */\n\tKuzzle.prototype.checkToken = function (token, callback) {\n\t  var\n\t    request = {\n\t      body: {\n\t        token: token\n\t      }\n\t    };\n\t\n\t  this.callbackRequired('Kuzzle.checkToken', callback);\n\t\n\t  this.query({controller: 'auth', action: 'checkToken'}, request, {queuable: false}, function (err, response) {\n\t    if (err) {\n\t      return callback(err);\n\t    }\n\t\n\t    callback(null, response.result);\n\t  });\n\t};\n\t\n\t/**\n\t * Fetches the current user.\n\t *\n\t * @param  {function} callback  The callback to be called when the response is\n\t *                              available. The signature is `function(error, response)`.\n\t */\n\tKuzzle.prototype.whoAmI = function (callback) {\n\t  var self = this;\n\t\n\t  self.callbackRequired('Kuzzle.whoAmI', callback);\n\t\n\t  self.query({controller: 'auth', action: 'getCurrentUser'}, {}, {}, function (err, response) {\n\t    if (err) {\n\t      return callback(err);\n\t    }\n\t\n\t    callback(null, new KuzzleUser(self.security, response.result._id, response.result._source));\n\t  });\n\t};\n\t\n\t/**\n\t * Gets the rights array of the currently logged user.\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param  {function} cb The callback containing the normalized array of rights.\n\t */\n\tKuzzle.prototype.getMyRights = function (options, cb) {\n\t  var self = this;\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.callbackRequired('Kuzzle.getMyRights', cb);\n\t\n\t  self.query({controller: 'auth', action:'getMyRights'}, {}, options, function (err, res) {\n\t    if (err) {\n\t      return cb(err);\n\t    }\n\t\n\t    cb(null, res.result.hits);\n\t  });\n\t};\n\t\n\t/**\n\t * Update current user in Kuzzle.\n\t *\n\t * @param {object} content - a plain javascript object representing the user's modification\n\t * @param {object} [options] - (optional) arguments\n\t * @param {responseCallback} [cb] - (optional) Handles the query response\n\t * @returns {Kuzzle} this object\n\t */\n\tKuzzle.prototype.updateSelf = function (content, options, cb) {\n\t  var\n\t    self = this,\n\t    data = {},\n\t    queryArgs = {controller: 'auth', action: 'updateSelf'};\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  data.body = content;\n\t\n\t  self.query(queryArgs, data, options, cb && function (err, res) {\n\t    cb(err, err ? undefined : res.result);\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Clean up the queue, ensuring the queryTTL and queryMaxSize properties are respected\n\t */\n\tfunction cleanQueue () {\n\t  var\n\t    self = this,\n\t    now = Date.now(),\n\t    lastDocumentIndex = -1;\n\t\n\t  if (self.queueTTL > 0) {\n\t    self.offlineQueue.forEach(function (query, index) {\n\t      if (query.ts < now - self.queueTTL) {\n\t        lastDocumentIndex = index;\n\t      }\n\t    });\n\t\n\t    if (lastDocumentIndex !== -1) {\n\t      self.offlineQueue\n\t        .splice(0, lastDocumentIndex + 1)\n\t        .forEach(function (droppedRequest) {\n\t          self.emitEvent('offlineQueuePop', droppedRequest.query);\n\t        });\n\t    }\n\t  }\n\t\n\t  if (self.queueMaxSize > 0 && self.offlineQueue.length > self.queueMaxSize) {\n\t    self.offlineQueue\n\t      .splice(0, self.offlineQueue.length - self.queueMaxSize)\n\t      .forEach(function (droppedRequest) {\n\t        self.emitEvent('offlineQueuePop', droppedRequest.query);\n\t      });\n\t  }\n\t}\n\t\n\t\n\t/**\n\t * Clean history from requests made more than 10s ago\n\t */\n\tfunction cleanHistory (requestHistory) {\n\t  var\n\t    now = Date.now();\n\t\n\t  Object.keys(requestHistory).forEach(function (key) {\n\t    if (requestHistory[key] < now - 10000) {\n\t      delete requestHistory[key];\n\t    }\n\t  });\n\t\n\t  setTimeout(function () {\n\t    cleanHistory(requestHistory);\n\t  }, 1000);\n\t}\n\t\n\t/**\n\t * Emit a request to Kuzzle\n\t *\n\t * @param {object} request\n\t * @param {responseCallback} [cb]\n\t */\n\tfunction emitRequest (request, cb) {\n\t  var\n\t    self = this;\n\t\n\t  if (self.jwtToken !== undefined || cb) {\n\t    self.network.once(request.requestId, function (response) {\n\t      var error = null;\n\t\n\t      if (request.action !== 'logout' && response.error && response.error.message === 'Token expired') {\n\t        self.jwtToken = undefined;\n\t        self.emitEvent('jwtTokenExpired', request, cb);\n\t      }\n\t\n\t      if (response.error) {\n\t        error = new Error(response.error.message);\n\t        Object.assign(error, response.error);\n\t        error.status = response.status;\n\t        self.emitEvent('queryError', error, request, cb);\n\t      }\n\t\n\t      if (cb) {\n\t        cb(error, response);\n\t      }\n\t    });\n\t  }\n\t\n\t  this.network.send(request);\n\t\n\t  // Track requests made to allow KuzzleRoom.subscribeToSelf to work\n\t  self.requestHistory[request.requestId] = Date.now();\n\t}\n\t\n\t/**\n\t * Play all queued requests, in order.\n\t */\n\tfunction dequeue () {\n\t  var\n\t    self = this,\n\t    additionalQueue,\n\t    uniqueQueue = {},\n\t    dequeuingProcess = function () {\n\t      if (self.offlineQueue.length > 0) {\n\t        emitRequest.call(self, self.offlineQueue[0].query, self.offlineQueue[0].cb);\n\t        self.emitEvent('offlineQueuePop', self.offlineQueue.shift());\n\t\n\t        setTimeout(function () {\n\t          dequeuingProcess();\n\t        }, Math.max(0, self.replayInterval));\n\t      } else {\n\t        self.queuing = false;\n\t      }\n\t    };\n\t\n\t  if (self.offlineQueueLoader) {\n\t    if (typeof self.offlineQueueLoader !== 'function') {\n\t      throw new Error('Invalid value for offlineQueueLoader property. Expected: function. Got: ' + typeof self.offlineQueueLoader);\n\t    }\n\t\n\t    additionalQueue = self.offlineQueueLoader();\n\t    if (Array.isArray(additionalQueue)) {\n\t      self.offlineQueue = additionalQueue\n\t        .concat(self.offlineQueue)\n\t        .filter(function (request) {\n\t          // throws if the query object does not contain required attributes\n\t          if (!request.query || request.query.requestId === undefined || !request.query.action || !request.query.controller) {\n\t            throw new Error('Invalid offline queue request. One or more missing properties: requestId, action, controller.');\n\t          }\n\t\n\t          return uniqueQueue.hasOwnProperty(request.query.requestId) ? false : (uniqueQueue[request.query.requestId] = true);\n\t        });\n\t    } else {\n\t      throw new Error('Invalid value returned by the offlineQueueLoader function. Expected: array. Got: ' + typeof additionalQueue);\n\t    }\n\t  }\n\t\n\t  dequeuingProcess();\n\t}\n\t\n\t/**\n\t * Renew all registered subscriptions. Triggered either by a successful connection/reconnection or by a\n\t * successful login attempt\n\t */\n\tfunction renewAllSubscriptions() {\n\t  var self = this;\n\t\n\t  Object.keys(self.subscriptions).forEach(function (roomId) {\n\t    Object.keys(self.subscriptions[roomId]).forEach(function (subscriptionId) {\n\t      var subscription = self.subscriptions[roomId][subscriptionId];\n\t      subscription.renew(subscription.callback);\n\t    });\n\t  });\n\t}\n\t\n\t/**\n\t * Remove all registered subscriptions. Triggered either by a logout query or by un-setting the token\n\t */\n\tfunction removeAllSubscriptions() {\n\t  var self = this;\n\t\n\t  Object.keys(self.subscriptions).forEach(function (roomId) {\n\t    Object.keys(self.subscriptions[roomId]).forEach(function (subscriptionId) {\n\t      var subscription = self.subscriptions[roomId][subscriptionId];\n\t      subscription.unsubscribe();\n\t    });\n\t  });\n\t}\n\t\n\t/**\n\t * Adds a listener to a Kuzzle global event. When an event is fired, listeners are called in the order of their\n\t * insertion.\n\t *\n\t * The ID returned by this function is required to remove this listener at a later time.\n\t *\n\t * @param {string} event - name of the global event to subscribe to (see the 'eventListeners' object property)\n\t * @param {function} listener - callback to invoke each time an event is fired\n\t * @returns {string} Unique listener ID\n\t */\n\tKuzzle.prototype.addListener = function(event, listener) {\n\t  var\n\t    knownEvents = Object.keys(this.eventListeners),\n\t    listenerType = typeof listener,\n\t    listenerId;\n\t\n\t  this.isValid();\n\t\n\t  if (knownEvents.indexOf(event) === -1) {\n\t    throw new Error('[' + event + '] is not a known event. Known events: ' + knownEvents.toString());\n\t  }\n\t\n\t  if (listenerType !== 'function') {\n\t    throw new Error('Invalid listener type: expected a function, got a ' + listenerType);\n\t  }\n\t\n\t  listenerId = uuid.v4();\n\t  this.eventListeners[event].listeners.push({id: listenerId, fn: listener});\n\t  return listenerId;\n\t};\n\t\n\t\n\t/**\n\t * Kuzzle monitors active connections, and ongoing/completed/failed requests.\n\t * This method returns all available statistics from Kuzzle.\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} cb - Handles the query response\n\t */\n\tKuzzle.prototype.getAllStatistics = function (options, cb) {\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  this.callbackRequired('Kuzzle.getAllStatistics', cb);\n\t\n\t  this.query({controller:'admin', action: 'getAllStats'}, {}, options, function (err, res) {\n\t    if (err) {\n\t      return cb(err);\n\t    }\n\t\n\t    cb(null, res.result.hits);\n\t  });\n\t};\n\t\n\t/**\n\t * Kuzzle monitors active connections, and ongoing/completed/failed requests.\n\t * This method allows getting either the last statistics frame, or a set of frames starting from a provided timestamp.\n\t *\n\t * @param {number} timestamp -  Epoch time. Starting time from which the frames are to be retrieved\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} cb - Handles the query response\n\t */\n\tKuzzle.prototype.getStatistics = function (timestamp, options, cb) {\n\t  var\n\t    queryCB,\n\t    body;\n\t\n\t  if (!cb) {\n\t    if (arguments.length === 1) {\n\t      cb = arguments[0];\n\t      options = null;\n\t      timestamp = null;\n\t    } else {\n\t      cb = arguments[1];\n\t      if (typeof arguments[0] === 'object') {\n\t        options = arguments[0];\n\t        timestamp = null;\n\t      } else {\n\t        timestamp = arguments[0];\n\t        options = null;\n\t      }\n\t    }\n\t  }\n\t\n\t  queryCB = function (err, res) {\n\t    if (err) {\n\t      return cb(err);\n\t    }\n\t\n\t    cb(null, timestamp ? res.result.hits : [res.result]);\n\t  };\n\t\n\t  this.callbackRequired('Kuzzle.getStatistics', cb);\n\t\n\t  body = timestamp ? {body: {startTime: timestamp}} : {};\n\t  this.query({controller: 'admin', action: timestamp ? 'getStats' : 'getLastStats'}, body, options, queryCB);\n\t};\n\t\n\t/**\n\t * Create a new instance of a KuzzleDataCollection object.\n\t * If no index is specified, takes the default index.\n\t *\n\t * @param {string} collection - The name of the data collection you want to manipulate\n\t * @param {string} [index] - The name of the data index containing the data collection\n\t * @returns {object} A KuzzleDataCollection instance\n\t */\n\tKuzzle.prototype.dataCollectionFactory = function(collection, index) {\n\t  this.isValid();\n\t\n\t  if (!index) {\n\t    if (!this.defaultIndex) {\n\t      throw new Error('Unable to create a new data collection object: no index specified');\n\t    }\n\t\n\t    index = this.defaultIndex;\n\t  }\n\t\n\t  if (typeof index !== 'string' || typeof collection !== 'string') {\n\t    throw new Error('Invalid index or collection argument: string expected');\n\t  }\n\t\n\t  if (!this.collections[index]) {\n\t    this.collections[index] = {};\n\t  }\n\t\n\t  if (!this.collections[index][collection]) {\n\t    this.collections[index][collection] = new KuzzleDataCollection(this, collection, index);\n\t  }\n\t\n\t  return this.collections[index][collection];\n\t};\n\t\n\t/**\n\t * Empties the offline queue without replaying it.\n\t *\n\t * @returns {Kuzzle}\n\t */\n\tKuzzle.prototype.flushQueue = function () {\n\t  this.offlineQueue = [];\n\t  return this;\n\t};\n\t\n\t/**\n\t * Returns the list of known persisted data collections.\n\t *\n\t * @param {string} [index] - Index containing collections to be listed\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} cb - Handles the query response\n\t */\n\tKuzzle.prototype.listCollections = function () {\n\t  var\n\t    collectionType = 'all',\n\t    index,\n\t    options,\n\t    cb,\n\t    args = Array.prototype.slice.call(arguments),\n\t    query;\n\t\n\t  args.forEach(function(arg) {\n\t    switch (typeof arg) {\n\t      case 'string':\n\t        index = arg;\n\t        break;\n\t      case 'object':\n\t        options = arg;\n\t        break;\n\t      case 'function':\n\t        cb = arg;\n\t        break;\n\t    }\n\t  });\n\t\n\t  if (!index) {\n\t    if (!this.defaultIndex) {\n\t      throw new Error('Kuzzle.listCollections: index required');\n\t    }\n\t\n\t    index = this.defaultIndex;\n\t  }\n\t\n\t  this.callbackRequired('Kuzzle.listCollections', cb);\n\t\n\t  if (options && options.type) {\n\t    collectionType = options.type;\n\t  }\n\t\n\t  query = {body: {type: collectionType}};\n\t\n\t  if (options && options.from) {\n\t    query.body.from = options.from;\n\t  }\n\t\n\t  if (options && options.size) {\n\t    query.body.size = options.size;\n\t  }\n\t\n\t  this.query({index: index, controller: 'read', action: 'listCollections'}, query, options, function (err, res) {\n\t    if (err) {\n\t      return cb(err);\n\t    }\n\t\n\t    cb(null, res.result.collections);\n\t  });\n\t};\n\t\n\t/**\n\t * Returns the list of existing indexes in Kuzzle\n\t *\n\t * @param {object} [options] - Optional arguments\n\t * @param {responseCallback} cb - Handles the query response\n\t */\n\tKuzzle.prototype.listIndexes = function (options, cb) {\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  this.callbackRequired('Kuzzle.listIndexes', cb);\n\t\n\t  this.query({controller: 'read', action: 'listIndexes'}, {}, options, function (err, res) {\n\t    cb(err, err ? undefined : res.result.indexes);\n\t  });\n\t};\n\t\n\t/**\n\t * Disconnects from Kuzzle and invalidate this instance.\n\t */\n\tKuzzle.prototype.disconnect = function () {\n\t  var collection;\n\t\n\t  this.state = 'disconnected';\n\t  this.network.close();\n\t  this.network = null;\n\t\n\t  for (collection in this.collections) {\n\t    if (this.collections.hasOwnProperty(collection)) {\n\t      delete this.collections[collection];\n\t    }\n\t  }\n\t};\n\t\n\t/**\n\t * Returns the server informations\n\t *\n\t * @param {object} [options] - Optional arguments\n\t * @param {responseCallback} cb - Handles the query response\n\t */\n\tKuzzle.prototype.getServerInfo = function (options, cb) {\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  this.callbackRequired('Kuzzle.getServerInfo', cb);\n\t\n\t  this.query({controller: 'read', action: 'serverInfo'}, {}, options, function (err, res) {\n\t    if (err) {\n\t      return cb(err);\n\t    }\n\t\n\t    cb(null, res.result.serverInfo);\n\t  });\n\t};\n\t\n\t/**\n\t * Forces an index refresh\n\t *\n\t * @param {string} index - The index to refresh. Defaults to Kuzzle.defaultIndex\n\t * @param {object} options - Optional arguments\n\t * @param {responseCallback} cb - Handles the query response\n\t * @returns {Kuzzle}\n\t */\n\tKuzzle.prototype.refreshIndex = function () {\n\t  var\n\t    index,\n\t    options,\n\t    cb;\n\t\n\t  Array.prototype.slice.call(arguments).forEach(function(arg) {\n\t    switch (typeof arg) {\n\t      case 'string':\n\t        index = arg;\n\t        break;\n\t      case 'object':\n\t        options = arg;\n\t        break;\n\t      case 'function':\n\t        cb = arg;\n\t        break;\n\t    }\n\t  });\n\t\n\t  if (!index) {\n\t    if (!this.defaultIndex) {\n\t      throw new Error('Kuzzle.refreshIndex: index required');\n\t    }\n\t    index = this.defaultIndex;\n\t  }\n\t\n\t  this.query({ index: index, controller: 'admin', action: 'refreshIndex'}, {}, options, cb);\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Returns de current autoRefresh status for the given index\n\t *\n\t * @param {string} index - The index to get the status from. Defaults to Kuzzle.defaultIndex\n\t * @param {object} options - Optinal arguments\n\t * @param {responseCallback} cb - Handles the query response\n\t */\n\tKuzzle.prototype.getAutoRefresh = function () {\n\t  var\n\t    index,\n\t    options,\n\t    cb;\n\t\n\t  Array.prototype.slice.call(arguments).forEach(function (arg) {\n\t    switch (typeof arg) {\n\t      case 'string':\n\t        index = arg;\n\t        break;\n\t      case 'object':\n\t        options = arg;\n\t        break;\n\t      case 'function':\n\t        cb = arg;\n\t        break;\n\t    }\n\t  });\n\t\n\t  if (!index) {\n\t    if (!this.defaultIndex) {\n\t      throw new Error('Kuzzle.getAutoRefresh: index required');\n\t    }\n\t    index = this.defaultIndex;\n\t  }\n\t\n\t  this.callbackRequired('Kuzzle.getAutoRefresh', cb);\n\t  this.query({ index: index, controller: 'admin', action: 'getAutoRefresh'}, {}, options, cb);\n\t};\n\t\n\t/**\n\t * (Un)Sets the autoRefresh flag on the given index\n\t *\n\t * @param {string} index - the index to modify. Defaults to Kuzzle.defaultIndex\n\t * @param {boolean} autoRefresh - The autoRefresh value to set\n\t * @param {object} options - Optional arguments\n\t * @param {responseCallback} cb - Handles the query result\n\t * @returns {object} this\n\t */\n\tKuzzle.prototype.setAutoRefresh = function () {\n\t  var\n\t    index,\n\t    autoRefresh,\n\t    options,\n\t    cb;\n\t\n\t  Array.prototype.slice.call(arguments).forEach(function (arg) {\n\t    switch (typeof arg) {\n\t      case 'string':\n\t        index = arg;\n\t        break;\n\t      case 'boolean':\n\t        autoRefresh = arg;\n\t        break;\n\t      case 'object':\n\t        options = arg;\n\t        break;\n\t      case 'function':\n\t        cb = arg;\n\t        break;\n\t    }\n\t  });\n\t\n\t  if (!index) {\n\t    if (!this.defaultIndex) {\n\t      throw new Error('Kuzzle.setAutoRefresh: index required');\n\t    }\n\t    index = this.defaultIndex;\n\t  }\n\t\n\t  if (autoRefresh === undefined) {\n\t    throw new Error('Kuzzle.setAutoRefresh: autoRefresh value is required');\n\t  }\n\t\n\t  this.query({ index: index, controller: 'admin', action: 'setAutoRefresh'}, { body: { autoRefresh: autoRefresh }}, options, cb);\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Return the current Kuzzle's UTC Epoch time, in milliseconds\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} cb - Handles the query response\n\t */\n\tKuzzle.prototype.now = function (options, cb) {\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  this.callbackRequired('Kuzzle.now', cb);\n\t\n\t  this.query({controller: 'read', action: 'now'}, {}, options, function (err, res) {\n\t    cb(err, res && res.result.now);\n\t  });\n\t};\n\t\n\t/**\n\t * This is a low-level method, exposed to allow advanced SDK users to bypass high-level methods.\n\t * Base method used to send read queries to Kuzzle\n\t *\n\t * Takes an optional argument object with the following properties:\n\t *    - metadata (object, default: null):\n\t *        Additional information passed to notifications to other users\n\t *\n\t * @param {object} queryArgs - Query configuration\n\t * @param {object} query - The query data\n\t * @param {object} [options] - Optional arguments\n\t * @param {responseCallback} [cb] - Handles the query response\n\t */\n\tKuzzle.prototype.query = function (queryArgs, query, options, cb) {\n\t  var\n\t    attr,\n\t    object = {\n\t      action: queryArgs.action,\n\t      controller: queryArgs.controller,\n\t      metadata: this.metadata\n\t    },\n\t    self = this;\n\t\n\t  this.isValid();\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  if (options) {\n\t    if (options.queuable === false && self.state === 'offline') {\n\t      return self;\n\t    }\n\t\n\t    if (options.refresh) {\n\t      object.refresh = options.refresh;\n\t    }\n\t\n\t    if (options.metadata) {\n\t      Object.keys(options.metadata).forEach(function (meta) {\n\t        object.metadata[meta] = options.metadata[meta];\n\t      });\n\t    }\n\t  }\n\t\n\t  if (!query || typeof query !== 'object' || Array.isArray(query)) {\n\t    throw new Error('Invalid query parameter: ' + query);\n\t  }\n\t\n\t  if (query.metadata) {\n\t    Object.keys(query.metadata).forEach(function (meta) {\n\t      object.metadata[meta] = query.metadata[meta];\n\t    });\n\t  }\n\t\n\t  for (attr in query) {\n\t    if (attr !== 'metadata' && query.hasOwnProperty(attr)) {\n\t      object[attr] = query[attr];\n\t    }\n\t  }\n\t\n\t  object = self.addHeaders(object, this.headers);\n\t\n\t  /*\n\t   * Do not add the token for the checkToken route, to avoid getting a token error when\n\t   * a developer simply wish to verify his token\n\t   */\n\t  if (self.jwtToken !== undefined && !(object.controller === 'auth' && object.action === 'checkToken')) {\n\t    object.jwt = self.jwtToken;\n\t  }\n\t\n\t  if (queryArgs.collection) {\n\t    object.collection = queryArgs.collection;\n\t  }\n\t\n\t  if (queryArgs.index) {\n\t    object.index = queryArgs.index;\n\t  }\n\t\n\t  if (!object.requestId) {\n\t    object.requestId = uuid.v4();\n\t  }\n\t\n\t  if (self.state === 'connected' || (options && options.queuable === false)) {\n\t    if (self.state === 'connected') {\n\t      emitRequest.call(this, object, cb);\n\t    } else if (cb) {\n\t      cb(new Error('Unable to execute request: not connected to a Kuzzle server.\\nDiscarded request: ' + JSON.stringify(object)));\n\t    }\n\t  } else if (self.queuing || ['initializing', 'connecting'].indexOf(self.state) !== -1) {\n\t    cleanQueue.call(this, object, cb);\n\t\n\t    if (!self.queueFilter || self.queueFilter(object)) {\n\t      self.offlineQueue.push({ts: Date.now(), query: object, cb: cb});\n\t      self.emitEvent('offlineQueuePush', {query: object, cb: cb});\n\t    }\n\t  }\n\t\n\t  return self;\n\t};\n\t\n\t/**\n\t * Removes all listeners, either from a specific event or from all events\n\t *\n\t * @param {string} event - One of the event described in the Event Handling section of this documentation\n\t * @returns {Kuzzle} this object\n\t */\n\tKuzzle.prototype.removeAllListeners = function (event) {\n\t  var\n\t    knownEvents = Object.keys(this.eventListeners),\n\t    self = this;\n\t\n\t  if (event) {\n\t    if (knownEvents.indexOf(event) === -1) {\n\t      throw new Error('[' + event + '] is not a known event. Known events: ' + knownEvents.toString());\n\t    }\n\t\n\t    this.eventListeners[event].listeners = [];\n\t  } else {\n\t    knownEvents.forEach(function (eventName) {\n\t      self.eventListeners[eventName].listeners = [];\n\t    });\n\t  }\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Removes a listener from an event.\n\t *\n\t * @param {string} event - One of the event described in the Event Handling section of this documentation\n\t * @param {string} listenerId - The ID returned by addListener\n\t * @returns {Kuzzle} this object\n\t */\n\tKuzzle.prototype.removeListener = function (event, listenerId) {\n\t  var\n\t    knownEvents = Object.keys(this.eventListeners),\n\t    self = this;\n\t\n\t  if (knownEvents.indexOf(event) === -1) {\n\t    throw new Error('[' + event + '] is not a known event. Known events: ' + knownEvents.toString());\n\t  }\n\t\n\t  this.eventListeners[event].listeners.forEach(function (listener, index) {\n\t    if (listener.id === listenerId) {\n\t      self.eventListeners[event].listeners.splice(index, 1);\n\t    }\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Replays the requests queued during offline mode.\n\t * Works only if the SDK is not in a disconnected state, and if the autoReplay option is set to false.\n\t */\n\tKuzzle.prototype.replayQueue = function () {\n\t  if (this.state !== 'offline' && !this.autoReplay) {\n\t    cleanQueue.call(this);\n\t    dequeue.call(this);\n\t  }\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Sets the default Kuzzle index\n\t *\n\t * @param index\n\t * @returns this\n\t */\n\tKuzzle.prototype.setDefaultIndex = function (index) {\n\t  if (typeof index !== 'string') {\n\t    throw new Error('Invalid default index: [' + index + '] (an index name is expected)');\n\t  }\n\t\n\t  if (index.length === 0) {\n\t    throw new Error('Cannot set an empty index as the default index');\n\t  }\n\t\n\t  this.defaultIndex = index;\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Helper function allowing to set headers while chaining calls.\n\t *\n\t * If the replace argument is set to true, replace the current headers with the provided content.\n\t * Otherwise, it appends the content to the current headers, only replacing already existing values\n\t *\n\t * @param content - new headers content\n\t * @param [replace] - default: false = append the content. If true: replace the current headers with tj\n\t */\n\tKuzzle.prototype.setHeaders = function (content, replace) {\n\t  var self = this;\n\t\n\t  if (typeof content !== 'object' || Array.isArray(content)) {\n\t    throw new Error('Expected a content object, received a ' + typeof content);\n\t  }\n\t\n\t  if (replace) {\n\t    self.headers = content;\n\t  } else {\n\t    Object.keys(content).forEach(function (key) {\n\t      self.headers[key] = content[key];\n\t    });\n\t  }\n\t\n\t  return self;\n\t};\n\t\n\t/**\n\t * Starts the requests queuing. Works only during offline mode, and if the autoQueue option is set to false.\n\t */\n\tKuzzle.prototype.startQueuing = function () {\n\t  if (this.state === 'offline' && !this.autoQueue) {\n\t    this.queuing = true;\n\t  }\n\t  return this;\n\t};\n\t\n\t/**\n\t * Stops the requests queuing. Works only during offline mode, and if the autoQueue option is set to false.\n\t */\n\tKuzzle.prototype.stopQueuing = function () {\n\t  if (this.state === 'offline' && !this.autoQueue) {\n\t    this.queuing = false;\n\t  }\n\t\n\t  return this;\n\t};\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tfunction KuzzleSecurityDocument(kuzzleSecurity, id, content) {\n\t\n\t  if (!id) {\n\t    throw new Error('A security document must have an id');\n\t  }\n\t\n\t  // Define properties\n\t  Object.defineProperties(this, {\n\t    // private properties\n\t    kuzzle: {\n\t      value: kuzzleSecurity.kuzzle\n\t    },\n\t    kuzzleSecurity: {\n\t      value: kuzzleSecurity\n\t    },\n\t    // read-only properties\n\t    // writable properties\n\t    id: {\n\t      value: id,\n\t      enumerable: true\n\t    },\n\t    content: {\n\t      value: {},\n\t      writable: true,\n\t      enumerable: true\n\t    }\n\t  });\n\t\n\t  if (content) {\n\t    this.setContent(content, true);\n\t  }\n\t\n\t  // promisifying\n\t  if (kuzzleSecurity.kuzzle.bluebird) {\n\t    return kuzzleSecurity.kuzzle.bluebird.promisifyAll(this, {\n\t      suffix: 'Promise',\n\t      filter: function (name, func, target, passes) {\n\t        var whitelist = ['delete', 'update'];\n\t\n\t        return passes && whitelist.indexOf(name) !== -1;\n\t      }\n\t    });\n\t  }\n\t}\n\t\n\t/**\n\t * Replaces the current content with new data.\n\t * Changes made by this function won’t be applied until the save method is called.\n\t *\n\t * @param {Object} data - New securityDocument content\n\t * @return {KuzzleSecurityDocument} this\n\t */\n\tKuzzleSecurityDocument.prototype.setContent = function (data) {\n\t  this.content = data;\n\t  return this;\n\t};\n\t\n\t/**\n\t * Serialize this object into a pojo\n\t *\n\t * @return {object} pojo representing this securityDocument\n\t */\n\tKuzzleSecurityDocument.prototype.serialize = function () {\n\t  var\n\t    data = {};\n\t\n\t  if (this.id) {\n\t    data._id = this.id;\n\t  }\n\t\n\t  data.body = this.content;\n\t\n\t  return data;\n\t};\n\t\n\t/**\n\t * Delete the current KuzzleSecurityDocument into Kuzzle.\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - Handles the query response\n\t */\n\tKuzzleSecurityDocument.prototype.delete = function (options, cb) {\n\t  var\n\t    self = this;\n\t\n\t  if (options && cb === undefined && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.query(this.kuzzleSecurity.buildQueryArgs(this.deleteActionName), {_id: this.id}, options, function (error, res) {\n\t    if (error) {\n\t      return cb ? cb(error) : false;\n\t    }\n\t\n\t    if (cb) {\n\t      cb(null, res.result._id);\n\t    }\n\t  });\n\t};\n\t\n\t/**\n\t * Update the current KuzzleSecurityDocument into Kuzzle.\n\t *\n\t * @param {object} content - Content to add to KuzzleSecurityDocument\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @returns {KuzzleSecurityDocument} this\n\t */\n\tKuzzleSecurityDocument.prototype.update = function (content, options, cb) {\n\t  var\n\t    data = {},\n\t    self = this;\n\t\n\t  if (typeof content !== 'object') {\n\t    throw new Error('Parameter \"content\" must be a object');\n\t  }\n\t\n\t  if (options && cb === undefined && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  data._id = self.id;\n\t  data.body = content;\n\t\n\t  self.kuzzle.query(this.kuzzleSecurity.buildQueryArgs(this.updateActionName), data, options, function (error, response) {\n\t    if (error) {\n\t      return cb ? cb(error) : false;\n\t    }\n\t\n\t    self.setContent(response.result._source);\n\t\n\t    if (cb) {\n\t      cb(null, self);\n\t    }\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\tmodule.exports = KuzzleSecurityDocument;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tfunction WSNode(host, port, ssl) {\n\t  var self = this;\n\t  this.WebSocket = typeof WebSocket !== 'undefined' ? WebSocket : __webpack_require__(!(function webpackMissingModule() { var e = new Error(\"Cannot find module \\\"ws\\\"\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n\t  this.host = host;\n\t  this.port = port;\n\t  this.ssl = ssl;\n\t  this.client = null;\n\t  this.wasConnected = false;\n\t  this.retrying = false;\n\t  this.lasturl = null;\n\t\n\t  /*\n\t   Listeners are stored using the following format:\n\t   roomId: {\n\t   fn: callback_function,\n\t   once: boolean\n\t   }\n\t   */\n\t  this.listeners = {\n\t    error: [],\n\t    connect: [],\n\t    disconnect: [],\n\t    reconnect: []\n\t  };\n\t\n\t  /**\n\t   * Creates a new socket from the provided arguments\n\t   *\n\t   * @constructor\n\t   * @param {boolean} autoReconnect\n\t   * @param {int} reconnectionDelay\n\t   * @returns {Object} Socket\n\t   */\n\t  this.connect = function (autoReconnect, reconnectionDelay) {\n\t    var\n\t      url = (this.ssl ? 'wss://' : 'ws://') + this.host + ':' + this.port,\n\t      options = typeof window !== 'undefined' ? undefined : {perMessageDeflate: false};\n\t\n\t    if (url !== this.lasturl) {\n\t      self.wasConnected = false;\n\t      this.lasturl = url;\n\t    }\n\t\n\t    this.client = new this.WebSocket(url, options);\n\t\n\t    this.client.onopen = function () {\n\t      if (self.wasConnected) {\n\t        poke(self.listeners, 'reconnect');\n\t      }\n\t      else {\n\t        poke(self.listeners, 'connect');\n\t      }\n\t      self.wasConnected = true;\n\t    };\n\t\n\t    this.client.onclose = function (code, message) {\n\t      if (code === 1000) {\n\t        poke(self.listeners, 'disconnect');\n\t      }\n\t      else {\n\t        onClientError.call(self, autoReconnect, reconnectionDelay, message);\n\t      }\n\t    };\n\t\n\t    this.client.onerror = function (error) {\n\t      onClientError.call(self, autoReconnect, reconnectionDelay, error);\n\t    };\n\t\n\t    this.client.onmessage = function (payload) {\n\t      var data = JSON.parse(payload.data || payload);\n\t\n\t      if (data.room && self.listeners[data.room]) {\n\t        poke(self.listeners, data.room, data);\n\t      }\n\t    };\n\t  };\n\t\n\t  /**\n\t   * Fires the provided callback whence a connection is established\n\t   *\n\t   * @param {function} callback\n\t   */\n\t  this.onConnect = function (callback) {\n\t    this.listeners.connect.push({\n\t      fn: callback,\n\t      keep: true\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Fires the provided callback whenever a connection error is received\n\t   * @param {function} callback\n\t   */\n\t  this.onConnectError = function (callback) {\n\t    this.listeners.error.push({\n\t      fn: callback,\n\t      keep: true\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Fires the provided callback whenever a disconnection occurred\n\t   * @param {function} callback\n\t   */\n\t  this.onDisconnect = function (callback) {\n\t    this.listeners.disconnect.push({\n\t      fn: callback,\n\t      keep: true\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Fires the provided callback whenever a connection has been reestablished\n\t   * @param {function} callback\n\t   */\n\t  this.onReconnect = function (callback) {\n\t    this.listeners.reconnect.push({\n\t      fn: callback,\n\t      keep: true\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Registers a callback on a room. Once 1 message is received, fires the\n\t   * callback and unregister it afterward.\n\t   *\n\t   * @param {string} roomId\n\t   * @param {function} callback\n\t   */\n\t  this.once = function (roomId, callback) {\n\t    if (!this.listeners[roomId]) {\n\t      this.listeners[roomId] = [];\n\t    }\n\t\n\t    this.listeners[roomId].push({\n\t      fn: callback,\n\t      keep: false\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Registers a callback on a room.\n\t   *\n\t   * @param {string} roomId\n\t   * @param {function} callback\n\t   */\n\t  this.on = function (roomId, callback) {\n\t    if (!this.listeners[roomId]) {\n\t      this.listeners[roomId] = [];\n\t    }\n\t\n\t    this.listeners[roomId].push({\n\t      fn: callback,\n\t      keep: true\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Unregisters a callback from a room.\n\t   *\n\t   * @param {string} roomId\n\t   * @param {function} callback\n\t   */\n\t  this.off = function (roomId, callback) {\n\t    var index;\n\t\n\t    if (this.listeners[roomId]) {\n\t      index = this.listeners[roomId].findIndex(function (listener) {\n\t        return listener.fn === callback;\n\t      });\n\t\n\t      if (index !== -1) {\n\t        if (this.listeners[roomId].length === 1 && ['error', 'connect', 'disconnect', 'reconnect'].indexOf(roomId) === -1) {\n\t          delete this.listeners[roomId];\n\t        }\n\t        else {\n\t          this.listeners[roomId].splice(index, 1);\n\t        }\n\t      }\n\t    }\n\t  };\n\t\n\t\n\t  /**\n\t   * Sends a payload to the connected server\n\t   *\n\t   * @param {Object} payload\n\t   */\n\t  this.send = function (payload) {\n\t    if (this.client && this.client.readyState === this.client.OPEN) {\n\t      this.client.send(JSON.stringify(payload));\n\t    }\n\t  };\n\t\n\t  /**\n\t   * Closes the connection\n\t   */\n\t  this.close = function () {\n\t    this.listeners = {\n\t      error: [],\n\t      connect: [],\n\t      disconnect: [],\n\t      reconnect: []\n\t    };\n\t\n\t    this.wasConnected = false;\n\t    this.client.close();\n\t    this.client = null;\n\t  };\n\t}\n\t\n\t/**\n\t * Executes all registered listeners in the provided\n\t * \"listeners\" structure.\n\t *\n\t * Listeners are of the following format:\n\t * [\n\t *    { fn: callback, once: boolean },\n\t *    ...\n\t * ]\n\t *\n\t * @private\n\t * @param {Object} listeners\n\t * @param {string} roomId\n\t * @param {Object} [payload]\n\t */\n\tfunction poke (listeners, roomId, payload) {\n\t  var\n\t    i,\n\t    length = listeners[roomId].length;\n\t\n\t  for (i = 0; i < length; ++i) {\n\t    listeners[roomId][i].fn(payload);\n\t\n\t    if (!listeners[roomId][i].keep) {\n\t      if (listeners[roomId].length > 1) {\n\t        listeners[roomId].splice(i, 1);\n\t        --i;\n\t        --length;\n\t      }\n\t      else {\n\t        delete listeners[roomId];\n\t      }\n\t    }\n\t  }\n\t}\n\t\n\t/**\n\t * Called when the connection closes with an error state\n\t *\n\t * @param {boolean} autoReconnect\n\t * @param {number} reconnectionDelay\n\t * @param {string|Object} message\n\t */\n\tfunction onClientError(autoReconnect, reconnectionDelay, message) {\n\t  var self = this;\n\t\n\t  if (autoReconnect && !self.retrying) {\n\t    self.retrying = true;\n\t    setTimeout(function () {\n\t      self.retrying = false;\n\t      self.connect(autoReconnect, reconnectionDelay);\n\t    }, reconnectionDelay);\n\t  }\n\t\n\t  poke(self.listeners, 'error', message);\n\t}\n\t\n\tmodule.exports = WSNode;\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar\n\t  KuzzleSecurityDocument = __webpack_require__(1);\n\t\n\t/**\n\t * @param {KuzzleSecurity} kuzzleSecurity\n\t * @param {string} id\n\t * @param {Object} content\n\t * @constructor\n\t */\n\tfunction KuzzleUser(kuzzleSecurity, id, content) {\n\t\n\t  KuzzleSecurityDocument.call(this, kuzzleSecurity, id, content);\n\t\n\t  // Define properties\n\t  Object.defineProperties(this, {\n\t    // private properties\n\t    deleteActionName: {\n\t      value: 'deleteUser'\n\t    },\n\t    updateActionName: {\n\t      value: 'updateUser'\n\t    }\n\t  });\n\t\n\t  // promisifying\n\t  if (kuzzleSecurity.kuzzle.bluebird) {\n\t    return kuzzleSecurity.kuzzle.bluebird.promisifyAll(this, {\n\t      suffix: 'Promise',\n\t      filter: function (name, func, target, passes) {\n\t        var whitelist = ['save', 'saveRestricted'];\n\t\n\t        return passes && whitelist.indexOf(name) !== -1;\n\t      }\n\t    });\n\t  }\n\t}\n\t\n\tKuzzleUser.prototype = Object.create(KuzzleSecurityDocument.prototype, {\n\t  constructor: {\n\t    value: KuzzleUser\n\t  }\n\t});\n\t\n\t/**\n\t * Set profiles in content\n\t * @param {array} profileIds - an array of profiles ids string\n\t *\n\t * @returns {KuzzleUser} this\n\t */\n\tKuzzleUser.prototype.setProfiles = function (profileIds) {\n\t  if (!Array.isArray(profileIds) || typeof profileIds[0] !== 'string') {\n\t    throw new Error('Parameter \"profileIds\" must be an array of strings');\n\t  }\n\t\n\t  this.content.profileIds = profileIds;\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Add a profile\n\t * @param {string} profileId - a profile ids string\n\t *\n\t * @returns {KuzzleUser} this\n\t */\n\tKuzzleUser.prototype.addProfile = function (profileId) {\n\t  if (typeof profileId !== 'string') {\n\t    throw new Error('Parameter \"profileId\" must be a string');\n\t  }\n\t\n\t  if (!this.content.profileIds) {\n\t    this.content.profileIds = [];\n\t  }\n\t\n\t  if (this.content.profileIds.indexOf(profileId) === -1) {\n\t    this.content.profileIds.push(profileId);\n\t  }\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Saves this user into Kuzzle.\n\t *\n\t * If this is a new user, this function will create it in Kuzzle.\n\t * Otherwise, this method will replace the latest version of this user in Kuzzle by the current content\n\t * of this object.\n\t *\n\t * @param {object|responseCallback} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @returns {KuzzleUser} this\n\t */\n\tKuzzleUser.prototype.save = function (options, cb) {\n\t  var\n\t    data = this.serialize(),\n\t    self = this;\n\t\n\t  if (options && cb === undefined && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.query(this.kuzzleSecurity.buildQueryArgs('createOrReplaceUser'), data, options, cb && function (error) {\n\t    cb(error, error ? undefined : self);\n\t  });\n\t\n\t  return self;\n\t};\n\t\n\t/**\n\t * Saves this user as restricted into Kuzzle.\n\t *\n\t * This function will create a new user. It is not usable to update an existing user.\n\t * The \"profileIds\" property must not be provided, or the request will be rejected by Kuzzle.\n\t * This function allows anonymous users to create a \"restricted\" user with predefined rights.\n\t *\n\t * @param {object|responseCallback} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @returns {KuzzleUser} this\n\t */\n\tKuzzleUser.prototype.saveRestricted = function (options, cb) {\n\t  var\n\t    data = this.serialize(),\n\t    self = this;\n\t\n\t  if (options && cb === undefined && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.query(this.kuzzleSecurity.buildQueryArgs('createRestrictedUser'), data, options, cb && function (error) {\n\t    cb(error, error ? undefined : self);\n\t  });\n\t\n\t  return self;\n\t};\n\t\n\t/**\n\t * Serialize this object into a JSON object\n\t *\n\t * @return {object} JSON object representing this User\n\t */\n\tKuzzleUser.prototype.serialize = function () {\n\t  return {_id: this.id, body: this.content};\n\t};\n\t\n\t/**\n\t * Return the associated profiles IDs\n\t *\n\t * @return {array} the associated profiles IDs\n\t */\n\tKuzzleUser.prototype.getProfiles = function () {\n\t  return this.content.profileIds;\n\t};\n\t\n\tmodule.exports = KuzzleUser;\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Unique ID creation requires a high quality random # generator.  We feature\n\t// detect to determine the best RNG source, normalizing to a function that\n\t// returns 128-bits of randomness, since that's what's usually required\n\tvar _rng = __webpack_require__(16);\n\t\n\t// Maps for number <-> hex string conversion\n\tvar _byteToHex = [];\n\tvar _hexToByte = {};\n\tfor (var i = 0; i < 256; ++i) {\n\t  _byteToHex[i] = (i + 0x100).toString(16).substr(1);\n\t  _hexToByte[_byteToHex[i]] = i;\n\t}\n\t\n\tfunction buff_to_string(buf, offset) {\n\t  var i = offset || 0;\n\t  var bth = _byteToHex;\n\t  return  bth[buf[i++]] + bth[buf[i++]] +\n\t          bth[buf[i++]] + bth[buf[i++]] + '-' +\n\t          bth[buf[i++]] + bth[buf[i++]] + '-' +\n\t          bth[buf[i++]] + bth[buf[i++]] + '-' +\n\t          bth[buf[i++]] + bth[buf[i++]] + '-' +\n\t          bth[buf[i++]] + bth[buf[i++]] +\n\t          bth[buf[i++]] + bth[buf[i++]] +\n\t          bth[buf[i++]] + bth[buf[i++]];\n\t}\n\t\n\t// **`v1()` - Generate time-based UUID**\n\t//\n\t// Inspired by https://github.com/LiosK/UUID.js\n\t// and http://docs.python.org/library/uuid.html\n\t\n\t// random #'s we need to init node and clockseq\n\tvar _seedBytes = _rng();\n\t\n\t// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\n\tvar _nodeId = [\n\t  _seedBytes[0] | 0x01,\n\t  _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]\n\t];\n\t\n\t// Per 4.2.2, randomize (14 bit) clockseq\n\tvar _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;\n\t\n\t// Previous uuid creation time\n\tvar _lastMSecs = 0, _lastNSecs = 0;\n\t\n\t// See https://github.com/broofa/node-uuid for API details\n\tfunction v1(options, buf, offset) {\n\t  var i = buf && offset || 0;\n\t  var b = buf || [];\n\t\n\t  options = options || {};\n\t\n\t  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\t\n\t  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n\t  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n\t  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n\t  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n\t  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\t\n\t  // Per 4.2.1.2, use count of uuid's generated during the current clock\n\t  // cycle to simulate higher resolution clock\n\t  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\t\n\t  // Time since last uuid creation (in msecs)\n\t  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\t\n\t  // Per 4.2.1.2, Bump clockseq on clock regression\n\t  if (dt < 0 && options.clockseq === undefined) {\n\t    clockseq = clockseq + 1 & 0x3fff;\n\t  }\n\t\n\t  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n\t  // time interval\n\t  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n\t    nsecs = 0;\n\t  }\n\t\n\t  // Per 4.2.1.2 Throw error if too many uuids are requested\n\t  if (nsecs >= 10000) {\n\t    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n\t  }\n\t\n\t  _lastMSecs = msecs;\n\t  _lastNSecs = nsecs;\n\t  _clockseq = clockseq;\n\t\n\t  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n\t  msecs += 12219292800000;\n\t\n\t  // `time_low`\n\t  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n\t  b[i++] = tl >>> 24 & 0xff;\n\t  b[i++] = tl >>> 16 & 0xff;\n\t  b[i++] = tl >>> 8 & 0xff;\n\t  b[i++] = tl & 0xff;\n\t\n\t  // `time_mid`\n\t  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n\t  b[i++] = tmh >>> 8 & 0xff;\n\t  b[i++] = tmh & 0xff;\n\t\n\t  // `time_high_and_version`\n\t  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n\t  b[i++] = tmh >>> 16 & 0xff;\n\t\n\t  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n\t  b[i++] = clockseq >>> 8 | 0x80;\n\t\n\t  // `clock_seq_low`\n\t  b[i++] = clockseq & 0xff;\n\t\n\t  // `node`\n\t  var node = options.node || _nodeId;\n\t  for (var n = 0; n < 6; ++n) {\n\t    b[i + n] = node[n];\n\t  }\n\t\n\t  return buf ? buf : buff_to_string(b);\n\t}\n\t\n\t// **`v4()` - Generate random UUID**\n\t\n\t// See https://github.com/broofa/node-uuid for API details\n\tfunction v4(options, buf, offset) {\n\t  // Deprecated - 'format' argument, as supported in v1.2\n\t  var i = buf && offset || 0;\n\t\n\t  if (typeof(options) == 'string') {\n\t    buf = options == 'binary' ? new Array(16) : null;\n\t    options = null;\n\t  }\n\t  options = options || {};\n\t\n\t  var rnds = options.random || (options.rng || _rng)();\n\t\n\t  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\t  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n\t  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\t\n\t  // Copy bytes to buffer, if provided\n\t  if (buf) {\n\t    for (var ii = 0; ii < 16; ++ii) {\n\t      buf[i + ii] = rnds[ii];\n\t    }\n\t  }\n\t\n\t  return buf || buff_to_string(rnds);\n\t}\n\t\n\t// Export public API\n\tvar uuid = v4;\n\tuuid.v1 = v1;\n\tuuid.v4 = v4;\n\t\n\tmodule.exports = uuid;\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar\n\t  KuzzleDocument = __webpack_require__(7),\n\t  KuzzleDataMapping = __webpack_require__(6),\n\t  KuzzleRoom = __webpack_require__(9),\n\t  KuzzleSubscribeResult = __webpack_require__(10);\n\t\n\t/**\n\t * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n\t *\n\t * @callback responseCallback\n\t * @param {Object} err - Error object, NULL if the query is successful\n\t * @param {Object} [data] - The content of the query response\n\t */\n\t\n\t/**\n\t * A data collection is a set of data managed by Kuzzle. It acts like a data table for persistent documents,\n\t * or like a room for pub/sub messages.\n\t * @param {object} kuzzle - Kuzzle instance to inherit from\n\t * @param {string} collection - name of the data collection to handle\n\t * @param {string} index - Index containing the data collection\n\t * @constructor\n\t */\n\tfunction KuzzleDataCollection(kuzzle, collection, index) {\n\t  if (!index || !collection) {\n\t    throw new Error('The KuzzleDataCollection object constructor needs an index and a collection arguments');\n\t  }\n\t\n\t  Object.defineProperties(this, {\n\t    // read-only properties\n\t    collection: {\n\t      value: collection,\n\t      enumerable: true\n\t    },\n\t    index: {\n\t      value: index,\n\t      enumerable: true\n\t    },\n\t    kuzzle: {\n\t      value: kuzzle,\n\t      enumerable: true\n\t    },\n\t    // writable properties\n\t    headers: {\n\t      value: JSON.parse(JSON.stringify(kuzzle.headers)),\n\t      enumerable: true,\n\t      writable: true\n\t    }\n\t  });\n\t\n\t  Object.defineProperty(this, 'buildQueryArgs', {\n\t    value: function (controller, action) {\n\t      return {\n\t        controller: controller,\n\t        action: action,\n\t        collection: this.collection,\n\t        index: this.index\n\t      };\n\t    }\n\t  });\n\t\n\t  if (this.kuzzle.bluebird) {\n\t    return this.kuzzle.bluebird.promisifyAll(this, {\n\t      suffix: 'Promise',\n\t      filter: function (name, func, target, passes) {\n\t        var blacklist = ['publishMessage', 'setHeaders', 'subscribe'];\n\t\n\t        return passes && blacklist.indexOf(name) === -1;\n\t      }\n\t    });\n\t  }\n\t\n\t  return this;\n\t}\n\t\n\t/**\n\t * Executes an advanced search on the data collection.\n\t *\n\t * /!\\ There is a small delay between documents creation and their existence in our advanced search layer,\n\t * usually a couple of seconds.\n\t * That means that a document that was just been created won’t be returned by this function.\n\t *\n\t * @param {object} filters - Filters in Elasticsearch Query DSL format\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} cb - Handles the query response\n\t */\n\tKuzzleDataCollection.prototype.advancedSearch = function (filters, options, cb) {\n\t  var\n\t    query,\n\t    self = this;\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.callbackRequired('KuzzleDataCollection.advancedSearch', cb);\n\t\n\t  query = self.kuzzle.addHeaders({body: filters}, this.headers);\n\t\n\t  self.kuzzle.query(this.buildQueryArgs('read', 'search'), query, options, function (error, result) {\n\t    var\n\t      response,\n\t      documents = [];\n\t\n\t    if (error) {\n\t      return cb(error);\n\t    }\n\t\n\t    result.result.hits.forEach(function (doc) {\n\t      var newDocument = new KuzzleDocument(self, doc._id, doc._source);\n\t\n\t      newDocument.version = doc._version;\n\t\n\t      documents.push(newDocument);\n\t    });\n\t\n\t    response = {\n\t      total: result.result.total,\n\t      documents: documents\n\t    };\n\t\n\t    if (result.result.aggregations) {\n\t      response.aggregations = result.result.aggregations;\n\t    }\n\t\n\t    cb(null, response);\n\t  });\n\t};\n\t\n\t/**\n\t * Returns the number of documents matching the provided set of filters.\n\t *\n\t * There is a small delay between documents creation and their existence in our advanced search layer,\n\t * usually a couple of seconds.\n\t * That means that a document that was just been created won’t be returned by this function\n\t *\n\t * @param {object} filters - Filters in Elasticsearch Query DSL format\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} cb - Handles the query response\n\t */\n\tKuzzleDataCollection.prototype.count = function (filters, options, cb) {\n\t  var\n\t    query;\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  this.kuzzle.callbackRequired('KuzzleDataCollection.count', cb);\n\t\n\t  query = this.kuzzle.addHeaders({body: filters}, this.headers);\n\t\n\t  this.kuzzle.query(this.buildQueryArgs('read', 'count'), query, options, function (error, result) {\n\t    cb(error, result && result.result.count);\n\t  });\n\t};\n\t\n\t/**\n\t * Create a new empty data collection, with no associated mapping.\n\t * Kuzzle automatically creates data collections when storing documents, but there are cases where we\n\t * want to create and prepare data collections before storing documents in it.\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - returns Kuzzle's response\n\t * @returns {*} this\n\t */\n\tKuzzleDataCollection.prototype.create = function (options, cb) {\n\t  var data = {};\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  data = this.kuzzle.addHeaders(data, this.headers);\n\t  this.kuzzle.query(this.buildQueryArgs('write', 'createCollection'), data, options, cb);\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Create a new document in Kuzzle.\n\t *\n\t * Takes an optional argument object with the following properties:\n\t *    - metadata (object, default: null):\n\t *        Additional information passed to notifications to other users\n\t *    - updateIfExist (boolean, default: false):\n\t *        If the same document already exists: throw an error if sets to false.\n\t *        Update the existing document otherwise\n\t *\n\t * @param {string} [id] - (optional) document identifier\n\t * @param {object} document - either an instance of a KuzzleDocument object, or a document\n\t * @param {object} [options] - optional arguments\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @returns {Object} this\n\t */\n\tKuzzleDataCollection.prototype.createDocument = function (id, document, options, cb) {\n\t  var\n\t    self = this,\n\t    data = {},\n\t    action = 'create';\n\t\n\t  if (id && typeof id !== 'string') {\n\t    cb = options;\n\t    options = document;\n\t    document = id;\n\t    id = null;\n\t  }\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  if (document instanceof KuzzleDocument) {\n\t    data = document.serialize();\n\t  } else {\n\t    data.body = document;\n\t  }\n\t\n\t  if (options) {\n\t    action = options.updateIfExist ? 'createOrReplace' : 'create';\n\t  }\n\t\n\t  if (id) {\n\t    data._id = id;\n\t  }\n\t\n\t  data = self.kuzzle.addHeaders(data, self.headers);\n\t\n\t  self.kuzzle.query(this.buildQueryArgs('write', action), data, options, cb && function (err, res) {\n\t    var doc;\n\t\n\t    if (err) {\n\t      return cb(err);\n\t    }\n\t\n\t    doc = new KuzzleDocument(self, res.result._id, res.result._source);\n\t    doc.version = res.result._version;\n\t    cb(null, doc);\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Delete persistent documents.\n\t *\n\t * There is a small delay between documents creation and their existence in our advanced search layer,\n\t * usually a couple of seconds.\n\t * That means that a document that was just been created won’t be returned by this function\n\t *\n\t * Takes an optional argument object with the following properties:\n\t *    - metadata (object, default: null):\n\t *        Additional information passed to notifications to other users\n\t *\n\t * @param {string|object} arg - Either a document ID (will delete only this particular document), or a set of filters\n\t * @param {object} [options] - optional arguments\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @returns {KuzzleDataCollection} this\n\t */\n\tKuzzleDataCollection.prototype.deleteDocument = function (arg, options, cb) {\n\t  var\n\t    action,\n\t    data = {};\n\t\n\t  if (typeof arg === 'string') {\n\t    data._id = arg;\n\t    action = 'delete';\n\t  } else {\n\t    data.body = arg;\n\t    action = 'deleteByQuery';\n\t  }\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  data = this.kuzzle.addHeaders(data, this.headers);\n\t\n\t  this.kuzzle.query(this.buildQueryArgs('write', action), data, options, cb && function (err, res) {\n\t    if (err) {\n\t      cb(err);\n\t    }\n\t    else {\n\t      cb(null, (action === 'delete' ? [res.result._id] : res.result.ids));\n\t    }\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Retrieve a single stored document using its unique document ID.\n\t *\n\t * @param {string} documentId - Unique document identifier\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} cb - Handles the query response\n\t */\n\tKuzzleDataCollection.prototype.fetchDocument = function (documentId, options, cb) {\n\t  var\n\t    data = {_id: documentId},\n\t    self = this;\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.callbackRequired('KuzzleDataCollection.fetch', cb);\n\t  data = self.kuzzle.addHeaders(data, this.headers);\n\t\n\t  self.kuzzle.query(this.buildQueryArgs('read', 'get'), data, options, function (err, res) {\n\t    var document;\n\t\n\t    if (err) {\n\t      return cb(err);\n\t    }\n\t\n\t    document = new KuzzleDocument(self, res.result._id, res.result._source);\n\t    document.version = res.result._version;\n\t    cb(null, document);\n\t  });\n\t};\n\t\n\t/**\n\t * Retrieves all documents stored in this data collection\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} cb - Handles the query response\n\t */\n\tKuzzleDataCollection.prototype.fetchAllDocuments = function (options, cb) {\n\t  var filters = {};\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  // copying pagination options to the search filter\n\t  if (options) {\n\t    if (options.from) {\n\t      filters.from = options.from;\n\t    }\n\t\n\t    if (options.size) {\n\t      filters.size = options.size;\n\t    }\n\t  }\n\t\n\t  this.kuzzle.callbackRequired('KuzzleDataCollection.fetchAll', cb);\n\t\n\t  this.advancedSearch(filters, options, cb);\n\t};\n\t\n\t\n\t/**\n\t * Instantiates a KuzzleDataMapping object containing the current mapping of this collection.\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} cb - Returns an instantiated KuzzleDataMapping object\n\t */\n\tKuzzleDataCollection.prototype.getMapping = function (options, cb) {\n\t  var kuzzleMapping;\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  this.kuzzle.callbackRequired('KuzzleDataCollection.getMapping', cb);\n\t\n\t  kuzzleMapping = new KuzzleDataMapping(this);\n\t  kuzzleMapping.refresh(options, cb);\n\t};\n\t\n\t/**\n\t * Publish a realtime message\n\t *\n\t * Takes an optional argument object with the following properties:\n\t *    - metadata (object, default: null):\n\t *        Additional information passed to notifications to other users\n\t *\n\t * @param {object} document - either a KuzzleDocument instance or a JSON object\n\t * @param {object} [options] - optional arguments\n\t * @param {responseCallback} [cb] - Returns a raw Kuzzle response\n\t * @returns {*} this\n\t */\n\tKuzzleDataCollection.prototype.publishMessage = function (document, options, cb) {\n\t  var data = {};\n\t\n\t  if (document instanceof KuzzleDocument) {\n\t    data = document.serialize();\n\t  } else {\n\t    data.body = document;\n\t  }\n\t\n\t  data = this.kuzzle.addHeaders(data, this.headers);\n\t  this.kuzzle.query(this.buildQueryArgs('write', 'publish'), data, options, cb);\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Replace an existing document with a new one.\n\t *\n\t * Takes an optional argument object with the following properties:\n\t *    - metadata (object, default: null):\n\t *        Additional information passed to notifications to other users\n\t *\n\t * @param {string} documentId - Unique document identifier of the document to replace\n\t * @param {object} content - JSON object representing the new document version\n\t * @param {object} [options] - additional arguments\n\t * @param {responseCallback} [cb] - Returns an instantiated KuzzleDocument object\n\t * @return {object} this\n\t */\n\tKuzzleDataCollection.prototype.replaceDocument = function (documentId, content, options, cb) {\n\t  var\n\t    self = this,\n\t    data = {\n\t      _id: documentId,\n\t      body: content\n\t    };\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  data = self.kuzzle.addHeaders(data, this.headers);\n\t\n\t  self.kuzzle.query(this.buildQueryArgs('write', 'createOrReplace'), data, options, cb && function (err, res) {\n\t    var document;\n\t\n\t    if (err) {\n\t      return cb(err);\n\t    }\n\t\n\t    document = new KuzzleDocument(self, res.result._id, res.result._source);\n\t    document.version = res.result._version;\n\t    cb(null, document);\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Subscribes to this data collection with a set of filters.\n\t * To subscribe to the entire data collection, simply provide an empty filter.\n\t *\n\t * @param {object} filters - Filters in Kuzzle DSL format\n\t * @param {object} [options] - subscriptions options\n\t * @param {responseCallback} cb - called for each new notification\n\t * @returns {*} KuzzleSubscribeResult object\n\t */\n\tKuzzleDataCollection.prototype.subscribe = function (filters, options, cb) {\n\t  var\n\t    room,\n\t    subscribeResult;\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  this.kuzzle.callbackRequired('KuzzleDataCollection.subscribe', cb);\n\t\n\t  subscribeResult = new KuzzleSubscribeResult();\n\t  room = new KuzzleRoom(this, options);\n\t\n\t  room.renew(filters, cb, subscribeResult.done.bind(subscribeResult));\n\t\n\t  return subscribeResult;\n\t};\n\t\n\t/**\n\t * Truncate the data collection, removing all stored documents but keeping all associated mappings.\n\t * This method is a lot faster than removing all documents using a query.\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - returns Kuzzle's response\n\t * @returns {*} this\n\t */\n\tKuzzleDataCollection.prototype.truncate = function (options, cb) {\n\t  var data = {};\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  data = this.kuzzle.addHeaders(data, this.headers);\n\t  this.kuzzle.query(this.buildQueryArgs('admin', 'truncateCollection'), data, options, cb);\n\t\n\t  return this;\n\t};\n\t\n\t\n\t/**\n\t * Update parts of a document\n\t *\n\t * Takes an optional argument object with the following properties:\n\t *    - metadata (object, default: null):\n\t *        Additional information passed to notifications to other users\n\t *\n\t * @param {string} documentId - Unique document identifier of the document to update\n\t * @param {object} content - JSON object containing changes to perform on the document\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - Returns an instantiated KuzzleDocument object\n\t * @return {object} this\n\t */\n\tKuzzleDataCollection.prototype.updateDocument = function (documentId, content, options, cb) {\n\t  var\n\t    data = {\n\t      _id: documentId,\n\t      body: content\n\t    },\n\t    self = this;\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  data = self.kuzzle.addHeaders(data, this.headers);\n\t\n\t  self.kuzzle.query(this.buildQueryArgs('write', 'update'), data, options, cb && function (err, res) {\n\t    if (err) {\n\t      return cb(err);\n\t    }\n\t\n\t    (new KuzzleDocument(self, res.result._id)).refresh(cb);\n\t  });\n\t\n\t  return self;\n\t};\n\t\n\t\n\t/**\n\t * Instantiate a new KuzzleDocument object. Workaround to the module.exports limitation, preventing multiple\n\t * constructors to be exposed without having to use a factory or a composed object.\n\t *\n\t * @param {string} id - document id\n\t * @param {object} content - document content\n\t * @constructor\n\t */\n\tKuzzleDataCollection.prototype.documentFactory = function (id, content) {\n\t  return new KuzzleDocument(this, id, content);\n\t};\n\t\n\t/**\n\t * Instantiate a new KuzzleRoom object. Workaround to the module.exports limitation, preventing multiple\n\t * constructors to be exposed without having to use a factory or a composed object.\n\t *\n\t * @param {object} [options] - subscription configuration\n\t * @constructor\n\t */\n\tKuzzleDataCollection.prototype.roomFactory = function (options) {\n\t  return new KuzzleRoom(this, options);\n\t};\n\t\n\t/**\n\t * Instantiate a new KuzzleDataMapping object. Workaround to the module.exports limitation, preventing multiple\n\t * constructors to be exposed without having to use a factory or a composed object.\n\t *\n\t * @param {object} [mapping] - mapping to instantiate the KuzzleDataMapping object with\n\t * @constructor\n\t */\n\tKuzzleDataCollection.prototype.dataMappingFactory = function (mapping) {\n\t  return new KuzzleDataMapping(this, mapping);\n\t};\n\t\n\t/**\n\t * Helper function allowing to set headers while chaining calls.\n\t *\n\t * If the replace argument is set to true, replace the current headers with the provided content.\n\t * Otherwise, it appends the content to the current headers, only replacing already existing values\n\t *\n\t * @param content - new headers content\n\t * @param [replace] - default: false = append the content. If true: replace the current headers with tj\n\t */\n\tKuzzleDataCollection.prototype.setHeaders = function (content, replace) {\n\t  this.kuzzle.setHeaders.call(this, content, replace);\n\t  return this;\n\t};\n\t\n\tmodule.exports = KuzzleDataCollection;\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t/**\n\t * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n\t *\n\t * @callback responseCallback\n\t * @param {Object} err - Error object, NULL if the query is successful\n\t * @param {Object} [data] - The content of the query response\n\t */\n\t\n\t\n\t/**\n\t *  When creating a new data collection in the persistent data storage layer, Kuzzle uses a default mapping.\n\t *  It means that, by default, you won’t be able to exploit the full capabilities of our persistent data storage layer\n\t *  (currently handled by ElasticSearch), and your searches may suffer from below-average performances, depending on\n\t *  the amount of data you stored in a collection and the complexity of your database.\n\t *\n\t *  The KuzzleDataMapping object allow to get the current mapping of a data collection and to modify it if needed.\n\t *\n\t * @param {object} kuzzleDataCollection - Instance of the inherited KuzzleDataCollection object\n\t * @param {object} mapping - mappings\n\t * @constructor\n\t */\n\tfunction KuzzleDataMapping(kuzzleDataCollection, mapping) {\n\t  Object.defineProperties(this, {\n\t    //read-only properties\n\t    collection: {\n\t      value: kuzzleDataCollection,\n\t      enumerable: true\n\t    },\n\t    kuzzle: {\n\t      value: kuzzleDataCollection.kuzzle,\n\t      enumerable: true\n\t    },\n\t    // writable properties\n\t    headers: {\n\t      value: JSON.parse(JSON.stringify(kuzzleDataCollection.headers)),\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    mapping: {\n\t      value: mapping || {},\n\t      enumerable: true,\n\t      writable: true\n\t    }\n\t  });\n\t\n\t  if (this.kuzzle.bluebird) {\n\t    return this.kuzzle.bluebird.promisifyAll(this, {\n\t      suffix: 'Promise',\n\t      filter: function (name, func, target, passes) {\n\t        var blacklist = ['set', 'setHeaders'];\n\t\n\t        return passes && blacklist.indexOf(name) === -1;\n\t      }\n\t    });\n\t  }\n\t\n\t  return this;\n\t}\n\t\n\t/**\n\t * Applies the new mapping to the data collection.\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - Handles the query response\n\t */\n\tKuzzleDataMapping.prototype.apply = function (options, cb) {\n\t  var\n\t    self = this,\n\t    data = this.kuzzle.addHeaders({body: {properties: this.mapping}}, this.headers);\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.query(this.collection.buildQueryArgs('admin', 'updateMapping'), data, options, function (err) {\n\t    if (err) {\n\t      return cb && cb(err);\n\t    }\n\t\n\t    self.refresh(options, cb);\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Replaces the current content with the mapping stored in Kuzzle\n\t *\n\t * Calling this function will discard any uncommited changes. You can commit changes by calling the “apply” function\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @returns {*} this\n\t */\n\tKuzzleDataMapping.prototype.refresh = function (options, cb) {\n\t  var\n\t    self = this,\n\t    data = this.kuzzle.addHeaders({}, this.headers);\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  this.kuzzle.query(this.collection.buildQueryArgs('admin', 'getMapping'), data, options, function (err, res) {\n\t    if (err) {\n\t      return cb ? cb(err) : false;\n\t    }\n\t\n\t    if (res.result[self.collection.index]) {\n\t      if (res.result[self.collection.index].mappings[self.collection.collection]) {\n\t        self.mapping = res.result[self.collection.index].mappings[self.collection.collection].properties;\n\t\n\t        // Mappings can be empty. The mapping property should never be \"undefined\"\n\t        if (self.mapping === undefined) {\n\t          self.mapping = {};\n\t        }\n\t      } else {\n\t        return cb && cb(new Error('No mapping found for collection ' + self.collection.collection));\n\t      }\n\t    } else {\n\t      return cb && cb(new Error('No mapping found for index ' + self.collection.index));\n\t    }\n\t\n\t    if (cb) {\n\t      cb(null, self);\n\t    }\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t\n\t/**\n\t * Adds or updates a field mapping.\n\t *\n\t * Changes made by this function won’t be applied until you call the apply method\n\t *\n\t * @param {string} field - Name of the field from which the mapping is to be added or updated\n\t * @param {object} mapping - corresponding field mapping\n\t * @returns {KuzzleDataMapping}\n\t */\n\tKuzzleDataMapping.prototype.set = function (field, mapping) {\n\t  this.mapping[field] = mapping;\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Helper function allowing to set headers while chaining calls.\n\t *\n\t * If the replace argument is set to true, replace the current headers with the provided content.\n\t * Otherwise, it appends the content to the current headers, only replacing already existing values\n\t *\n\t * @param content - new headers content\n\t * @param [replace] - default: false = append the content. If true: replace the current headers with tj\n\t */\n\tKuzzleDataMapping.prototype.setHeaders = function (content, replace) {\n\t  this.kuzzle.setHeaders.call(this, content, replace);\n\t  return this;\n\t};\n\t\n\tmodule.exports = KuzzleDataMapping;\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t/**\n\t * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n\t *\n\t * @callback responseCallback\n\t * @param {Object} err - Error object, NULL if the query is successful\n\t * @param {Object} [data] - The content of the query response\n\t */\n\t\n\t/**\n\t * Kuzzle handles documents either as realtime messages or as stored documents.\n\t * KuzzleDocument is the object representation of one of these documents.\n\t *\n\t * Notes:\n\t *   - this constructor may be called either with a documentId, a content, neither or both.\n\t *   - providing a documentID to the constructor will automatically call refresh, unless a content is also provided\n\t *\n\t *\n\t * @param {object} kuzzleDataCollection - an instanciated KuzzleDataCollection object\n\t * @param {string} [documentId] - ID of an existing document\n\t * @param {object} [content] - Initializes this document with the provided content\n\t * @constructor\n\t */\n\tfunction KuzzleDocument(kuzzleDataCollection, documentId, content) {\n\t  Object.defineProperties(this, {\n\t    // read-only properties\n\t    collection: {\n\t      value: kuzzleDataCollection.collection,\n\t      enumerable: true\n\t    },\n\t    dataCollection: {\n\t      value: kuzzleDataCollection,\n\t      enumerable: true\n\t    },\n\t    kuzzle: {\n\t      value: kuzzleDataCollection.kuzzle,\n\t      enumerable: true\n\t    },\n\t    // writable properties\n\t    id: {\n\t      value: undefined,\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    content: {\n\t      value: {},\n\t      writable: true,\n\t      enumerable: true\n\t    },\n\t    headers: {\n\t      value: JSON.parse(JSON.stringify(kuzzleDataCollection.headers)),\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    version: {\n\t      value: undefined,\n\t      enumerable: true,\n\t      writable: true\n\t    }\n\t  });\n\t\n\t  // handling provided arguments\n\t  if (!content && documentId && typeof documentId === 'object') {\n\t    content = documentId;\n\t    documentId = null;\n\t  }\n\t\n\t  if (content) {\n\t    if (content._version) {\n\t      this.version = content._version;\n\t      delete content._version;\n\t    }\n\t    this.setContent(content, true);\n\t  }\n\t\n\t  if (documentId) {\n\t    Object.defineProperty(this, 'id', {\n\t      value: documentId,\n\t      enumerable: true\n\t    });\n\t  }\n\t\n\t  // promisifying\n\t  if (this.kuzzle.bluebird) {\n\t    return this.kuzzle.bluebird.promisifyAll(this, {\n\t      suffix: 'Promise',\n\t      filter: function (name, func, target, passes) {\n\t        var whitelist = ['delete', 'refresh', 'save'];\n\t\n\t        return passes && whitelist.indexOf(name) !== -1;\n\t      }\n\t    });\n\t  }\n\t\n\t  return this;\n\t}\n\t\n\t/**\n\t * Serialize this object into a JSON object\n\t *\n\t * @return {object} JSON object representing this document\n\t */\n\tKuzzleDocument.prototype.serialize = function () {\n\t  var\n\t    data = {};\n\t\n\t  if (this.id) {\n\t    data._id = this.id;\n\t  }\n\t\n\t  data.body = this.content;\n\t  data._version = this.version;\n\t  data = this.kuzzle.addHeaders(data, this.headers);\n\t\n\t  return data;\n\t};\n\t\n\t/**\n\t * Overrides the toString() method in order to return a serialized version of the document\n\t *\n\t * @return {string} serialized version of this object\n\t */\n\tKuzzleDocument.prototype.toString = function () {\n\t  return JSON.stringify(this.serialize());\n\t};\n\t\n\t/**\n\t * Deletes this document in Kuzzle.\n\t *\n\t * Takes an optional argument object with the following properties:\n\t *    - metadata (object, default: null):\n\t *        Additional information passed to notifications to other users\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @returns {*} this\n\t */\n\tKuzzleDocument.prototype.delete = function (options, cb) {\n\t  var self = this;\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  if (!self.id) {\n\t    throw new Error('KuzzleDocument.delete: cannot delete a document without a document ID');\n\t  }\n\t\n\t  this.kuzzle.query(this.dataCollection.buildQueryArgs('write', 'delete'), this.serialize(), options, cb && function (err) {\n\t    cb(err, err ? undefined : self.id);\n\t  });\n\t};\n\t\n\t/**\n\t * Replaces the current content with the last version of this document stored in Kuzzle.\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @returns {*} this\n\t */\n\tKuzzleDocument.prototype.refresh = function (options, cb) {\n\t  var self = this;\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  if (!self.id) {\n\t    throw new Error('KuzzleDocument.refresh: cannot retrieve a document if no ID has been provided');\n\t  }\n\t\n\t  this.kuzzle.callbackRequired('KuzzleDocument.refresh', cb);\n\t\n\t  self.kuzzle.query(self.dataCollection.buildQueryArgs('read', 'get'), {_id: self.id}, options, function (error, res) {\n\t    var newDocument;\n\t\n\t    if (error) {\n\t      return cb(error);\n\t    }\n\t\n\t    newDocument = new KuzzleDocument(self.dataCollection, self.id, res.result._source);\n\t    newDocument.version = res.result._version;\n\t\n\t    cb(null, newDocument);\n\t  });\n\t};\n\t\n\t/**\n\t * Saves this document into Kuzzle.\n\t *\n\t * If this is a new document, this function will create it in Kuzzle and the id property will be made available.\n\t * Otherwise, this method will replace the latest version of this document in Kuzzle by the current content\n\t * of this object.\n\t *\n\t * Takes an optional argument object with the following properties:\n\t *    - metadata (object, default: null):\n\t *        Additional information passed to notifications to other users\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @returns {*} this\n\t */\n\tKuzzleDocument.prototype.save = function (options, cb) {\n\t  var\n\t    data = this.serialize(),\n\t    self = this;\n\t\n\t  if (options && cb === undefined && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.query(this.dataCollection.buildQueryArgs('write', 'createOrReplace'), data, options, function (error, res) {\n\t    if (error) {\n\t      return cb && cb(error);\n\t    }\n\t\n\t    self.id = res.result._id;\n\t    self.version = res.result._version;\n\t\n\t    if (cb) {\n\t      cb(null, self);\n\t    }\n\t  });\n\t\n\t  return self;\n\t};\n\t\n\t/**\n\t * Sends the content of this document as a realtime message.\n\t *\n\t * Takes an optional argument object with the following properties:\n\t *    - metadata (object, default: null):\n\t *        Additional information passed to notifications to other users\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @returns {*} this\n\t */\n\tKuzzleDocument.prototype.publish = function (options) {\n\t  var data = this.serialize();\n\t\n\t  this.kuzzle.query(this.dataCollection.buildQueryArgs('write', 'publish'), data, options);\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Replaces the current content with new data.\n\t * Changes made by this function won’t be applied until the save method is called.\n\t *\n\t * @param {object} data - New content\n\t * @param {boolean} replace - if true: replace this document content with the provided data\n\t */\n\tKuzzleDocument.prototype.setContent = function (data, replace) {\n\t  var self = this;\n\t\n\t  if (replace) {\n\t    this.content = data;\n\t  }\n\t  else {\n\t    Object.keys(data).forEach(function (key) {\n\t      self.content[key] = data[key];\n\t    });\n\t  }\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Listens to events concerning this document. Has no effect if the document does not have an ID\n\t * (i.e. if the document has not yet been created as a persisted document).\n\t *\n\t * @param {object} [options] - subscription options\n\t * @param {responseCallback} cb - callback that will be called each time a change has been detected on this document\n\t */\n\tKuzzleDocument.prototype.subscribe = function (options, cb) {\n\t  var filters;\n\t\n\t  if (options && !cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  this.kuzzle.callbackRequired('KuzzleDocument.subscribe', cb);\n\t\n\t  if (!this.id) {\n\t    throw new Error('KuzzleDocument.subscribe: cannot subscribe to a document if no ID has been provided');\n\t  }\n\t\n\t  filters = { ids: { values: [this.id] } };\n\t\n\t  return this.dataCollection.subscribe(filters, options, cb);\n\t};\n\t\n\t/**\n\t * Helper function allowing to set headers while chaining calls.\n\t *\n\t * If the replace argument is set to true, replace the current headers with the provided content.\n\t * Otherwise, it appends the content to the current headers, only replacing already existing values\n\t *\n\t * @param content - new headers content\n\t * @param [replace] - default: false = append the content. If true: replace the current headers with tj\n\t */\n\tKuzzleDocument.prototype.setHeaders = function (content, replace) {\n\t  this.kuzzle.setHeaders.call(this, content, replace);\n\t  return this;\n\t};\n\t\n\t\n\tmodule.exports = KuzzleDocument;\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t/**\n\t * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n\t *\n\t * @callback responseCallback\n\t * @param {Object} err - Error object, NULL if the query is successful\n\t * @param {Object} [data] - The content of the query response\n\t */\n\t\n\t\n\t/**\n\t * Kuzzle's memory storage is a separate data store from the database layer.\n\t * It is internaly based on Redis. You can access most of Redis functions (all\n\t * lowercased), excepting:\n\t *   * all cluster based functions\n\t *   * all script based functions\n\t *   * all cursors functions\n\t *\n\t * For instance:\n\t *     kuzzle.memoryStorage\n\t *      .set('myKey', 'myValue')\n\t *      .get('myKey', function (err, response) {\n\t *        console.log(response.result);\n\t *\n\t *        // { _id: 'foo', body: { value: 'myValue' }}\n\t *      });\n\t *\n\t *\n\t * @param {object} kuzzle - Kuzzle instance to inherit from\n\t * @constructor\n\t */\n\tfunction KuzzleMemoryStorage(kuzzle) {\n\t  Object.defineProperties(this, {\n\t    // read-only properties\n\t    kuzzle: {\n\t      value: kuzzle,\n\t      enumerable: true\n\t    },\n\t    // writable properties\n\t    headers: {\n\t      value: JSON.parse(JSON.stringify(kuzzle.headers)),\n\t      enumerable: true,\n\t      writable: true\n\t    }\n\t  });\n\t\n\t  this.setHeaders = kuzzle.setHeaders.bind(this);\n\t\n\t  if (this.kuzzle.bluebird) {\n\t    return this.kuzzle.bluebird.promisifyAll(this, {\n\t      suffix: 'Promise',\n\t      filter: function (name, func, target, passes) {\n\t        var blacklist = ['setHeaders'];\n\t\n\t        return passes && blacklist.indexOf(name) === -1;\n\t      }\n\t    });\n\t  }\n\t\n\t  return this;\n\t}\n\t\n\t\n\t/**\n\t * constructs the memoryStorage functions.\n\t */\n\t(function() {\n\t\n\t  var\n\t    keyVal = ['id', 'value'],\n\t    idOrKeys = ['id', 'keys'],\n\t    commands = {\n\t      append: keyVal,\n\t      bgrewriteaof: [],\n\t      bgsave: [],\n\t      bitcount: ['id', 'start', 'end'],\n\t      bitop: ['operation', 'destkey', idOrKeys],\n\t      bitpos: ['id', 'bit', { __opts__: ['start', 'end']}],\n\t      blpop: [idOrKeys, 'timeout'],\n\t      brpoplpush: ['source', 'destination'],\n\t      dbsize: [],\n\t      decrby: keyVal,\n\t      del: [idOrKeys],\n\t      discard: [],\n\t      exec: [],\n\t      exists: [idOrKeys],\n\t      expire: ['id', 'seconds'],\n\t      expireat: ['id', 'timestamp'],\n\t      flushdb: [],\n\t      // @todo: implement geolocation methods once available in Redis stable release\n\t      getbit: ['id', 'offset'],\n\t      getrange: ['id', 'start', 'end'],\n\t      hdel: ['id', ['field', 'fields']],\n\t      hexists: ['id', 'field'],\n\t      hincrby: ['id', 'field', 'value'],\n\t      hmset: ['id', 'values'],\n\t      hset: ['id', 'field', 'value'],\n\t      info: ['section'],\n\t      keys: [ 'pattern' ],\n\t      lastsave: [],\n\t      lindex: ['id', 'idx'],\n\t      linsert: ['id', 'position', 'pivot', 'value'],\n\t      lpush: ['id', ['value', 'values']],\n\t      lrange: ['id', 'start', 'stop'],\n\t      lrem: ['id', 'count', 'value'],\n\t      lset: ['id', 'idx', 'value'],\n\t      ltrim: ['id', 'start', 'stop'],\n\t      mset: ['values'],\n\t      multi: [],\n\t      object: ['subcommand', 'args'],\n\t      pexpire: ['id', 'milliseconds'],\n\t      pexpireat: ['id', 'timestamp'],\n\t      pfadd: ['id', ['element', 'elements']],\n\t      pfmerge: ['destkey', ['sourcekey', 'sourcekeys']],\n\t      ping: [],\n\t      psetex: ['id', 'milliseconds', 'value'],\n\t      publish: ['channel', 'message'],\n\t      randomkey: [],\n\t      rename: ['id', 'newkey'],\n\t      renamenx: ['id', 'newkey'],\n\t      restore: ['id', 'ttl', 'content'],\n\t      rpoplpush: ['source', 'destination'],\n\t      sadd: ['id', ['member', 'members']],\n\t      save: [],\n\t      set: ['id', 'value', {__opts__:['ex', 'px', 'nx', 'xx']}],\n\t      sdiffstore: ['destination', idOrKeys],\n\t      setbit: ['id', 'offset', 'value'],\n\t      setex: ['id', 'seconds', 'value'],\n\t      setrange: ['id', 'offset', 'value'],\n\t      sinterstore: ['destination', idOrKeys],\n\t      sismember: ['id', 'member'],\n\t      smove: ['id', 'destination', 'member'],\n\t      sort: ['id', {__opts__:['by', 'offset', 'count', 'get', 'direction', 'alpha', 'store']}],\n\t      spop: ['id', 'count'],\n\t      srem: ['id', ['member', 'members']],\n\t      sunionstore: ['destination', idOrKeys],\n\t      unwatch: [],\n\t      wait: ['numslaves', 'timeout'],\n\t      zadd: ['id', {__opts__: ['nx', 'xx', 'ch', 'incr', 'score', 'member', 'members']}],\n\t      zcount: ['id', 'min', 'max'],\n\t      zincrby: ['id', 'value', 'member'],\n\t      zinterstore: ['destination', idOrKeys, {__opts__: ['weight', 'weights', 'aggregate']}],\n\t      zlexcount: ['id', 'min', 'max'],\n\t      zrange: ['id', 'start', 'stop', {__opts__: ['withscores']}],\n\t      zrangebylex: ['id', 'min', 'max', {__opts__: ['offset', 'count']}],\n\t      zrangebyscore: ['id', 'min', 'max', {__opts__: ['withscores', 'offset', 'count']}],\n\t      zrem: ['id', 'member'],\n\t      zremrangebylex: ['id', 'min', 'max'],\n\t      zremrangebyscore: ['id', 'min', 'max'],\n\t      zrevrangebylex: ['id', 'max', 'min', {__opts__: ['offset', 'count']}],\n\t      zrevrangebyscore: ['id', 'max', 'min', {__opts__: ['withscores', 'offset', 'count']}],\n\t      zrevrank: ['id', 'member']\n\t    };\n\t\n\t  // unique argument key\n\t  commands.decr = commands.get = commands.dump = commands.hgetall = commands.hkeys = commands.hlen = commands.hstrlen = commands.hvals = commands.incr = commands.llen = commands.lpop = commands.persist = commands.pttl = commands.rpop = commands.scard = commands.smembers = commands.strlen = commands.ttl = commands.type = commands.zcard = ['id'];\n\t\n\t  // key value\n\t  commands.getset = commands.lpushx = keyVal;\n\t\n\t  // key key...\n\t  commands.del = commands.exists = commands.mget = commands.pfcount = commands.sdiff = commands.sinter = commands.sunion = commands.watch = [idOrKeys];\n\t\n\t  commands.incrby = commands.incrbyfloat = commands.decrby;\n\t  commands.brpop = commands.blpop;\n\t  commands.hget = commands.hexists;\n\t  commands.hmget = commands.hdel;\n\t  commands.hsetnx = commands.hset;\n\t  commands.msetnx = commands.mset;\n\t  commands.rpush = commands.lpush;\n\t  commands.hincrbyfloat = commands.hincrby;\n\t  commands.srandmember = commands.spop;\n\t  commands.zrevrange = commands.zrange;\n\t  commands.zscore = commands.zrevrank;\n\t\n\t  Object.keys(commands).forEach(function (command) {\n\t    KuzzleMemoryStorage.prototype[command] = function () {\n\t      var\n\t        args = Array.prototype.slice.call(arguments),\n\t        options = null,\n\t        cb,\n\t        query = {\n\t          controller: 'ms',\n\t          action: command\n\t        },\n\t        data = {};\n\t\n\t      if (typeof args[args.length - 1] === 'function') {\n\t        cb = args.pop();\n\t      }\n\t\n\t      if (args.length && typeof args[args.length - 1] === 'object' && Object.keys(args[args.length - 1]).length === 1 && args[args.length - 1].queuable !== undefined) {\n\t        options = args.pop();\n\t      }\n\t\n\t      commands[command].forEach(function (v, i) {\n\t        if (args[i] === undefined) {\n\t          return;\n\t        }\n\t\n\t        if (Array.isArray(v)) {\n\t          v = Array.isArray(args[i]) ? v[1] : v[0];\n\t        }\n\t\n\t        if (v === 'id') {\n\t          data._id = args[i];\n\t        }\n\t        else {\n\t          if (!data.body) {\n\t            data.body = {};\n\t          }\n\t\n\t          if (typeof v === 'object' && v.__opts__ !== undefined) {\n\t            v.__opts__.forEach(function (arg) {\n\t              if (args[i][arg] !== undefined) {\n\t                data.body[arg] = args[i][arg];\n\t              }\n\t            });\n\t          }\n\t          else {\n\t            data.body[v] = args[i];\n\t          }\n\t        }\n\t      });\n\t\n\t      this.kuzzle.query(query, data, options, cb);\n\t\n\t      return this;\n\t\n\t    };\n\t  });\n\t\n\t})();\n\t\n\tmodule.exports = KuzzleMemoryStorage;\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar\n\t  uuid = __webpack_require__(4);\n\t\n\t/**\n\t * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n\t *\n\t * @callback responseCallback\n\t * @param {Object} err - Error object, NULL if the query is successful\n\t * @param {Object} [data] - The content of the query response\n\t */\n\t\n\t/**\n\t * This object is the result of a subscription request, allowing to manipulate the subscription itself.\n\t *\n\t * In Kuzzle, you don’t exactly subscribe to a room or a topic but, instead, you subscribe to documents.\n\t *\n\t * What it means is that, to subscribe, you provide to Kuzzle a set of matching filters.\n\t * Once you have subscribed, if a pub/sub message is published matching your filters, or if a matching stored\n\t * document change (because it is created, updated or deleted), then you’ll receive a notification about it.\n\t *\n\t * @param {object} kuzzleDataCollection - an instantiated and valid kuzzle object\n\t * @param {object} [options] - subscription optional configuration\n\t * @constructor\n\t */\n\tfunction KuzzleRoom(kuzzleDataCollection, options) {\n\t  // Define properties\n\t  Object.defineProperties(this, {\n\t    // private properties\n\t    callback: {\n\t      value: null,\n\t      writable: true\n\t    },\n\t    channel: {\n\t      value: null,\n\t      writable: true\n\t    },\n\t    id: {\n\t      value: uuid.v4()\n\t    },\n\t    lastRenewal: {\n\t      value: null,\n\t      writable: true\n\t    },\n\t    notifier: {\n\t      value: null,\n\t      writable: true\n\t    },\n\t    onDoneCB: {\n\t      value: null,\n\t      writable: true\n\t    },\n\t    queue: {\n\t      value: [],\n\t      writable: true\n\t    },\n\t    // Delay before allowing a subscription renewal\n\t    renewalDelay: {\n\t      value: 500\n\t    },\n\t    scope: {\n\t      value: options && options.scope ? options.scope : 'all'\n\t    },\n\t    state: {\n\t      value: options && options.state ? options.state : 'done'\n\t    },\n\t    subscribing: {\n\t      value: false,\n\t      writable: true\n\t    },\n\t    users: {\n\t      value: options && options.users ? options.users : 'none'\n\t    },\n\t    // read-only properties\n\t    collection: {\n\t      value: kuzzleDataCollection,\n\t      enumerable: true\n\t    },\n\t    kuzzle: {\n\t      value: kuzzleDataCollection.kuzzle,\n\t      enumerable: true\n\t    },\n\t    // writable properties\n\t    filters: {\n\t      value: null,\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    headers: {\n\t      value: JSON.parse(JSON.stringify(kuzzleDataCollection.headers)),\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    metadata: {\n\t      value: (options && options.metadata) ? options.metadata : {},\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    roomId: {\n\t      value: null,\n\t      enumerable: true,\n\t      writable: true\n\t    },\n\t    subscribeToSelf: {\n\t      value: options && typeof options.subscribeToSelf === 'boolean' ? options.subscribeToSelf : true,\n\t      enumerable: true,\n\t      writable: true\n\t    }\n\t  });\n\t\n\t  if (this.kuzzle.bluebird) {\n\t    return this.kuzzle.bluebird.promisifyAll(this, {\n\t      suffix: 'Promise',\n\t      filter: function (name, func, target, passes) {\n\t        var whitelist = ['count'];\n\t\n\t        return passes && whitelist.indexOf(name) !== -1;\n\t      }\n\t    });\n\t  }\n\t\n\t  return this;\n\t}\n\t\n\t/**\n\t * Returns the number of other subscriptions on that room.\n\t *\n\t * @param {responseCallback} cb - Handles the query response\n\t */\n\tKuzzleRoom.prototype.count = function (cb) {\n\t  var data;\n\t\n\t  this.kuzzle.callbackRequired('KuzzleRoom.count', cb);\n\t\n\t  data = this.kuzzle.addHeaders({body: {roomId: this.roomId}}, this.headers);\n\t\n\t  if (!isReady.call(this)) {\n\t    this.queue.push({action: 'count', args: [cb]});\n\t    return;\n\t  }\n\t\n\t  if (!this.roomId) {\n\t    throw new Error('KuzzleRoom.count: cannot count subscriptions on an inactive room');\n\t  }\n\t\n\t  this.kuzzle.query(this.collection.buildQueryArgs('subscribe', 'count'), data, function (err, res) {\n\t    cb(err, res && res.result.count);\n\t  });\n\t};\n\t\n\t/**\n\t * Renew the subscription using new filters\n\t *\n\t * @param {object} [filters] - Filters in Kuzzle DSL format\n\t * @param {responseCallback} notificationCB - called for each new notification\n\t * @param {responseCallback} [cb] - handles the query response\n\t */\n\tKuzzleRoom.prototype.renew = function (filters, notificationCB, cb) {\n\t  var\n\t    now = Date.now(),\n\t    subscribeQuery = {\n\t      scope: this.scope,\n\t      state: this.state,\n\t      users: this.users\n\t    },\n\t    self = this;\n\t\n\t  if (typeof filters === 'function') {\n\t    cb = notificationCB;\n\t    notificationCB = filters;\n\t    filters = null;\n\t  }\n\t\n\t  if (!cb) {\n\t    cb = self.onDoneCB;\n\t  }\n\t\n\t  self.kuzzle.callbackRequired('KuzzleRoom.renew', notificationCB);\n\t\n\t  /*\n\t    Skip subscription renewal if another one was performed a moment before\n\t   */\n\t  if (self.lastRenewal && (now - self.lastRenewal) <= self.renewalDelay) {\n\t    return cb && cb(new Error('Subscription already renewed less than ' + self.renewalDelay + 'ms ago'));\n\t  }\n\t\n\t  if (filters) {\n\t    self.filters = filters;\n\t  }\n\t\n\t  /*\n\t   if not yet connected, register itself to the subscriptions list and wait for the\n\t   main Kuzzle object to renew once online\n\t    */\n\t  if (self.kuzzle.state !== 'connected') {\n\t    self.callback = notificationCB;\n\t    self.onDoneCB = cb;\n\t    self.kuzzle.subscriptions.pending[self.id] = self;\n\t    return;\n\t  }\n\t\n\t  if (self.subscribing) {\n\t    self.queue.push({action: 'renew', args: [filters, notificationCB, cb]});\n\t    return;\n\t  }\n\t\n\t  self.unsubscribe();\n\t  self.roomId = null;\n\t  self.subscribing = true;\n\t  self.callback = notificationCB;\n\t  self.onDoneCB = cb;\n\t  self.kuzzle.subscriptions.pending[self.id] = self;\n\t\n\t  subscribeQuery.body = self.filters;\n\t  subscribeQuery = self.kuzzle.addHeaders(subscribeQuery, this.headers);\n\t\n\t  self.kuzzle.query(self.collection.buildQueryArgs('subscribe', 'on'), subscribeQuery, {metadata: self.metadata}, function (error, response) {\n\t    delete self.kuzzle.subscriptions.pending[self.id];\n\t    self.subscribing = false;\n\t\n\t    if (error) {\n\t      self.queue = [];\n\t      return cb && cb(new Error('Error during Kuzzle subscription: ' + error.message));\n\t    }\n\t\n\t    self.lastRenewal = now;\n\t    self.roomId = response.result.roomId;\n\t    self.channel = response.result.channel;\n\t\n\t    if (!self.kuzzle.subscriptions[self.roomId]) {\n\t      self.kuzzle.subscriptions[self.roomId] = {};\n\t    }\n\t\n\t    self.kuzzle.subscriptions[self.roomId][self.id] = self;\n\t\n\t    self.notifier = notificationCallback.bind(self);\n\t    self.kuzzle.network.on(self.channel, self.notifier);\n\t\n\t    dequeue.call(self);\n\t    cb && cb(null, self);\n\t  });\n\t};\n\t\n\t/**\n\t * Unsubscribes from Kuzzle.\n\t *\n\t * Stop listening immediately. If there is no listener left on that room, sends an unsubscribe request to Kuzzle, once\n\t * pending subscriptions reaches 0, and only if there is still no listener on that room.\n\t * We wait for pending subscriptions to finish to avoid unsubscribing while another subscription on that room is\n\t *\n\t * @return {*} this\n\t */\n\tKuzzleRoom.prototype.unsubscribe = function () {\n\t  var\n\t    self = this,\n\t    room = self.roomId,\n\t    interval;\n\t\n\t  if (!isReady.call(this)) {\n\t    self.queue.push({action: 'unsubscribe', args: []});\n\t    return self;\n\t  }\n\t\n\t  if (room) {\n\t    self.kuzzle.network.off(self.channel, this.notifier);\n\t\n\t    if (Object.keys(self.kuzzle.subscriptions[room]).length === 1) {\n\t      delete self.kuzzle.subscriptions[room];\n\t\n\t      if (Object.keys(self.kuzzle.subscriptions.pending).length === 0) {\n\t        self.kuzzle.query(self.collection.buildQueryArgs('subscribe', 'off'), {body: {roomId: room}});\n\t      } else {\n\t        interval = setInterval(function () {\n\t          if (Object.keys(self.kuzzle.subscriptions.pending).length === 0) {\n\t            if (!self.kuzzle.subscriptions[room]) {\n\t              self.kuzzle.query(self.collection.buildQueryArgs('subscribe', 'off'), {body: {roomId: room}});\n\t            }\n\t            clearInterval(interval);\n\t          }\n\t        }, 100);\n\t      }\n\t    } else {\n\t      delete self.kuzzle.subscriptions[room][self.id];\n\t    }\n\t\n\t    self.roomId = null;\n\t  }\n\t\n\t  return self;\n\t};\n\t\n\t/**\n\t * Helper function allowing to set headers while chaining calls.\n\t *\n\t * If the replace argument is set to true, replace the current headers with the provided content.\n\t * Otherwise, it appends the content to the current headers, only replacing already existing values\n\t *\n\t * @param content - new headers content\n\t * @param [replace] - default: false = append the content. If true: replace the current headers with tj\n\t */\n\tKuzzleRoom.prototype.setHeaders = function (content, replace) {\n\t  this.kuzzle.setHeaders.call(this, content, replace);\n\t  return this;\n\t};\n\t\n\t/**\n\t * Callback called by the network handler when a message is sent to the subscribed room ID\n\t * Calls the registered callback if the notification passes the subscription filters\n\t *\n\t * @param {object} data - data\n\t * @returns {*}\n\t */\n\tfunction notificationCallback (data) {\n\t  if (data.error) {\n\t    return this.callback(data.error);\n\t  }\n\t\n\t  if (data.action === 'jwtTokenExpired') {\n\t    this.kuzzle.jwtToken = undefined;\n\t    return this.kuzzle.emitEvent('jwtTokenExpired');\n\t  }\n\t\n\t  if (this.kuzzle.requestHistory[data.requestId]) {\n\t    if (this.subscribeToSelf) {\n\t      this.callback(null, data);\n\t    }\n\t    delete this.kuzzle.requestHistory[data.requestId];\n\t  } else {\n\t    this.callback(null, data);\n\t  }\n\t}\n\t\n\t\n\t/**\n\t * Dequeue actions performed while subscription was being renewed\n\t */\n\tfunction dequeue () {\n\t  var element;\n\t\n\t  while (this.queue.length > 0) {\n\t    element = this.queue.shift();\n\t\n\t    this[element.action].apply(this, element.args);\n\t  }\n\t}\n\t\n\tfunction isReady() {\n\t  return this.kuzzle.state === 'connected' && !this.subscribing;\n\t}\n\t\n\tmodule.exports = KuzzleRoom;\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t/**\n\t * Sugar-code handling the result of a KuzzleRoom.renew call\n\t * @constructor\n\t */\n\tfunction KuzzleSubscribeResult() {\n\t  this.cbs = [];\n\t  this.error = null;\n\t  this.room = null;\n\t}\n\t\n\t/**\n\t * Registers a callback to be called with a subscription result\n\t * @param {Function} cb\n\t */\n\tKuzzleSubscribeResult.prototype.onDone = function (cb) {\n\t  if (this.error || this.room) {\n\t    cb(this.error, this.room);\n\t  }\n\t  else {\n\t    this.cbs.push(cb);\n\t  }\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Calls all registered callbacks\n\t *\n\t * @param {Object} error object\n\t * @param {KuzzleRoom} room\n\t */\n\tKuzzleSubscribeResult.prototype.done = function (error, room) {\n\t  this.error = error;\n\t  this.room = room;\n\t\n\t  this.cbs.forEach(function (cb) {\n\t    cb(error, room);\n\t  });\n\t};\n\t\n\tmodule.exports = KuzzleSubscribeResult;\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t *\n\t * @param host\n\t * @param wsPort\n\t * @param ioPort\n\t * @param sslConnection\n\t * @returns {Object} tnstantiated WebSocket/Socket.IO object\n\t */\n\t\n\tfunction network(host, wsPort, ioPort, sslConnection) {\n\t  // Web browser / NodeJS websocket handling\n\t  if (typeof window !== 'undefined') {\n\t    // use native websockets if the browser supports it\n\t    if (typeof WebSocket !== 'undefined') {\n\t      return new (__webpack_require__(2))(host, wsPort, sslConnection);\n\t    }\n\t    // otherwise fallback to socket.io, if available\n\t    else if (window.io) {\n\t      return new (__webpack_require__(12))(host, ioPort, sslConnection);\n\t    }\n\t\n\t    throw new Error('Aborting: no websocket support detected and no socket.io library loaded either.');\n\t  }\n\t\n\t  return new (__webpack_require__(2))(host, wsPort, sslConnection);\n\t}\n\t\n\tmodule.exports = network;\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\tfunction SocketIO(host, port, ssl) {\n\t  this.host = host;\n\t  this.port = port;\n\t  this.ssl = ssl;\n\t  this.socket = null;\n\t\n\t  /**\n\t   * Creates a new socket from the provided arguments\n\t   *\n\t   * @constructor\n\t   * @param {boolean} autoReconnect\n\t   * @param {int} reconnectionDelay\n\t   */\n\t  this.connect = function (autoReconnect, reconnectionDelay) {\n\t    this.socket = window.io((this.ssl ? 'https://' : 'http://') + this.host + ':' + this.port, {\n\t      reconnection: autoReconnect,\n\t      reconnectionDelay: reconnectionDelay,\n\t      forceNew: true\n\t    });\n\t  };\n\t\n\t  /**\n\t   * Fires the provided callback whence a connection is established\n\t   *\n\t   * @param {function} callback\n\t   */\n\t  this.onConnect = function (callback) {\n\t    this.socket.on('connect', callback);\n\t  };\n\t\n\t  /**\n\t   * Fires the provided callback whenever a connection error is received\n\t   * @param {function} callback\n\t   */\n\t  this.onConnectError = function (callback) {\n\t    this.socket.on('connect_error', callback);\n\t  };\n\t\n\t  /**\n\t   * Fires the provided callback whenever a disconnection occurred\n\t   * @param {function} callback\n\t   */\n\t  this.onDisconnect = function (callback) {\n\t    this.socket.on('disconnect', callback);\n\t  };\n\t\n\t  /**\n\t   * Fires the provided callback whenever a connection has been reestablished\n\t   * @param {function} callback\n\t   */\n\t  this.onReconnect = function (callback) {\n\t    this.socket.on('reconnect', callback);\n\t  };\n\t\n\t  /**\n\t   * Registers a callback on a room. Once 1 message is received, fires the\n\t   * callback and unregister it afterward.\n\t   *\n\t   * @param {string} roomId\n\t   * @param {function} callback\n\t   */\n\t  this.once = function (roomId, callback) {\n\t    this.socket.once(roomId, callback);\n\t  };\n\t\n\t  /**\n\t   * Registers a callback on a room.\n\t   *\n\t   * @param {string} roomId\n\t   * @param {function} callback\n\t   */\n\t  this.on = function (roomId, callback) {\n\t    this.socket.on(roomId, callback);\n\t  };\n\t\n\t  /**\n\t   * Unregisters a callback from a room.\n\t   *\n\t   * @param {string} roomId\n\t   * @param {function} callback\n\t   */\n\t  this.off = function (roomId, callback) {\n\t    this.socket.off(roomId, callback);\n\t  };\n\t\n\t\n\t  /**\n\t   * Sends a payload to the connected server\n\t   *\n\t   * @param {Object} payload\n\t   */\n\t  this.send = function (payload) {\n\t    this.socket.emit('kuzzle', payload);\n\t  };\n\t\n\t  /**\n\t   * Closes the connection\n\t   */\n\t  this.close = function () {\n\t    this.socket.close();\n\t    this.socket = null;\n\t  };\n\t}\n\t\n\tmodule.exports = SocketIO;\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar\n\t  KuzzleSecurityDocument = __webpack_require__(1);\n\t\n\tfunction KuzzleProfile(kuzzleSecurity, id, content) {\n\t\n\t  KuzzleSecurityDocument.call(this, kuzzleSecurity, id, content);\n\t\n\t  // Define properties\n\t  Object.defineProperties(this, {\n\t    // private properties\n\t    deleteActionName: {\n\t      value: 'deleteProfile'\n\t    },\n\t    updateActionName: {\n\t      value: 'updateProfile'\n\t    }\n\t  });\n\t\n\t  // promisifying\n\t  if (kuzzleSecurity.kuzzle.bluebird) {\n\t    return kuzzleSecurity.kuzzle.bluebird.promisifyAll(this, {\n\t      suffix: 'Promise',\n\t      filter: function (name, func, target, passes) {\n\t        var whitelist = ['hydrate', 'save'];\n\t\n\t        return passes && whitelist.indexOf(name) !== -1;\n\t      }\n\t    });\n\t  }\n\t\n\t}\n\t\n\tKuzzleProfile.prototype = Object.create(KuzzleSecurityDocument.prototype, {\n\t  constructor: {\n\t    value: KuzzleProfile\n\t  }\n\t});\n\t\n\t/**\n\t * Persist to the persistent layer the current profile\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @returns {KuzzleProfile} this\n\t */\n\tKuzzleProfile.prototype.save = function (options, cb) {\n\t  var\n\t    data,\n\t    self = this;\n\t\n\t  if (!this.content.policies) {\n\t    throw new Error('Argument \"policies\" is mandatory in a profile. This argument contains an array of objects.');\n\t  }\n\t\n\t  if (options && cb === undefined && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  data = this.serialize();\n\t\n\t  self.kuzzle.query(self.kuzzleSecurity.buildQueryArgs('createOrReplaceProfile'), data, options, cb && function (error) {\n\t    cb(error, error ? undefined : self);\n\t  });\n\t\n\t  return self;\n\t};\n\t\n\t\n\t/**\n\t * Add a policy in the policies list\n\t * @param {Object} policy - must be an object containing at least a \"roleId\" member which must be a string.\n\t *\n\t * @returns {KuzzleProfile} this\n\t */\n\tKuzzleProfile.prototype.addPolicy = function (policy) {\n\t\n\t  if (typeof policy !== 'object' || typeof policy.roleId !== 'string') {\n\t    throw new Error('Parameter \"policies\" must be an object containing at least a \"roleId\" member which must be a string.');\n\t  }\n\t\n\t  if (!this.content.policies) {\n\t    this.content.policies = [];\n\t  }\n\t\n\t  this.content.policies.push(policy);\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Set policies list\n\t * @param {Array} policies - must be an array of objects containing at least a \"roleId\" member which must be a string\n\t *\n\t * @returns {KuzzleProfile} this\n\t */\n\tKuzzleProfile.prototype.setPolicies = function (policies) {\n\t\n\t  if (!Array.isArray(policies)) {\n\t    throw new Error('Parameter \"policies\" must be an array of objects containing at least a \"roleId\" member which must be a string');\n\t  }\n\t\n\t  policies.map(function (policy) {\n\t    if (typeof policy !== 'object' || typeof policy.roleId !== 'string') {\n\t      throw new Error('Parameter \"policies\" must be an array of objects containing at least a \"roleId\" member which must be a string');\n\t    }\n\t  });\n\t\n\t  this.content.policies = policies;\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Serialize this object into a JSON object\n\t *\n\t * @return {object} JSON object representing this securityDocument\n\t */\n\tKuzzleProfile.prototype.serialize = function () {\n\t  var\n\t    data = {};\n\t\n\t  if (this.id) {\n\t    data._id = this.id;\n\t  }\n\t\n\t  data.body = this.content;\n\t\n\t  return data;\n\t};\n\t\n\t/**\n\t * Returns the list of policies associated to this profile.\n\t * Each policy element is an array of objects containing at least a \"roleId\" member which must be a string\n\t *\n\t * @return {object} an array of policies\n\t */\n\tKuzzleProfile.prototype.getPolicies = function () {\n\t  return this.content.policies;\n\t};\n\t\n\tmodule.exports = KuzzleProfile;\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar KuzzleSecurityDocument = __webpack_require__(1);\n\t\n\tfunction KuzzleRole(kuzzleSecurity, id, content) {\n\t\n\t  KuzzleSecurityDocument.call(this, kuzzleSecurity, id, content);\n\t\n\t  // Define properties\n\t  Object.defineProperties(this, {\n\t    // private properties\n\t    deleteActionName: {\n\t      value: 'deleteRole'\n\t    },\n\t    updateActionName: {\n\t      value: 'updateRole'\n\t    }\n\t  });\n\t\n\t  // promisifying\n\t  if (kuzzleSecurity.kuzzle.bluebird) {\n\t    return kuzzleSecurity.kuzzle.bluebird.promisifyAll(this, {\n\t      suffix: 'Promise',\n\t      filter: function (name, func, target, passes) {\n\t        var whitelist = ['save'];\n\t\n\t        return passes && whitelist.indexOf(name) !== -1;\n\t      }\n\t    });\n\t  }\n\t\n\t}\n\t\n\tKuzzleRole.prototype = Object.create(KuzzleSecurityDocument.prototype, {\n\t  constructor: {\n\t    value: KuzzleRole\n\t  }\n\t});\n\t\n\t/**\n\t * Saves this role into Kuzzle.\n\t *\n\t * If this is a new role, this function will create it in Kuzzle.\n\t * Otherwise, this method will replace the latest version of this role in Kuzzle by the current content\n\t * of this object.\n\t *\n\t * @param {object} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @returns {KuzzleRole} this object\n\t */\n\tKuzzleRole.prototype.save = function (options, cb) {\n\t  var\n\t    data = this.serialize(),\n\t    self = this;\n\t\n\t  if (options && cb === undefined && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.query(this.kuzzleSecurity.buildQueryArgs('createOrReplaceRole'), data, options, cb && function (error) {\n\t    cb(error, error ? undefined : self);\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\tmodule.exports = KuzzleRole;\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar\n\t  KuzzleRole = __webpack_require__(14),\n\t  KuzzleProfile = __webpack_require__(13),\n\t  KuzzleUser = __webpack_require__(3);\n\t\n\t/**\n\t * Kuzzle security constructor\n\t *\n\t * @param kuzzle\n\t * @returns {KuzzleSecurity}\n\t * @constructor\n\t */\n\tfunction KuzzleSecurity(kuzzle) {\n\t\n\t  Object.defineProperty(this, 'kuzzle', {\n\t    value: kuzzle\n\t  });\n\t\n\t  Object.defineProperty(this, 'buildQueryArgs', {\n\t    value: function (action) {\n\t      return {\n\t        controller: 'security',\n\t        action: action\n\t      };\n\t    }\n\t  });\n\t\n\t  if (this.kuzzle.bluebird) {\n\t    return this.kuzzle.bluebird.promisifyAll(this, {\n\t      suffix: 'Promise',\n\t      filter: function (name, func, target, passes) {\n\t        var blacklist = ['roleFactory', 'profileFactory', 'userFactory', 'isActionAllowed'];\n\t\n\t        return passes && blacklist.indexOf(name) === -1;\n\t      }\n\t    });\n\t  }\n\t\n\t  return this;\n\t}\n\t\n\t\n\t/**\n\t * Retrieve a single Role using its unique role ID.\n\t *\n\t * @param {string} id\n\t * @param {object|responseCallback} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - returns Kuzzle's response\n\t */\n\tKuzzleSecurity.prototype.getRole = function (id, options, cb) {\n\t  var\n\t    data,\n\t    self = this;\n\t\n\t  if (!id) {\n\t    throw new Error('Id parameter is mandatory for getRole function');\n\t  }\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  data = {_id: id};\n\t\n\t  self.kuzzle.callbackRequired('KuzzleSecurity.getRole', cb);\n\t\n\t  self.kuzzle.query(this.buildQueryArgs('getRole'), data, options, function (err, response) {\n\t    cb(err, err ? undefined : new KuzzleRole(self, response.result._id, response.result._source));\n\t  });\n\t};\n\t\n\t/**\n\t * Executes a search on roles according to a filter\n\t *\n\t * /!\\ There is a small delay between role creation and their existence in our persistent search layer,\n\t * usually a couple of seconds.\n\t * That means that a role that was just been created won’t be returned by this function.\n\t *\n\t * @param {Object} filters - this object can contains an array `indexes` with a list of index id, a integer `from` and a integer `size`\n\t * @param {object|responseCallback} [options] - Optional parameters\n\t * @param {responseCallback} [cb] - returns Kuzzle's response\n\t *\n\t */\n\tKuzzleSecurity.prototype.searchRoles = function (filters, options, cb) {\n\t  var\n\t    self = this;\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.callbackRequired('KuzzleSecurity.searchRoles', cb);\n\t\n\t  self.kuzzle.query(this.buildQueryArgs('searchRoles'), {body: filters}, options, function (error, result) {\n\t    var documents;\n\t\n\t    if (error) {\n\t      return cb(error);\n\t    }\n\t\n\t    documents = result.result.hits.map(function (doc) {\n\t      return new KuzzleRole(self, doc._id, doc._source);\n\t    });\n\t\n\t    cb(null, { total: result.result.total, roles: documents });\n\t  });\n\t};\n\t\n\t/**\n\t * Create a new role in Kuzzle.\n\t *\n\t * Takes an optional argument object with the following property:\n\t *    - replaceIfExist (boolean, default: false):\n\t *        If the same role already exists: throw an error if sets to false.\n\t *        Replace the existing role otherwise\n\t *\n\t * @param {string} id - role identifier\n\t * @param {object} content - a plain javascript object representing the role\n\t * @param {object|responseCallback} [options] - (optional) arguments\n\t * @param {responseCallback} [cb] - (optional) Handles the query response\n\t */\n\tKuzzleSecurity.prototype.createRole = function (id, content, options, cb) {\n\t  var\n\t    self = this,\n\t    data = {},\n\t    action = 'createRole';\n\t\n\t  if (!id || typeof id !== 'string') {\n\t    throw new Error('KuzzleSecurity.createRole: cannot create a role without a role ID');\n\t  }\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  data._id = id;\n\t  data.body = content;\n\t\n\t  if (options) {\n\t    action = options.replaceIfExist ? 'createOrReplaceRole' : 'createRole';\n\t  }\n\t\n\t  self.kuzzle.query(this.buildQueryArgs(action), data, options, cb && function (err, res) {\n\t    cb(err, err ? undefined : new KuzzleRole(self, res.result._id, res.result._source));\n\t  });\n\t};\n\t\n\t\n\t/**\n\t * Update a role in Kuzzle.\n\t *\n\t * @param {string} id - role identifier\n\t * @param {object} content - a plain javascript object representing the role's modification\n\t * @param {object|responseCallback} [options] - (optional) arguments\n\t * @param {responseCallback} [cb] - (optional) Handles the query response\n\t * @returns {KuzzleSecurity} this object\n\t */\n\tKuzzleSecurity.prototype.updateRole = function (id, content, options, cb) {\n\t  var\n\t    self = this,\n\t    data = {_id: id, body: content},\n\t    action = 'updateRole';\n\t\n\t  if (!id || typeof id !== 'string') {\n\t    throw new Error('KuzzleSecurity.updateRole: cannot update a role without a role ID');\n\t  }\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.query(this.buildQueryArgs(action), data, options, cb && function (err) {\n\t    cb(err, err ? undefined : new KuzzleRole(self, id, content));\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Delete role.\n\t *\n\t * There is a small delay between role deletion and their deletion in our advanced search layer,\n\t * usually a couple of seconds.\n\t * That means that a role that was just been delete will be returned by this function\n\t *\n\t *\n\t * @param {string} id - Role id to delete\n\t * @param {object|responseCallback} [options] - (optional) arguments\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @returns {KuzzleSecurity} this object\n\t */\n\tKuzzleSecurity.prototype.deleteRole = function (id, options, cb) {\n\t  var data = {_id: id};\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  this.kuzzle.query(this.buildQueryArgs('deleteRole'), data, options, cb && function (err, res) {\n\t    cb(err, err ? undefined : res.result._id);\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Instantiate a new KuzzleRole object. Workaround to the module.exports limitation, preventing multiple\n\t * constructors to be exposed without having to use a factory or a composed object.\n\t *\n\t * @param {string} id - role id\n\t * @param {object} content - role content\n\t * @constructor\n\t */\n\tKuzzleSecurity.prototype.roleFactory = function(id, content) {\n\t  return new KuzzleRole(this, id, content);\n\t};\n\t\n\t\n\t/**\n\t * Get a specific profile from kuzzle\n\t *\n\t *\n\t * @param {string} id\n\t * @param {object|responseCallback} [options] - (optional) arguments\n\t * @param {responseCallback} cb - returns Kuzzle's response\n\t */\n\tKuzzleSecurity.prototype.getProfile = function (id, options, cb) {\n\t  var\n\t    data,\n\t    self = this;\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  if (!id || typeof id !== 'string') {\n\t    throw new Error('Id parameter is mandatory for getProfile function');\n\t  }\n\t\n\t\n\t  data = {_id: id};\n\t\n\t  self.kuzzle.callbackRequired('KuzzleSecurity.getProfile', cb);\n\t\n\t  self.kuzzle.query(this.buildQueryArgs('getProfile'), data, options, function (error, response) {\n\t    cb(error, error ? undefined : new KuzzleProfile(self, response.result._id, response.result._source));\n\t  });\n\t};\n\t\n\t/**\n\t * Executes a search on profiles according to a filter\n\t *\n\t *\n\t * /!\\ There is a small delay between profile creation and their existence in our persistent search layer,\n\t * usually a couple of seconds.\n\t * That means that a profile that was just been created won’t be returned by this function.\n\t *\n\t * @param {Object} filters - this object can contains an array `roles` with a list of roles id, a integer `from` and a integer `size`\n\t * @param {object|responseCallback} [options] - (optional) arguments\n\t * @param {responseCallback} [cb] - returns Kuzzle's response\n\t */\n\tKuzzleSecurity.prototype.searchProfiles = function (filters, options, cb) {\n\t  var\n\t    self = this;\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.callbackRequired('KuzzleSecurity.searchProfiles', cb);\n\t\n\t  self.kuzzle.query(this.buildQueryArgs('searchProfiles'), {body: filters}, options, function (error, response) {\n\t    var documents;\n\t\n\t    if (error) {\n\t      return cb(error);\n\t    }\n\t\n\t    documents = response.result.hits.map(function (doc) {\n\t      return new KuzzleProfile(self, doc._id, doc._source);\n\t    });\n\t\n\t    cb(null, { total: response.result.total, profiles: documents });\n\t  });\n\t};\n\t\n\t/**\n\t * Create a new profile in Kuzzle.\n\t *\n\t * Takes an optional argument object with the following property:\n\t *    - replaceIfExist (boolean, default: false):\n\t *        If the same profile already exists: throw an error if sets to false.\n\t *        Replace the existing profile otherwise\n\t *\n\t * @param {string} id - profile identifier\n\t * @param {object} content - attribute `roles` in `content` must only contains an array of role id\n\t * @param {object|responseCallback} [options] - (optional) arguments\n\t * @param {responseCallback} [cb] - (optional) Handles the query response\n\t */\n\tKuzzleSecurity.prototype.createProfile = function (id, content, options, cb) {\n\t  var\n\t    self = this,\n\t    data = {},\n\t    action = 'createProfile';\n\t\n\t  if (!id || typeof id !== 'string') {\n\t    throw new Error('KuzzleSecurity.createProfile: cannot create a profile without a profile ID');\n\t  }\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  data._id = id;\n\t  data.body = content;\n\t\n\t  if (options) {\n\t    action = options.replaceIfExist ? 'createOrReplaceProfile' : 'createProfile';\n\t  }\n\t\n\t  self.kuzzle.query(this.buildQueryArgs(action), data, options, cb && function (err, res) {\n\t    cb(err, err ? undefined : new KuzzleProfile(self, res.result._id, res.result._source));\n\t  });\n\t};\n\t\n\t\n\t/**\n\t * Update a profile in Kuzzle.\n\t *\n\t * @param {string} id - profile identifier\n\t * @param {object} content - a plain javascript object representing the profile's modification\n\t * @param {object|responseCallback} [options] - (optional) arguments\n\t * @param {responseCallback} [cb] - (optional) Handles the query response\n\t * @returns {KuzzleSecurity} this object\n\t */\n\tKuzzleSecurity.prototype.updateProfile = function (id, content, options, cb) {\n\t  var\n\t    self = this,\n\t    data = {},\n\t    action = 'updateProfile';\n\t\n\t  if (!id || typeof id !== 'string') {\n\t    throw new Error('KuzzleSecurity.updateProfile: cannot update a profile without a profile ID');\n\t  }\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  data._id = id;\n\t  data.body = content;\n\t\n\t  self.kuzzle.query(this.buildQueryArgs(action), data, options, cb && function (err, res) {\n\t    var updatedContent = {};\n\t\n\t    if (err) {\n\t      return cb(err);\n\t    }\n\t\n\t    Object.keys(res.result._source).forEach(function (property) {\n\t      updatedContent[property] = res.result._source[property];\n\t    });\n\t\n\t    cb(null, new KuzzleProfile(self, res.result._id, updatedContent));\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Delete profile.\n\t *\n\t * There is a small delay between profile deletion and their deletion in our advanced search layer,\n\t * usually a couple of seconds.\n\t * That means that a profile that was just been delete will be returned by this function\n\t *\n\t *\n\t * @param {string} id - Profile id to delete\n\t * @param {object|responseCallback} [options] - (optional) arguments\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @returns {KuzzleSecurity} this object\n\t */\n\tKuzzleSecurity.prototype.deleteProfile = function (id, options, cb) {\n\t  var data = {_id: id};\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  this.kuzzle.query(this.buildQueryArgs('deleteProfile'), data, options, cb && function (err, res) {\n\t    cb(err, err ? undefined : res.result._id);\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Instantiate a new KuzzleProfile object. Workaround to the module.exports limitation, preventing multiple\n\t * constructors to be exposed without having to use a factory or a composed object.\n\t *\n\t * @param {string} id - profile id\n\t * @param {object} content - profile content\n\t * @constructor\n\t */\n\tKuzzleSecurity.prototype.profileFactory = function(id, content) {\n\t  return new KuzzleProfile(this, id, content);\n\t};\n\t\n\t/**\n\t * Get a specific user from kuzzle using its unique ID\n\t *\n\t * @param {string} id\n\t * @param {object|responseCallback} [options] - (optional) arguments\n\t * @param {responseCallback} cb - returns Kuzzle's response\n\t */\n\tKuzzleSecurity.prototype.getUser = function (id, options, cb) {\n\t  var\n\t    data = {_id: id},\n\t    self = this;\n\t\n\t  if (!id || typeof id !== 'string') {\n\t    throw new Error('Id parameter is mandatory for getUser function');\n\t  }\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.callbackRequired('KuzzleSecurity.getUser', cb);\n\t\n\t  self.kuzzle.query(this.buildQueryArgs('getUser'), data, options, function (err, response) {\n\t    cb(err, err ? undefined : new KuzzleUser(self, response.result._id, response.result._source));\n\t  });\n\t};\n\t\n\t/**\n\t * Executes a search on user according to a filter\n\t *\n\t * /!\\ There is a small delay between user creation and their existence in our persistent search layer,\n\t * usually a couple of seconds.\n\t * That means that a user that was just been created won’t be returned by this function.\n\t *\n\t * @param {Object} filters - same filters as documents filters\n\t * @param {object|responseCallback} [options] - (optional) arguments\n\t * @param {responseCallback} [cb] - returns Kuzzle's response\n\t */\n\tKuzzleSecurity.prototype.searchUsers = function (filters, options, cb) {\n\t  var\n\t    self = this;\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.callbackRequired('KuzzleSecurity.searchUsers', cb);\n\t\n\t  self.kuzzle.query(this.buildQueryArgs('searchUsers'), {body: filters}, options, function (error, response) {\n\t    var documents;\n\t\n\t    if (error) {\n\t      return cb(error);\n\t    }\n\t\n\t    documents = response.result.hits.map(function (doc) {\n\t      return new KuzzleUser(self, doc._id, doc._source);\n\t    });\n\t\n\t    cb(null, { total: response.result.total, users: documents });\n\t  });\n\t};\n\t\n\t/**\n\t * Create a new user in Kuzzle.\n\t *\n\t * Takes an optional argument object with the following property:\n\t *    - replaceIfExist (boolean, default: false):\n\t *        If the same user already exists: throw an error if sets to false.\n\t *        Replace the existing user otherwise\n\t *\n\t * @param {string} id - user identifier\n\t * @param {object} content - attribute `profileIds` in `content` must only contain an array of profile ids\n\t * @param {object|responseCallback} [options] - (optional) arguments\n\t * @param {responseCallback} [cb] - (optional) Handles the query response\n\t */\n\tKuzzleSecurity.prototype.createUser = function (id, content, options, cb) {\n\t  var\n\t    self = this,\n\t    data = {_id: id, body: content},\n\t    action = 'createUser';\n\t\n\t  if (!id || typeof id !== 'string') {\n\t    throw new Error('KuzzleSecurity.createUser: cannot create a user without a user ID');\n\t  }\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  if (options) {\n\t    action = options.replaceIfExist ? 'createOrReplaceUser' : 'createUser';\n\t  }\n\t\n\t  self.kuzzle.query(this.buildQueryArgs(action), data, null, cb && function (err, res) {\n\t    cb(err, err ? undefined : new KuzzleUser(self, res.result._id, res.result._source));\n\t  });\n\t};\n\t\n\t/**\n\t * Create a new restricted user in Kuzzle.\n\t *\n\t * This function will create a new user. It is not usable to update an existing user.\n\t * This function allows anonymous users to create a \"restricted\" user with predefined rights.\n\t *\n\t * @param {string} id - user identifier\n\t * @param {object} content - attribute `profile` in `content` must only contains the profile id\n\t * @param {object|responseCallback} [options] - (optional) arguments\n\t * @param {responseCallback} [cb] - (optional) Handles the query response\n\t */\n\tKuzzleSecurity.prototype.createRestrictedUser = function (id, content, options, cb) {\n\t  var\n\t    self = this,\n\t    data = {_id: id, body: content};\n\t\n\t  if (!id || typeof id !== 'string') {\n\t    throw new Error('KuzzleSecurity.createRestrictedUser: cannot create a user without a user ID');\n\t  }\n\t\n\t  if (content.profileIds) {\n\t    throw new Error('KuzzleSecurity.createRestrictedUser: cannot provide profileIds');\n\t  }\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.query(this.buildQueryArgs('createRestrictedUser'), data, null, cb && function (err, res) {\n\t    cb(err, err ? undefined : new KuzzleUser(self, res.result._id, res.result._source));\n\t  });\n\t};\n\t\n\t\n\t/**\n\t * Update an user in Kuzzle.\n\t *\n\t * @param {string} id - user identifier\n\t * @param {object} content - a plain javascript object representing the user's modification\n\t * @param {object|responseCallback} [options] - (optional) arguments\n\t * @param {responseCallback} [cb] - (optional) Handles the query response\n\t * @returns {KuzzleSecurity} this object\n\t */\n\tKuzzleSecurity.prototype.updateUser = function (id, content, options, cb) {\n\t  var\n\t    self = this,\n\t    data = {},\n\t    action = 'updateUser';\n\t\n\t  if (!id || typeof id !== 'string') {\n\t    throw new Error('KuzzleSecurity.updateUser: cannot update an user without an user ID');\n\t  }\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  data._id = id;\n\t  data.body = content;\n\t\n\t  self.kuzzle.query(this.buildQueryArgs(action), data, options, cb && function (err, res) {\n\t    cb(err, err ? undefined : new KuzzleUser(self, res.result._id, res.result._source));\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Delete user.\n\t *\n\t * There is a small delay between user deletion and their deletion in our advanced search layer,\n\t * usually a couple of seconds.\n\t * That means that a user that was just been delete will be returned by this function\n\t *\n\t *\n\t * @param {string} id - Profile id to delete\n\t * @param {object|responseCallback} [options] - (optional) arguments\n\t * @param {responseCallback} [cb] - Handles the query response\n\t * @returns {KuzzleSecurity} this object\n\t */\n\tKuzzleSecurity.prototype.deleteUser = function (id, options, cb) {\n\t  var data = {_id: id};\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  this.kuzzle.query(this.buildQueryArgs('deleteUser'), data, options, cb && function (err, res) {\n\t    cb(err, err ? undefined : res.result._id);\n\t  });\n\t\n\t  return this;\n\t};\n\t\n\t/**\n\t * Instantiate a new KuzzleUser object. Workaround to the module.exports limitation, preventing multiple\n\t * constructors to be exposed without having to use a factory or a composed object.\n\t *\n\t * @param {string} id - user id\n\t * @param {object} content - user content\n\t * @constructor\n\t */\n\tKuzzleSecurity.prototype.userFactory = function(id, content) {\n\t  return new KuzzleUser(this, id, content);\n\t};\n\t\n\t/**\n\t * Tells whether an action is allowed, denied or conditional based on the rights\n\t * rights provided as the first argument. An action is defined as a couple of\n\t * action and controller (mandatory), plus an index and a collection(optional).\n\t *\n\t * @param {object} rights - The rights rights associated to a user\n\t *                            (see getMyrights and getUserrights).\n\t * @param {string} controller - The controller to check the action onto.\n\t * @param {string} action - The action to perform.\n\t * @param {string} index - (optional) The name of index to perform the action onto.\n\t * @param {string} collection - (optional) The name of the collection to perform the action onto.\n\t *\n\t * @returns {string} ['allowed', 'denied', 'conditional'] where conditional cases\n\t *                   correspond to rights containing closures.\n\t *                   See also http://kuzzle.io/guide/#roles-definition\n\t */\n\tKuzzleSecurity.prototype.isActionAllowed = function(rights, controller, action, index, collection) {\n\t  var filteredRights;\n\t\n\t  if (!rights || typeof rights !== 'object') {\n\t    throw new Error('rights parameter is mandatory for isActionAllowed function');\n\t  }\n\t  if (!controller || typeof controller !== 'string') {\n\t    throw new Error('controller parameter is mandatory for isActionAllowed function');\n\t  }\n\t  if (!action || typeof action !== 'string') {\n\t    throw new Error('action parameter is mandatory for isActionAllowed function');\n\t  }\n\t\n\t  // We filter in all the rights that match the request (including wildcards).\n\t  filteredRights = rights\n\t    .filter(function (right) {\n\t      return right.controller === controller || right.controller === '*';\n\t    })\n\t    .filter(function (right) {\n\t      return right.action === action || right.action === '*';\n\t    })\n\t    .filter(function (right) {\n\t      return right.index === index || right.index === '*';\n\t    })\n\t    .filter(function (right) {\n\t      return right.collection === collection || right.collection === '*';\n\t    });\n\t\n\t  // Then, if at least one right allows the action, we return 'allowed'\n\t  if (filteredRights.some(function (item) { return item.value === 'allowed'; })) {\n\t    return 'allowed';\n\t  }\n\t  // If no right allows the action, we check for conditionals.\n\t  if (filteredRights.some(function (item) { return item.value === 'conditional'; })) {\n\t    return 'conditional';\n\t  }\n\t  // Otherwise we return 'denied'.\n\t  return 'denied';\n\t};\n\t\n\t\n\t/**\n\t * Gets the rights array of a given user.\n\t *\n\t * @param {string} userId The id of the user.\n\t * @param {object|responseCallback} [options] - (optional) arguments\n\t * @param {function} cb The callback containing the normalized array of rights.\n\t */\n\tKuzzleSecurity.prototype.getUserRights = function (userId, options, cb) {\n\t  var\n\t    data = {_id: userId},\n\t    self = this;\n\t\n\t  if (!userId || typeof userId !== 'string') {\n\t    throw new Error('userId parameter is mandatory for getUserRights function');\n\t  }\n\t\n\t  if (!cb && typeof options === 'function') {\n\t    cb = options;\n\t    options = null;\n\t  }\n\t\n\t  self.kuzzle.callbackRequired('Kuzzle.getUserRights', cb);\n\t\n\t  this.kuzzle.query(this.buildQueryArgs('getUserRights'), data, options, cb && function (err, res) {\n\t    cb(err, err ? undefined : res.result.hits);\n\t  });\n\t};\n\t\n\tmodule.exports = KuzzleSecurity;\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\tvar rng;\n\t\n\tvar crypto = (window).crypto || (window).msCrypto; // for IE 11\n\tif (crypto && crypto.getRandomValues) {\n\t  // WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto\n\t  // Moderately fast, high quality\n\t  var _rnds8 = new Uint8Array(16);\n\t  rng = function whatwgRNG() {\n\t    crypto.getRandomValues(_rnds8);\n\t    return _rnds8;\n\t  };\n\t}\n\t\n\tif (!rng) {\n\t  // Math.random()-based (RNG)\n\t  //\n\t  // If all else fails, use Math.random().  It's fast, but is of unspecified\n\t  // quality.\n\t  var  _rnds = new Array(16);\n\t  rng = function() {\n\t    for (var i = 0, r; i < 16; i++) {\n\t      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n\t      _rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n\t    }\n\t\n\t    return _rnds;\n\t  };\n\t}\n\t\n\tmodule.exports = rng;\n\t\n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** kuzzle.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 9af9cfc29e5340e3766a\n **/","var\n  uuid = require('uuid'),\n  KuzzleDataCollection = require('./kuzzleDataCollection'),\n  KuzzleSecurity = require('./security/kuzzleSecurity'),\n  KuzzleMemoryStorage = require('./kuzzleMemoryStorage'),\n  KuzzleUser = require('./security/kuzzleUser'),\n  networkWrapper = require('./networkWrapper');\n\n/**\n * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n *\n * @callback responseCallback\n * @param {Object} err - Error object, NULL if the query is successful\n * @param {Object} [data] - The content of the query response\n */\n\n/**\n * Kuzzle object constructor.\n *\n * @constructor\n * @param host - Server name or IP Address to the Kuzzle instance\n * @param [options] - Connection options\n * @param {responseCallback} [cb] - Handles connection response\n * @constructor\n */\nmodule.exports = Kuzzle = function (host, options, cb) {\n  var self = this;\n\n  if (!(this instanceof Kuzzle)) {\n    return new Kuzzle(host, options, cb);\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  if (!host || host === '') {\n    throw new Error('host argument missing');\n  }\n\n  Object.defineProperties(this, {\n    // 'private' properties\n    collections: {\n      value: {},\n      writable: true\n    },\n    connectCB: {\n      value: cb\n    },\n    eventListeners: {\n      value: {\n        connected: {lastEmitted: null, listeners: []},\n        error: {lastEmitted: null, listeners: []},\n        disconnected: {lastEmitted: null, listeners: []},\n        reconnected: {lastEmitted: null, listeners: []},\n        jwtTokenExpired: {lastEmitted: null, listeners: []},\n        loginAttempt: {lastEmitted: null, listeners: []},\n        offlineQueuePush: {listeners: []},\n        offlineQueuePop: {listeners: []},\n        queryError: {listeners: []}\n      }\n    },\n    eventTimeout: {\n      value: 200\n    },\n    queuing: {\n      value: false,\n      writable: true\n    },\n    requestHistory: {\n      value: {},\n      writable: true\n    },\n    state: {\n      value: 'initializing',\n      writable: true\n    },\n    subscriptions: {\n      /*\n       Contains the centralized subscription list in the following format:\n          pending: <number of pending subscriptions>\n          'roomId': {\n            kuzzleRoomID_1: kuzzleRoomInstance_1,\n            kuzzleRoomID_2: kuzzleRoomInstance_2,\n            kuzzleRoomID_...: kuzzleRoomInstance_...\n          }\n\n       This was made to allow multiple subscriptions on the same set of filters, something that Kuzzle does not permit.\n       This structure also allows renewing subscriptions after a connection loss\n       */\n      value: {\n        pending: {}\n      },\n      writable: true\n    },\n    // read-only properties\n    autoReconnect: {\n      value: (options && typeof options.autoReconnect === 'boolean') ? options.autoReconnect : true,\n      enumerable: true\n    },\n    defaultIndex: {\n      value: (options && typeof options.defaultIndex === 'string') ? options.defaultIndex : undefined,\n      writable: true,\n      enumerable: true\n    },\n    reconnectionDelay: {\n      value: (options && typeof options.reconnectionDelay === 'number') ? options.reconnectionDelay : 1000,\n      enumerable: true\n    },\n    host: {\n      value: host,\n      writable: true,\n      enumerable: true\n    },\n    wsPort: {\n      value: (options && typeof options.wsPort === 'number') ? options.wsPort : 7513,\n      enumerable: true,\n      writable: true\n    },\n    ioPort: {\n      value: (options && typeof options.ioPort === 'number') ? options.ioPort : 7512,\n      enumerable: true,\n      writable: true\n    },\n    sslConnection: {\n      value: (options && typeof options.sslConnection === 'boolean') ? options.sslConnection : false,\n      enumerable: true\n    },\n    autoQueue: {\n      value: false,\n      enumerable: true,\n      writable: true\n    },\n    autoReplay: {\n      value: false,\n      enumerable: true,\n      writable: true\n    },\n    autoResubscribe: {\n      value: true,\n      enumerable: true,\n      writable: true\n    },\n    headers: {\n      value: {},\n      enumerable: true,\n      writable: true\n    },\n    metadata: {\n      value: {},\n      enumerable: true,\n      writable: true\n    },\n    /*\n      Offline queue use the following format:\n            [\n              {\n                ts: <query timestamp>,\n                query: 'query',\n                cb: callbackFunction\n              }\n            ]\n     */\n    offlineQueue: {\n      value: [],\n      enumerable: true,\n      writable: true\n    },\n    queueFilter: {\n      value: null,\n      enumerable: true,\n      writable: true\n    },\n    queueMaxSize: {\n      value: 500,\n      enumerable: true,\n      writable: true\n    },\n    queueTTL: {\n      value: 120000,\n      enumerable: true,\n      writable: true\n    },\n    replayInterval: {\n      value: 10,\n      enumerable: true,\n      writable: true\n    },\n    jwtToken: {\n      value: undefined,\n      enumerable: true,\n      writable: true\n    },\n    offlineQueueLoader: {\n      value: null,\n      enumerable: true,\n      writable: true\n    }\n  });\n\n  if (options) {\n    Object.keys(options).forEach(function (opt) {\n      if (self.hasOwnProperty(opt) && Object.getOwnPropertyDescriptor(self, opt).writable) {\n        self[opt] = options[opt];\n      }\n    });\n\n    if (options.offlineMode === 'auto' && this.autoReconnect) {\n      this.autoQueue = this.autoReplay = this.autoResubscribe = true;\n    }\n  }\n\n  // Helper function ensuring that this Kuzzle object is still valid before performing a query\n  Object.defineProperty(this, 'isValid', {\n    value: function () {\n      if (self.state === 'disconnected') {\n        throw new Error('This Kuzzle object has been invalidated. Did you try to access it after a disconnect call?');\n      }\n    }\n  });\n\n  // Helper function copying headers to the query data\n  Object.defineProperty(this, 'addHeaders', {\n    value: function (query, headers) {\n      Object.keys(headers).forEach(function (header) {\n        if (!query[header]) {\n          query[header] = headers[header];\n        }\n      });\n\n      return query;\n    }\n  });\n\n  /**\n   * Some methods (mainly read queries) require a callback function. This function exists to avoid repetition of code,\n   * and is called by these methods\n   */\n  Object.defineProperty(this, 'callbackRequired', {\n    value: function (errorMessagePrefix, callback) {\n      if (!callback || typeof callback !== 'function') {\n        throw new Error(errorMessagePrefix + ': a callback argument is required for read queries');\n      }\n    }\n  });\n\n  /**\n   * Create an attribute security that embed all methods to manage Role, Profile and User\n   */\n  Object.defineProperty(this, 'security', {\n    value: new KuzzleSecurity(this),\n    enumerable: true\n  });\n\n  /**\n   * Emit an event to all registered listeners\n   * An event cannot be emitted multiple times before a timeout has been reached.\n   */\n  Object.defineProperty(this, 'emitEvent', {\n    value: function emitEvent(event) {\n      var\n        now = Date.now(),\n        args = Array.prototype.slice.call(arguments, 1),\n        eventProperties = this.eventListeners[event];\n\n      if (eventProperties.lastEmitted && eventProperties.lastEmitted >= now - this.eventTimeout) {\n        return false;\n      }\n\n      eventProperties.listeners.forEach(function (listener) {\n        process.nextTick(function () {\n          listener.fn.apply(undefined, args);\n        });\n      });\n\n      // Events without the 'lastEmitted' property can be emitted without minimum time between emissions\n      if (eventProperties.lastEmitted !== undefined) {\n        eventProperties.lastEmitted = now;\n      }\n    }\n  });\n\n  Object.defineProperty(this, 'memoryStorage', {\n    value: new KuzzleMemoryStorage(this),\n    enumerable: true\n  });\n\n\n  if (!options || !options.connect || options.connect === 'auto') {\n    this.connect();\n  } else {\n    this.state = 'ready';\n  }\n\n  cleanHistory(this.requestHistory);\n\n  if (this.bluebird) {\n    return this.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var whitelist = ['getAllStatistics', 'getServerInfo', 'getStatistics',\n          'listCollections', 'listIndexes', 'login', 'logout', 'now', 'query',\n          'checkToken', 'whoAmI', 'updateSelf', 'getMyRights',\n          'refreshIndex', 'getAutoRefresh', 'setAutoRefresh'\n        ];\n\n        return passes && whitelist.indexOf(name) !== -1;\n      }\n    });\n  }\n};\n\n/**\n * Connects to a Kuzzle instance using the provided host name.\n * @returns {Object} this\n */\nKuzzle.prototype.connect = function () {\n  var self = this;\n\n  if (self.network) {\n    self.disconnect();\n  }\n\n  self.network = networkWrapper(self.host, self.wsPort, self.ioPort, self.sslConnection);\n\n  if (['initializing', 'ready', 'disconnected', 'error', 'offline'].indexOf(this.state) === -1) {\n    if (self.connectCB) {\n      self.connectCB(null, self);\n    }\n    return self;\n  }\n\n  self.state = 'connecting';\n  self.network.connect(self.autoReconnect, self.reconnectionDelay);\n\n  self.network.onConnect(function () {\n    self.state = 'connected';\n    renewAllSubscriptions.call(self);\n    dequeue.call(self);\n    self.emitEvent('connected');\n\n    if (self.connectCB) {\n      self.connectCB(null, self);\n    }\n  });\n\n  self.network.onConnectError(function (error) {\n    var connectionError = new Error('Unable to connect to kuzzle proxy server at \"' + self.host + '\"');\n\n    connectionError.internal = error;\n    self.state = 'error';\n    self.emitEvent('error', connectionError);\n\n    if (self.connectCB) {\n      self.connectCB(connectionError);\n    }\n  });\n\n  self.network.onDisconnect(function () {\n    self.state = 'offline';\n\n    if (!self.autoReconnect) {\n      self.disconnect();\n    }\n\n    if (self.autoQueue) {\n      self.queuing = true;\n    }\n\n    self.emitEvent('disconnected');\n  });\n\n  self.network.onReconnect(function () {\n    var reconnect = function () {\n      // renew subscriptions\n      if (self.autoResubscribe) {\n        renewAllSubscriptions.call(self);\n      }\n\n      // replay queued requests\n      if (self.autoReplay) {\n        cleanQueue.call(self);\n        dequeue.call(self);\n      }\n\n      // alert listeners\n      self.emitEvent('reconnected');\n    };\n\n    self.state = 'connected';\n\n    if (self.jwtToken) {\n      self.checkToken(self.jwtToken, function (err, res) {\n        // shouldn't obtain an error but let's invalidate the token anyway\n        if (err || !res.valid) {\n          self.jwtToken = undefined;\n          self.emitEvent('jwtTokenExpired');\n        }\n\n        reconnect();\n      });\n    } else {\n      reconnect();\n    }\n  });\n\n  return this;\n};\n\n/**\n * Set the jwtToken used to query kuzzle\n * @param token\n * @returns {Kuzzle}\n */\nKuzzle.prototype.setJwtToken = function(token) {\n  if (typeof token === 'string') {\n    this.jwtToken = token;\n  } else if (typeof token === 'object') {\n    if (token.result && token.result.jwt && typeof token.result.jwt === 'string') {\n      this.jwtToken = token.result.jwt;\n    } else {\n      this.emitEvent('loginAttempt', {\n        success: false,\n        error: 'Cannot find a valid JWT token in the following object: ' + JSON.stringify(token)\n      });\n\n      return this;\n    }\n  } else {\n    this.emitEvent('loginAttempt', {success: false, error: 'Invalid token argument: ' + token});\n    return this;\n  }\n\n  renewAllSubscriptions.call(this);\n  this.emitEvent('loginAttempt', {success: true});\n  return this;\n};\n\n/**\n * Unset the jwtToken used to query kuzzle\n * @returns {Kuzzle}\n */\nKuzzle.prototype.unsetJwtToken = function() {\n  this.jwtToken = undefined;\n\n  removeAllSubscriptions.call(this);\n\n  return this;\n};\n\n/**\n * Get the jwtToken used by kuzzle\n * @returns {Kuzzle}\n */\nKuzzle.prototype.getJwtToken = function() {\n  return this.jwtToken;\n};\n\n/**\n * Send login request to kuzzle with credentials\n * If login success, store the jwtToken into kuzzle object\n *\n * @param strategy\n * @param credentials\n * @param expiresIn\n * @param cb\n */\nKuzzle.prototype.login = function (strategy) {\n  var\n    self = this,\n    request = {\n      strategy: strategy\n    },\n    credentials,\n    cb = null;\n\n  // Handle arguments (credentials, expiresIn, cb)\n  if (arguments[1]) {\n    if (typeof arguments[1] === 'object') {\n      credentials = arguments[1];\n    } else if (typeof arguments[1] === 'number' || typeof arguments[1] === 'string') {\n      request.expiresIn = arguments[1];\n    } else if (typeof arguments[1] === 'function') {\n      cb = arguments[1];\n    }\n  }\n  if (arguments[2]) {\n    if (typeof arguments[2] === 'number' || typeof arguments[2] === 'string') {\n      request.expiresIn = arguments[2];\n    } else if (typeof arguments[2] === 'function') {\n      cb = arguments[2];\n    }\n  }\n  if (arguments[3] && typeof arguments[3] === 'function') {\n    cb = arguments[3];\n  }\n\n  if (typeof credentials === 'object') {\n    Object.keys(credentials).forEach(function (key) {\n      request[key] = credentials[key];\n    });\n  }\n\n  this.query({controller: 'auth', action: 'login'}, {body: request}, {queuable: false}, function(error, response) {\n    if (!error) {\n      if (response.result.jwt) {\n        self.setJwtToken(response.result.jwt);\n      }\n\n      cb && cb(null, response.result);\n    }\n    else {\n      cb && cb(error);\n      self.emitEvent('loginAttempt', {success: false, error: error.message});\n    }\n  });\n};\n\n/**\n * Send logout request to kuzzle with jwtToken.\n *\n * @param cb\n * @returns {Kuzzle}\n */\nKuzzle.prototype.logout = function (cb) {\n  var\n    self = this,\n    request = {\n      action: 'logout',\n      controller: 'auth',\n      requestId: uuid.v4(),\n      body: {}\n    };\n\n  this.query({controller: 'auth', action: 'logout'}, request, {queuable: false}, typeof cb !== 'function' ? null : function(error) {\n    if (error === null) {\n      self.unsetJwtToken();\n      cb(null, self);\n    }\n    else {\n      cb(error);\n    }\n  });\n\n  return self;\n};\n\n/**\n * Checks whether a given jwt token still represents a valid session in Kuzzle.\n *\n * @param  {string}   token     The jwt token to check\n * @param  {function} callback  The callback to be called when the response is\n *                              available. The signature is `function(error, response)`.\n */\nKuzzle.prototype.checkToken = function (token, callback) {\n  var\n    request = {\n      body: {\n        token: token\n      }\n    };\n\n  this.callbackRequired('Kuzzle.checkToken', callback);\n\n  this.query({controller: 'auth', action: 'checkToken'}, request, {queuable: false}, function (err, response) {\n    if (err) {\n      return callback(err);\n    }\n\n    callback(null, response.result);\n  });\n};\n\n/**\n * Fetches the current user.\n *\n * @param  {function} callback  The callback to be called when the response is\n *                              available. The signature is `function(error, response)`.\n */\nKuzzle.prototype.whoAmI = function (callback) {\n  var self = this;\n\n  self.callbackRequired('Kuzzle.whoAmI', callback);\n\n  self.query({controller: 'auth', action: 'getCurrentUser'}, {}, {}, function (err, response) {\n    if (err) {\n      return callback(err);\n    }\n\n    callback(null, new KuzzleUser(self.security, response.result._id, response.result._source));\n  });\n};\n\n/**\n * Gets the rights array of the currently logged user.\n *\n * @param {object} [options] - Optional parameters\n * @param  {function} cb The callback containing the normalized array of rights.\n */\nKuzzle.prototype.getMyRights = function (options, cb) {\n  var self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.callbackRequired('Kuzzle.getMyRights', cb);\n\n  self.query({controller: 'auth', action:'getMyRights'}, {}, options, function (err, res) {\n    if (err) {\n      return cb(err);\n    }\n\n    cb(null, res.result.hits);\n  });\n};\n\n/**\n * Update current user in Kuzzle.\n *\n * @param {object} content - a plain javascript object representing the user's modification\n * @param {object} [options] - (optional) arguments\n * @param {responseCallback} [cb] - (optional) Handles the query response\n * @returns {Kuzzle} this object\n */\nKuzzle.prototype.updateSelf = function (content, options, cb) {\n  var\n    self = this,\n    data = {},\n    queryArgs = {controller: 'auth', action: 'updateSelf'};\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data.body = content;\n\n  self.query(queryArgs, data, options, cb && function (err, res) {\n    cb(err, err ? undefined : res.result);\n  });\n\n  return this;\n};\n\n/**\n * Clean up the queue, ensuring the queryTTL and queryMaxSize properties are respected\n */\nfunction cleanQueue () {\n  var\n    self = this,\n    now = Date.now(),\n    lastDocumentIndex = -1;\n\n  if (self.queueTTL > 0) {\n    self.offlineQueue.forEach(function (query, index) {\n      if (query.ts < now - self.queueTTL) {\n        lastDocumentIndex = index;\n      }\n    });\n\n    if (lastDocumentIndex !== -1) {\n      self.offlineQueue\n        .splice(0, lastDocumentIndex + 1)\n        .forEach(function (droppedRequest) {\n          self.emitEvent('offlineQueuePop', droppedRequest.query);\n        });\n    }\n  }\n\n  if (self.queueMaxSize > 0 && self.offlineQueue.length > self.queueMaxSize) {\n    self.offlineQueue\n      .splice(0, self.offlineQueue.length - self.queueMaxSize)\n      .forEach(function (droppedRequest) {\n        self.emitEvent('offlineQueuePop', droppedRequest.query);\n      });\n  }\n}\n\n\n/**\n * Clean history from requests made more than 10s ago\n */\nfunction cleanHistory (requestHistory) {\n  var\n    now = Date.now();\n\n  Object.keys(requestHistory).forEach(function (key) {\n    if (requestHistory[key] < now - 10000) {\n      delete requestHistory[key];\n    }\n  });\n\n  setTimeout(function () {\n    cleanHistory(requestHistory);\n  }, 1000);\n}\n\n/**\n * Emit a request to Kuzzle\n *\n * @param {object} request\n * @param {responseCallback} [cb]\n */\nfunction emitRequest (request, cb) {\n  var\n    self = this;\n\n  if (self.jwtToken !== undefined || cb) {\n    self.network.once(request.requestId, function (response) {\n      var error = null;\n\n      if (request.action !== 'logout' && response.error && response.error.message === 'Token expired') {\n        self.jwtToken = undefined;\n        self.emitEvent('jwtTokenExpired', request, cb);\n      }\n\n      if (response.error) {\n        error = new Error(response.error.message);\n        Object.assign(error, response.error);\n        error.status = response.status;\n        self.emitEvent('queryError', error, request, cb);\n      }\n\n      if (cb) {\n        cb(error, response);\n      }\n    });\n  }\n\n  this.network.send(request);\n\n  // Track requests made to allow KuzzleRoom.subscribeToSelf to work\n  self.requestHistory[request.requestId] = Date.now();\n}\n\n/**\n * Play all queued requests, in order.\n */\nfunction dequeue () {\n  var\n    self = this,\n    additionalQueue,\n    uniqueQueue = {},\n    dequeuingProcess = function () {\n      if (self.offlineQueue.length > 0) {\n        emitRequest.call(self, self.offlineQueue[0].query, self.offlineQueue[0].cb);\n        self.emitEvent('offlineQueuePop', self.offlineQueue.shift());\n\n        setTimeout(function () {\n          dequeuingProcess();\n        }, Math.max(0, self.replayInterval));\n      } else {\n        self.queuing = false;\n      }\n    };\n\n  if (self.offlineQueueLoader) {\n    if (typeof self.offlineQueueLoader !== 'function') {\n      throw new Error('Invalid value for offlineQueueLoader property. Expected: function. Got: ' + typeof self.offlineQueueLoader);\n    }\n\n    additionalQueue = self.offlineQueueLoader();\n    if (Array.isArray(additionalQueue)) {\n      self.offlineQueue = additionalQueue\n        .concat(self.offlineQueue)\n        .filter(function (request) {\n          // throws if the query object does not contain required attributes\n          if (!request.query || request.query.requestId === undefined || !request.query.action || !request.query.controller) {\n            throw new Error('Invalid offline queue request. One or more missing properties: requestId, action, controller.');\n          }\n\n          return uniqueQueue.hasOwnProperty(request.query.requestId) ? false : (uniqueQueue[request.query.requestId] = true);\n        });\n    } else {\n      throw new Error('Invalid value returned by the offlineQueueLoader function. Expected: array. Got: ' + typeof additionalQueue);\n    }\n  }\n\n  dequeuingProcess();\n}\n\n/**\n * Renew all registered subscriptions. Triggered either by a successful connection/reconnection or by a\n * successful login attempt\n */\nfunction renewAllSubscriptions() {\n  var self = this;\n\n  Object.keys(self.subscriptions).forEach(function (roomId) {\n    Object.keys(self.subscriptions[roomId]).forEach(function (subscriptionId) {\n      var subscription = self.subscriptions[roomId][subscriptionId];\n      subscription.renew(subscription.callback);\n    });\n  });\n}\n\n/**\n * Remove all registered subscriptions. Triggered either by a logout query or by un-setting the token\n */\nfunction removeAllSubscriptions() {\n  var self = this;\n\n  Object.keys(self.subscriptions).forEach(function (roomId) {\n    Object.keys(self.subscriptions[roomId]).forEach(function (subscriptionId) {\n      var subscription = self.subscriptions[roomId][subscriptionId];\n      subscription.unsubscribe();\n    });\n  });\n}\n\n/**\n * Adds a listener to a Kuzzle global event. When an event is fired, listeners are called in the order of their\n * insertion.\n *\n * The ID returned by this function is required to remove this listener at a later time.\n *\n * @param {string} event - name of the global event to subscribe to (see the 'eventListeners' object property)\n * @param {function} listener - callback to invoke each time an event is fired\n * @returns {string} Unique listener ID\n */\nKuzzle.prototype.addListener = function(event, listener) {\n  var\n    knownEvents = Object.keys(this.eventListeners),\n    listenerType = typeof listener,\n    listenerId;\n\n  this.isValid();\n\n  if (knownEvents.indexOf(event) === -1) {\n    throw new Error('[' + event + '] is not a known event. Known events: ' + knownEvents.toString());\n  }\n\n  if (listenerType !== 'function') {\n    throw new Error('Invalid listener type: expected a function, got a ' + listenerType);\n  }\n\n  listenerId = uuid.v4();\n  this.eventListeners[event].listeners.push({id: listenerId, fn: listener});\n  return listenerId;\n};\n\n\n/**\n * Kuzzle monitors active connections, and ongoing/completed/failed requests.\n * This method returns all available statistics from Kuzzle.\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Handles the query response\n */\nKuzzle.prototype.getAllStatistics = function (options, cb) {\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.callbackRequired('Kuzzle.getAllStatistics', cb);\n\n  this.query({controller:'admin', action: 'getAllStats'}, {}, options, function (err, res) {\n    if (err) {\n      return cb(err);\n    }\n\n    cb(null, res.result.hits);\n  });\n};\n\n/**\n * Kuzzle monitors active connections, and ongoing/completed/failed requests.\n * This method allows getting either the last statistics frame, or a set of frames starting from a provided timestamp.\n *\n * @param {number} timestamp -  Epoch time. Starting time from which the frames are to be retrieved\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Handles the query response\n */\nKuzzle.prototype.getStatistics = function (timestamp, options, cb) {\n  var\n    queryCB,\n    body;\n\n  if (!cb) {\n    if (arguments.length === 1) {\n      cb = arguments[0];\n      options = null;\n      timestamp = null;\n    } else {\n      cb = arguments[1];\n      if (typeof arguments[0] === 'object') {\n        options = arguments[0];\n        timestamp = null;\n      } else {\n        timestamp = arguments[0];\n        options = null;\n      }\n    }\n  }\n\n  queryCB = function (err, res) {\n    if (err) {\n      return cb(err);\n    }\n\n    cb(null, timestamp ? res.result.hits : [res.result]);\n  };\n\n  this.callbackRequired('Kuzzle.getStatistics', cb);\n\n  body = timestamp ? {body: {startTime: timestamp}} : {};\n  this.query({controller: 'admin', action: timestamp ? 'getStats' : 'getLastStats'}, body, options, queryCB);\n};\n\n/**\n * Create a new instance of a KuzzleDataCollection object.\n * If no index is specified, takes the default index.\n *\n * @param {string} collection - The name of the data collection you want to manipulate\n * @param {string} [index] - The name of the data index containing the data collection\n * @returns {object} A KuzzleDataCollection instance\n */\nKuzzle.prototype.dataCollectionFactory = function(collection, index) {\n  this.isValid();\n\n  if (!index) {\n    if (!this.defaultIndex) {\n      throw new Error('Unable to create a new data collection object: no index specified');\n    }\n\n    index = this.defaultIndex;\n  }\n\n  if (typeof index !== 'string' || typeof collection !== 'string') {\n    throw new Error('Invalid index or collection argument: string expected');\n  }\n\n  if (!this.collections[index]) {\n    this.collections[index] = {};\n  }\n\n  if (!this.collections[index][collection]) {\n    this.collections[index][collection] = new KuzzleDataCollection(this, collection, index);\n  }\n\n  return this.collections[index][collection];\n};\n\n/**\n * Empties the offline queue without replaying it.\n *\n * @returns {Kuzzle}\n */\nKuzzle.prototype.flushQueue = function () {\n  this.offlineQueue = [];\n  return this;\n};\n\n/**\n * Returns the list of known persisted data collections.\n *\n * @param {string} [index] - Index containing collections to be listed\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Handles the query response\n */\nKuzzle.prototype.listCollections = function () {\n  var\n    collectionType = 'all',\n    index,\n    options,\n    cb,\n    args = Array.prototype.slice.call(arguments),\n    query;\n\n  args.forEach(function(arg) {\n    switch (typeof arg) {\n      case 'string':\n        index = arg;\n        break;\n      case 'object':\n        options = arg;\n        break;\n      case 'function':\n        cb = arg;\n        break;\n    }\n  });\n\n  if (!index) {\n    if (!this.defaultIndex) {\n      throw new Error('Kuzzle.listCollections: index required');\n    }\n\n    index = this.defaultIndex;\n  }\n\n  this.callbackRequired('Kuzzle.listCollections', cb);\n\n  if (options && options.type) {\n    collectionType = options.type;\n  }\n\n  query = {body: {type: collectionType}};\n\n  if (options && options.from) {\n    query.body.from = options.from;\n  }\n\n  if (options && options.size) {\n    query.body.size = options.size;\n  }\n\n  this.query({index: index, controller: 'read', action: 'listCollections'}, query, options, function (err, res) {\n    if (err) {\n      return cb(err);\n    }\n\n    cb(null, res.result.collections);\n  });\n};\n\n/**\n * Returns the list of existing indexes in Kuzzle\n *\n * @param {object} [options] - Optional arguments\n * @param {responseCallback} cb - Handles the query response\n */\nKuzzle.prototype.listIndexes = function (options, cb) {\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.callbackRequired('Kuzzle.listIndexes', cb);\n\n  this.query({controller: 'read', action: 'listIndexes'}, {}, options, function (err, res) {\n    cb(err, err ? undefined : res.result.indexes);\n  });\n};\n\n/**\n * Disconnects from Kuzzle and invalidate this instance.\n */\nKuzzle.prototype.disconnect = function () {\n  var collection;\n\n  this.state = 'disconnected';\n  this.network.close();\n  this.network = null;\n\n  for (collection in this.collections) {\n    if (this.collections.hasOwnProperty(collection)) {\n      delete this.collections[collection];\n    }\n  }\n};\n\n/**\n * Returns the server informations\n *\n * @param {object} [options] - Optional arguments\n * @param {responseCallback} cb - Handles the query response\n */\nKuzzle.prototype.getServerInfo = function (options, cb) {\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.callbackRequired('Kuzzle.getServerInfo', cb);\n\n  this.query({controller: 'read', action: 'serverInfo'}, {}, options, function (err, res) {\n    if (err) {\n      return cb(err);\n    }\n\n    cb(null, res.result.serverInfo);\n  });\n};\n\n/**\n * Forces an index refresh\n *\n * @param {string} index - The index to refresh. Defaults to Kuzzle.defaultIndex\n * @param {object} options - Optional arguments\n * @param {responseCallback} cb - Handles the query response\n * @returns {Kuzzle}\n */\nKuzzle.prototype.refreshIndex = function () {\n  var\n    index,\n    options,\n    cb;\n\n  Array.prototype.slice.call(arguments).forEach(function(arg) {\n    switch (typeof arg) {\n      case 'string':\n        index = arg;\n        break;\n      case 'object':\n        options = arg;\n        break;\n      case 'function':\n        cb = arg;\n        break;\n    }\n  });\n\n  if (!index) {\n    if (!this.defaultIndex) {\n      throw new Error('Kuzzle.refreshIndex: index required');\n    }\n    index = this.defaultIndex;\n  }\n\n  this.query({ index: index, controller: 'admin', action: 'refreshIndex'}, {}, options, cb);\n\n  return this;\n};\n\n/**\n * Returns de current autoRefresh status for the given index\n *\n * @param {string} index - The index to get the status from. Defaults to Kuzzle.defaultIndex\n * @param {object} options - Optinal arguments\n * @param {responseCallback} cb - Handles the query response\n */\nKuzzle.prototype.getAutoRefresh = function () {\n  var\n    index,\n    options,\n    cb;\n\n  Array.prototype.slice.call(arguments).forEach(function (arg) {\n    switch (typeof arg) {\n      case 'string':\n        index = arg;\n        break;\n      case 'object':\n        options = arg;\n        break;\n      case 'function':\n        cb = arg;\n        break;\n    }\n  });\n\n  if (!index) {\n    if (!this.defaultIndex) {\n      throw new Error('Kuzzle.getAutoRefresh: index required');\n    }\n    index = this.defaultIndex;\n  }\n\n  this.callbackRequired('Kuzzle.getAutoRefresh', cb);\n  this.query({ index: index, controller: 'admin', action: 'getAutoRefresh'}, {}, options, cb);\n};\n\n/**\n * (Un)Sets the autoRefresh flag on the given index\n *\n * @param {string} index - the index to modify. Defaults to Kuzzle.defaultIndex\n * @param {boolean} autoRefresh - The autoRefresh value to set\n * @param {object} options - Optional arguments\n * @param {responseCallback} cb - Handles the query result\n * @returns {object} this\n */\nKuzzle.prototype.setAutoRefresh = function () {\n  var\n    index,\n    autoRefresh,\n    options,\n    cb;\n\n  Array.prototype.slice.call(arguments).forEach(function (arg) {\n    switch (typeof arg) {\n      case 'string':\n        index = arg;\n        break;\n      case 'boolean':\n        autoRefresh = arg;\n        break;\n      case 'object':\n        options = arg;\n        break;\n      case 'function':\n        cb = arg;\n        break;\n    }\n  });\n\n  if (!index) {\n    if (!this.defaultIndex) {\n      throw new Error('Kuzzle.setAutoRefresh: index required');\n    }\n    index = this.defaultIndex;\n  }\n\n  if (autoRefresh === undefined) {\n    throw new Error('Kuzzle.setAutoRefresh: autoRefresh value is required');\n  }\n\n  this.query({ index: index, controller: 'admin', action: 'setAutoRefresh'}, { body: { autoRefresh: autoRefresh }}, options, cb);\n\n  return this;\n};\n\n/**\n * Return the current Kuzzle's UTC Epoch time, in milliseconds\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Handles the query response\n */\nKuzzle.prototype.now = function (options, cb) {\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.callbackRequired('Kuzzle.now', cb);\n\n  this.query({controller: 'read', action: 'now'}, {}, options, function (err, res) {\n    cb(err, res && res.result.now);\n  });\n};\n\n/**\n * This is a low-level method, exposed to allow advanced SDK users to bypass high-level methods.\n * Base method used to send read queries to Kuzzle\n *\n * Takes an optional argument object with the following properties:\n *    - metadata (object, default: null):\n *        Additional information passed to notifications to other users\n *\n * @param {object} queryArgs - Query configuration\n * @param {object} query - The query data\n * @param {object} [options] - Optional arguments\n * @param {responseCallback} [cb] - Handles the query response\n */\nKuzzle.prototype.query = function (queryArgs, query, options, cb) {\n  var\n    attr,\n    object = {\n      action: queryArgs.action,\n      controller: queryArgs.controller,\n      metadata: this.metadata\n    },\n    self = this;\n\n  this.isValid();\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  if (options) {\n    if (options.queuable === false && self.state === 'offline') {\n      return self;\n    }\n\n    if (options.refresh) {\n      object.refresh = options.refresh;\n    }\n\n    if (options.metadata) {\n      Object.keys(options.metadata).forEach(function (meta) {\n        object.metadata[meta] = options.metadata[meta];\n      });\n    }\n  }\n\n  if (!query || typeof query !== 'object' || Array.isArray(query)) {\n    throw new Error('Invalid query parameter: ' + query);\n  }\n\n  if (query.metadata) {\n    Object.keys(query.metadata).forEach(function (meta) {\n      object.metadata[meta] = query.metadata[meta];\n    });\n  }\n\n  for (attr in query) {\n    if (attr !== 'metadata' && query.hasOwnProperty(attr)) {\n      object[attr] = query[attr];\n    }\n  }\n\n  object = self.addHeaders(object, this.headers);\n\n  /*\n   * Do not add the token for the checkToken route, to avoid getting a token error when\n   * a developer simply wish to verify his token\n   */\n  if (self.jwtToken !== undefined && !(object.controller === 'auth' && object.action === 'checkToken')) {\n    object.jwt = self.jwtToken;\n  }\n\n  if (queryArgs.collection) {\n    object.collection = queryArgs.collection;\n  }\n\n  if (queryArgs.index) {\n    object.index = queryArgs.index;\n  }\n\n  if (!object.requestId) {\n    object.requestId = uuid.v4();\n  }\n\n  if (self.state === 'connected' || (options && options.queuable === false)) {\n    if (self.state === 'connected') {\n      emitRequest.call(this, object, cb);\n    } else if (cb) {\n      cb(new Error('Unable to execute request: not connected to a Kuzzle server.\\nDiscarded request: ' + JSON.stringify(object)));\n    }\n  } else if (self.queuing || ['initializing', 'connecting'].indexOf(self.state) !== -1) {\n    cleanQueue.call(this, object, cb);\n\n    if (!self.queueFilter || self.queueFilter(object)) {\n      self.offlineQueue.push({ts: Date.now(), query: object, cb: cb});\n      self.emitEvent('offlineQueuePush', {query: object, cb: cb});\n    }\n  }\n\n  return self;\n};\n\n/**\n * Removes all listeners, either from a specific event or from all events\n *\n * @param {string} event - One of the event described in the Event Handling section of this documentation\n * @returns {Kuzzle} this object\n */\nKuzzle.prototype.removeAllListeners = function (event) {\n  var\n    knownEvents = Object.keys(this.eventListeners),\n    self = this;\n\n  if (event) {\n    if (knownEvents.indexOf(event) === -1) {\n      throw new Error('[' + event + '] is not a known event. Known events: ' + knownEvents.toString());\n    }\n\n    this.eventListeners[event].listeners = [];\n  } else {\n    knownEvents.forEach(function (eventName) {\n      self.eventListeners[eventName].listeners = [];\n    });\n  }\n\n  return this;\n};\n\n/**\n * Removes a listener from an event.\n *\n * @param {string} event - One of the event described in the Event Handling section of this documentation\n * @param {string} listenerId - The ID returned by addListener\n * @returns {Kuzzle} this object\n */\nKuzzle.prototype.removeListener = function (event, listenerId) {\n  var\n    knownEvents = Object.keys(this.eventListeners),\n    self = this;\n\n  if (knownEvents.indexOf(event) === -1) {\n    throw new Error('[' + event + '] is not a known event. Known events: ' + knownEvents.toString());\n  }\n\n  this.eventListeners[event].listeners.forEach(function (listener, index) {\n    if (listener.id === listenerId) {\n      self.eventListeners[event].listeners.splice(index, 1);\n    }\n  });\n\n  return this;\n};\n\n/**\n * Replays the requests queued during offline mode.\n * Works only if the SDK is not in a disconnected state, and if the autoReplay option is set to false.\n */\nKuzzle.prototype.replayQueue = function () {\n  if (this.state !== 'offline' && !this.autoReplay) {\n    cleanQueue.call(this);\n    dequeue.call(this);\n  }\n\n  return this;\n};\n\n/**\n * Sets the default Kuzzle index\n *\n * @param index\n * @returns this\n */\nKuzzle.prototype.setDefaultIndex = function (index) {\n  if (typeof index !== 'string') {\n    throw new Error('Invalid default index: [' + index + '] (an index name is expected)');\n  }\n\n  if (index.length === 0) {\n    throw new Error('Cannot set an empty index as the default index');\n  }\n\n  this.defaultIndex = index;\n\n  return this;\n};\n\n/**\n * Helper function allowing to set headers while chaining calls.\n *\n * If the replace argument is set to true, replace the current headers with the provided content.\n * Otherwise, it appends the content to the current headers, only replacing already existing values\n *\n * @param content - new headers content\n * @param [replace] - default: false = append the content. If true: replace the current headers with tj\n */\nKuzzle.prototype.setHeaders = function (content, replace) {\n  var self = this;\n\n  if (typeof content !== 'object' || Array.isArray(content)) {\n    throw new Error('Expected a content object, received a ' + typeof content);\n  }\n\n  if (replace) {\n    self.headers = content;\n  } else {\n    Object.keys(content).forEach(function (key) {\n      self.headers[key] = content[key];\n    });\n  }\n\n  return self;\n};\n\n/**\n * Starts the requests queuing. Works only during offline mode, and if the autoQueue option is set to false.\n */\nKuzzle.prototype.startQueuing = function () {\n  if (this.state === 'offline' && !this.autoQueue) {\n    this.queuing = true;\n  }\n  return this;\n};\n\n/**\n * Stops the requests queuing. Works only during offline mode, and if the autoQueue option is set to false.\n */\nKuzzle.prototype.stopQueuing = function () {\n  if (this.state === 'offline' && !this.autoQueue) {\n    this.queuing = false;\n  }\n\n  return this;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/kuzzle.js\n ** module id = 0\n ** module chunks = 0\n **/","function KuzzleSecurityDocument(kuzzleSecurity, id, content) {\n\n  if (!id) {\n    throw new Error('A security document must have an id');\n  }\n\n  // Define properties\n  Object.defineProperties(this, {\n    // private properties\n    kuzzle: {\n      value: kuzzleSecurity.kuzzle\n    },\n    kuzzleSecurity: {\n      value: kuzzleSecurity\n    },\n    // read-only properties\n    // writable properties\n    id: {\n      value: id,\n      enumerable: true\n    },\n    content: {\n      value: {},\n      writable: true,\n      enumerable: true\n    }\n  });\n\n  if (content) {\n    this.setContent(content, true);\n  }\n\n  // promisifying\n  if (kuzzleSecurity.kuzzle.bluebird) {\n    return kuzzleSecurity.kuzzle.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var whitelist = ['delete', 'update'];\n\n        return passes && whitelist.indexOf(name) !== -1;\n      }\n    });\n  }\n}\n\n/**\n * Replaces the current content with new data.\n * Changes made by this function won’t be applied until the save method is called.\n *\n * @param {Object} data - New securityDocument content\n * @return {KuzzleSecurityDocument} this\n */\nKuzzleSecurityDocument.prototype.setContent = function (data) {\n  this.content = data;\n  return this;\n};\n\n/**\n * Serialize this object into a pojo\n *\n * @return {object} pojo representing this securityDocument\n */\nKuzzleSecurityDocument.prototype.serialize = function () {\n  var\n    data = {};\n\n  if (this.id) {\n    data._id = this.id;\n  }\n\n  data.body = this.content;\n\n  return data;\n};\n\n/**\n * Delete the current KuzzleSecurityDocument into Kuzzle.\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n */\nKuzzleSecurityDocument.prototype.delete = function (options, cb) {\n  var\n    self = this;\n\n  if (options && cb === undefined && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.query(this.kuzzleSecurity.buildQueryArgs(this.deleteActionName), {_id: this.id}, options, function (error, res) {\n    if (error) {\n      return cb ? cb(error) : false;\n    }\n\n    if (cb) {\n      cb(null, res.result._id);\n    }\n  });\n};\n\n/**\n * Update the current KuzzleSecurityDocument into Kuzzle.\n *\n * @param {object} content - Content to add to KuzzleSecurityDocument\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {KuzzleSecurityDocument} this\n */\nKuzzleSecurityDocument.prototype.update = function (content, options, cb) {\n  var\n    data = {},\n    self = this;\n\n  if (typeof content !== 'object') {\n    throw new Error('Parameter \"content\" must be a object');\n  }\n\n  if (options && cb === undefined && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data._id = self.id;\n  data.body = content;\n\n  self.kuzzle.query(this.kuzzleSecurity.buildQueryArgs(this.updateActionName), data, options, function (error, response) {\n    if (error) {\n      return cb ? cb(error) : false;\n    }\n\n    self.setContent(response.result._source);\n\n    if (cb) {\n      cb(null, self);\n    }\n  });\n\n  return this;\n};\n\nmodule.exports = KuzzleSecurityDocument;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/security/kuzzleSecurityDocument.js\n ** module id = 1\n ** module chunks = 0\n **/","function WSNode(host, port, ssl) {\n  var self = this;\n  this.WebSocket = typeof WebSocket !== 'undefined' ? WebSocket : require('ws');\n  this.host = host;\n  this.port = port;\n  this.ssl = ssl;\n  this.client = null;\n  this.wasConnected = false;\n  this.retrying = false;\n  this.lasturl = null;\n\n  /*\n   Listeners are stored using the following format:\n   roomId: {\n   fn: callback_function,\n   once: boolean\n   }\n   */\n  this.listeners = {\n    error: [],\n    connect: [],\n    disconnect: [],\n    reconnect: []\n  };\n\n  /**\n   * Creates a new socket from the provided arguments\n   *\n   * @constructor\n   * @param {boolean} autoReconnect\n   * @param {int} reconnectionDelay\n   * @returns {Object} Socket\n   */\n  this.connect = function (autoReconnect, reconnectionDelay) {\n    var\n      url = (this.ssl ? 'wss://' : 'ws://') + this.host + ':' + this.port,\n      options = typeof window !== 'undefined' ? undefined : {perMessageDeflate: false};\n\n    if (url !== this.lasturl) {\n      self.wasConnected = false;\n      this.lasturl = url;\n    }\n\n    this.client = new this.WebSocket(url, options);\n\n    this.client.onopen = function () {\n      if (self.wasConnected) {\n        poke(self.listeners, 'reconnect');\n      }\n      else {\n        poke(self.listeners, 'connect');\n      }\n      self.wasConnected = true;\n    };\n\n    this.client.onclose = function (code, message) {\n      if (code === 1000) {\n        poke(self.listeners, 'disconnect');\n      }\n      else {\n        onClientError.call(self, autoReconnect, reconnectionDelay, message);\n      }\n    };\n\n    this.client.onerror = function (error) {\n      onClientError.call(self, autoReconnect, reconnectionDelay, error);\n    };\n\n    this.client.onmessage = function (payload) {\n      var data = JSON.parse(payload.data || payload);\n\n      if (data.room && self.listeners[data.room]) {\n        poke(self.listeners, data.room, data);\n      }\n    };\n  };\n\n  /**\n   * Fires the provided callback whence a connection is established\n   *\n   * @param {function} callback\n   */\n  this.onConnect = function (callback) {\n    this.listeners.connect.push({\n      fn: callback,\n      keep: true\n    });\n  };\n\n  /**\n   * Fires the provided callback whenever a connection error is received\n   * @param {function} callback\n   */\n  this.onConnectError = function (callback) {\n    this.listeners.error.push({\n      fn: callback,\n      keep: true\n    });\n  };\n\n  /**\n   * Fires the provided callback whenever a disconnection occurred\n   * @param {function} callback\n   */\n  this.onDisconnect = function (callback) {\n    this.listeners.disconnect.push({\n      fn: callback,\n      keep: true\n    });\n  };\n\n  /**\n   * Fires the provided callback whenever a connection has been reestablished\n   * @param {function} callback\n   */\n  this.onReconnect = function (callback) {\n    this.listeners.reconnect.push({\n      fn: callback,\n      keep: true\n    });\n  };\n\n  /**\n   * Registers a callback on a room. Once 1 message is received, fires the\n   * callback and unregister it afterward.\n   *\n   * @param {string} roomId\n   * @param {function} callback\n   */\n  this.once = function (roomId, callback) {\n    if (!this.listeners[roomId]) {\n      this.listeners[roomId] = [];\n    }\n\n    this.listeners[roomId].push({\n      fn: callback,\n      keep: false\n    });\n  };\n\n  /**\n   * Registers a callback on a room.\n   *\n   * @param {string} roomId\n   * @param {function} callback\n   */\n  this.on = function (roomId, callback) {\n    if (!this.listeners[roomId]) {\n      this.listeners[roomId] = [];\n    }\n\n    this.listeners[roomId].push({\n      fn: callback,\n      keep: true\n    });\n  };\n\n  /**\n   * Unregisters a callback from a room.\n   *\n   * @param {string} roomId\n   * @param {function} callback\n   */\n  this.off = function (roomId, callback) {\n    var index;\n\n    if (this.listeners[roomId]) {\n      index = this.listeners[roomId].findIndex(function (listener) {\n        return listener.fn === callback;\n      });\n\n      if (index !== -1) {\n        if (this.listeners[roomId].length === 1 && ['error', 'connect', 'disconnect', 'reconnect'].indexOf(roomId) === -1) {\n          delete this.listeners[roomId];\n        }\n        else {\n          this.listeners[roomId].splice(index, 1);\n        }\n      }\n    }\n  };\n\n\n  /**\n   * Sends a payload to the connected server\n   *\n   * @param {Object} payload\n   */\n  this.send = function (payload) {\n    if (this.client && this.client.readyState === this.client.OPEN) {\n      this.client.send(JSON.stringify(payload));\n    }\n  };\n\n  /**\n   * Closes the connection\n   */\n  this.close = function () {\n    this.listeners = {\n      error: [],\n      connect: [],\n      disconnect: [],\n      reconnect: []\n    };\n\n    this.wasConnected = false;\n    this.client.close();\n    this.client = null;\n  };\n}\n\n/**\n * Executes all registered listeners in the provided\n * \"listeners\" structure.\n *\n * Listeners are of the following format:\n * [\n *    { fn: callback, once: boolean },\n *    ...\n * ]\n *\n * @private\n * @param {Object} listeners\n * @param {string} roomId\n * @param {Object} [payload]\n */\nfunction poke (listeners, roomId, payload) {\n  var\n    i,\n    length = listeners[roomId].length;\n\n  for (i = 0; i < length; ++i) {\n    listeners[roomId][i].fn(payload);\n\n    if (!listeners[roomId][i].keep) {\n      if (listeners[roomId].length > 1) {\n        listeners[roomId].splice(i, 1);\n        --i;\n        --length;\n      }\n      else {\n        delete listeners[roomId];\n      }\n    }\n  }\n}\n\n/**\n * Called when the connection closes with an error state\n *\n * @param {boolean} autoReconnect\n * @param {number} reconnectionDelay\n * @param {string|Object} message\n */\nfunction onClientError(autoReconnect, reconnectionDelay, message) {\n  var self = this;\n\n  if (autoReconnect && !self.retrying) {\n    self.retrying = true;\n    setTimeout(function () {\n      self.retrying = false;\n      self.connect(autoReconnect, reconnectionDelay);\n    }, reconnectionDelay);\n  }\n\n  poke(self.listeners, 'error', message);\n}\n\nmodule.exports = WSNode;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/networkWrapper/wrappers/websocket.js\n ** module id = 2\n ** module chunks = 0\n **/","var\n  KuzzleSecurityDocument = require('./kuzzleSecurityDocument');\n\n/**\n * @param {KuzzleSecurity} kuzzleSecurity\n * @param {string} id\n * @param {Object} content\n * @constructor\n */\nfunction KuzzleUser(kuzzleSecurity, id, content) {\n\n  KuzzleSecurityDocument.call(this, kuzzleSecurity, id, content);\n\n  // Define properties\n  Object.defineProperties(this, {\n    // private properties\n    deleteActionName: {\n      value: 'deleteUser'\n    },\n    updateActionName: {\n      value: 'updateUser'\n    }\n  });\n\n  // promisifying\n  if (kuzzleSecurity.kuzzle.bluebird) {\n    return kuzzleSecurity.kuzzle.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var whitelist = ['save', 'saveRestricted'];\n\n        return passes && whitelist.indexOf(name) !== -1;\n      }\n    });\n  }\n}\n\nKuzzleUser.prototype = Object.create(KuzzleSecurityDocument.prototype, {\n  constructor: {\n    value: KuzzleUser\n  }\n});\n\n/**\n * Set profiles in content\n * @param {array} profileIds - an array of profiles ids string\n *\n * @returns {KuzzleUser} this\n */\nKuzzleUser.prototype.setProfiles = function (profileIds) {\n  if (!Array.isArray(profileIds) || typeof profileIds[0] !== 'string') {\n    throw new Error('Parameter \"profileIds\" must be an array of strings');\n  }\n\n  this.content.profileIds = profileIds;\n\n  return this;\n};\n\n/**\n * Add a profile\n * @param {string} profileId - a profile ids string\n *\n * @returns {KuzzleUser} this\n */\nKuzzleUser.prototype.addProfile = function (profileId) {\n  if (typeof profileId !== 'string') {\n    throw new Error('Parameter \"profileId\" must be a string');\n  }\n\n  if (!this.content.profileIds) {\n    this.content.profileIds = [];\n  }\n\n  if (this.content.profileIds.indexOf(profileId) === -1) {\n    this.content.profileIds.push(profileId);\n  }\n\n  return this;\n};\n\n/**\n * Saves this user into Kuzzle.\n *\n * If this is a new user, this function will create it in Kuzzle.\n * Otherwise, this method will replace the latest version of this user in Kuzzle by the current content\n * of this object.\n *\n * @param {object|responseCallback} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {KuzzleUser} this\n */\nKuzzleUser.prototype.save = function (options, cb) {\n  var\n    data = this.serialize(),\n    self = this;\n\n  if (options && cb === undefined && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.query(this.kuzzleSecurity.buildQueryArgs('createOrReplaceUser'), data, options, cb && function (error) {\n    cb(error, error ? undefined : self);\n  });\n\n  return self;\n};\n\n/**\n * Saves this user as restricted into Kuzzle.\n *\n * This function will create a new user. It is not usable to update an existing user.\n * The \"profileIds\" property must not be provided, or the request will be rejected by Kuzzle.\n * This function allows anonymous users to create a \"restricted\" user with predefined rights.\n *\n * @param {object|responseCallback} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {KuzzleUser} this\n */\nKuzzleUser.prototype.saveRestricted = function (options, cb) {\n  var\n    data = this.serialize(),\n    self = this;\n\n  if (options && cb === undefined && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.query(this.kuzzleSecurity.buildQueryArgs('createRestrictedUser'), data, options, cb && function (error) {\n    cb(error, error ? undefined : self);\n  });\n\n  return self;\n};\n\n/**\n * Serialize this object into a JSON object\n *\n * @return {object} JSON object representing this User\n */\nKuzzleUser.prototype.serialize = function () {\n  return {_id: this.id, body: this.content};\n};\n\n/**\n * Return the associated profiles IDs\n *\n * @return {array} the associated profiles IDs\n */\nKuzzleUser.prototype.getProfiles = function () {\n  return this.content.profileIds;\n};\n\nmodule.exports = KuzzleUser;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/security/kuzzleUser.js\n ** module id = 3\n ** module chunks = 0\n **/","// Unique ID creation requires a high quality random # generator.  We feature\n// detect to determine the best RNG source, normalizing to a function that\n// returns 128-bits of randomness, since that's what's usually required\nvar _rng = require('./lib/rng');\n\n// Maps for number <-> hex string conversion\nvar _byteToHex = [];\nvar _hexToByte = {};\nfor (var i = 0; i < 256; ++i) {\n  _byteToHex[i] = (i + 0x100).toString(16).substr(1);\n  _hexToByte[_byteToHex[i]] = i;\n}\n\nfunction buff_to_string(buf, offset) {\n  var i = offset || 0;\n  var bth = _byteToHex;\n  return  bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]];\n}\n\n// **`v1()` - Generate time-based UUID**\n//\n// Inspired by https://github.com/LiosK/UUID.js\n// and http://docs.python.org/library/uuid.html\n\n// random #'s we need to init node and clockseq\nvar _seedBytes = _rng();\n\n// Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)\nvar _nodeId = [\n  _seedBytes[0] | 0x01,\n  _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]\n];\n\n// Per 4.2.2, randomize (14 bit) clockseq\nvar _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;\n\n// Previous uuid creation time\nvar _lastMSecs = 0, _lastNSecs = 0;\n\n// See https://github.com/broofa/node-uuid for API details\nfunction v1(options, buf, offset) {\n  var i = buf && offset || 0;\n  var b = buf || [];\n\n  options = options || {};\n\n  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;\n\n  // UUID timestamps are 100 nano-second units since the Gregorian epoch,\n  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so\n  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'\n  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.\n  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();\n\n  // Per 4.2.1.2, use count of uuid's generated during the current clock\n  // cycle to simulate higher resolution clock\n  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;\n\n  // Time since last uuid creation (in msecs)\n  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;\n\n  // Per 4.2.1.2, Bump clockseq on clock regression\n  if (dt < 0 && options.clockseq === undefined) {\n    clockseq = clockseq + 1 & 0x3fff;\n  }\n\n  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new\n  // time interval\n  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {\n    nsecs = 0;\n  }\n\n  // Per 4.2.1.2 Throw error if too many uuids are requested\n  if (nsecs >= 10000) {\n    throw new Error('uuid.v1(): Can\\'t create more than 10M uuids/sec');\n  }\n\n  _lastMSecs = msecs;\n  _lastNSecs = nsecs;\n  _clockseq = clockseq;\n\n  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch\n  msecs += 12219292800000;\n\n  // `time_low`\n  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;\n  b[i++] = tl >>> 24 & 0xff;\n  b[i++] = tl >>> 16 & 0xff;\n  b[i++] = tl >>> 8 & 0xff;\n  b[i++] = tl & 0xff;\n\n  // `time_mid`\n  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;\n  b[i++] = tmh >>> 8 & 0xff;\n  b[i++] = tmh & 0xff;\n\n  // `time_high_and_version`\n  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version\n  b[i++] = tmh >>> 16 & 0xff;\n\n  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)\n  b[i++] = clockseq >>> 8 | 0x80;\n\n  // `clock_seq_low`\n  b[i++] = clockseq & 0xff;\n\n  // `node`\n  var node = options.node || _nodeId;\n  for (var n = 0; n < 6; ++n) {\n    b[i + n] = node[n];\n  }\n\n  return buf ? buf : buff_to_string(b);\n}\n\n// **`v4()` - Generate random UUID**\n\n// See https://github.com/broofa/node-uuid for API details\nfunction v4(options, buf, offset) {\n  // Deprecated - 'format' argument, as supported in v1.2\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options == 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || _rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || buff_to_string(rnds);\n}\n\n// Export public API\nvar uuid = v4;\nuuid.v1 = v1;\nuuid.v4 = v4;\n\nmodule.exports = uuid;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/uuid/uuid.js\n ** module id = 4\n ** module chunks = 0\n **/","var\n  KuzzleDocument = require('./kuzzleDocument'),\n  KuzzleDataMapping = require('./kuzzleDataMapping'),\n  KuzzleRoom = require('./kuzzleRoom'),\n  KuzzleSubscribeResult = require('./kuzzleSubscribeResult');\n\n/**\n * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n *\n * @callback responseCallback\n * @param {Object} err - Error object, NULL if the query is successful\n * @param {Object} [data] - The content of the query response\n */\n\n/**\n * A data collection is a set of data managed by Kuzzle. It acts like a data table for persistent documents,\n * or like a room for pub/sub messages.\n * @param {object} kuzzle - Kuzzle instance to inherit from\n * @param {string} collection - name of the data collection to handle\n * @param {string} index - Index containing the data collection\n * @constructor\n */\nfunction KuzzleDataCollection(kuzzle, collection, index) {\n  if (!index || !collection) {\n    throw new Error('The KuzzleDataCollection object constructor needs an index and a collection arguments');\n  }\n\n  Object.defineProperties(this, {\n    // read-only properties\n    collection: {\n      value: collection,\n      enumerable: true\n    },\n    index: {\n      value: index,\n      enumerable: true\n    },\n    kuzzle: {\n      value: kuzzle,\n      enumerable: true\n    },\n    // writable properties\n    headers: {\n      value: JSON.parse(JSON.stringify(kuzzle.headers)),\n      enumerable: true,\n      writable: true\n    }\n  });\n\n  Object.defineProperty(this, 'buildQueryArgs', {\n    value: function (controller, action) {\n      return {\n        controller: controller,\n        action: action,\n        collection: this.collection,\n        index: this.index\n      };\n    }\n  });\n\n  if (this.kuzzle.bluebird) {\n    return this.kuzzle.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var blacklist = ['publishMessage', 'setHeaders', 'subscribe'];\n\n        return passes && blacklist.indexOf(name) === -1;\n      }\n    });\n  }\n\n  return this;\n}\n\n/**\n * Executes an advanced search on the data collection.\n *\n * /!\\ There is a small delay between documents creation and their existence in our advanced search layer,\n * usually a couple of seconds.\n * That means that a document that was just been created won’t be returned by this function.\n *\n * @param {object} filters - Filters in Elasticsearch Query DSL format\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Handles the query response\n */\nKuzzleDataCollection.prototype.advancedSearch = function (filters, options, cb) {\n  var\n    query,\n    self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.callbackRequired('KuzzleDataCollection.advancedSearch', cb);\n\n  query = self.kuzzle.addHeaders({body: filters}, this.headers);\n\n  self.kuzzle.query(this.buildQueryArgs('read', 'search'), query, options, function (error, result) {\n    var\n      response,\n      documents = [];\n\n    if (error) {\n      return cb(error);\n    }\n\n    result.result.hits.forEach(function (doc) {\n      var newDocument = new KuzzleDocument(self, doc._id, doc._source);\n\n      newDocument.version = doc._version;\n\n      documents.push(newDocument);\n    });\n\n    response = {\n      total: result.result.total,\n      documents: documents\n    };\n\n    if (result.result.aggregations) {\n      response.aggregations = result.result.aggregations;\n    }\n\n    cb(null, response);\n  });\n};\n\n/**\n * Returns the number of documents matching the provided set of filters.\n *\n * There is a small delay between documents creation and their existence in our advanced search layer,\n * usually a couple of seconds.\n * That means that a document that was just been created won’t be returned by this function\n *\n * @param {object} filters - Filters in Elasticsearch Query DSL format\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Handles the query response\n */\nKuzzleDataCollection.prototype.count = function (filters, options, cb) {\n  var\n    query;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.callbackRequired('KuzzleDataCollection.count', cb);\n\n  query = this.kuzzle.addHeaders({body: filters}, this.headers);\n\n  this.kuzzle.query(this.buildQueryArgs('read', 'count'), query, options, function (error, result) {\n    cb(error, result && result.result.count);\n  });\n};\n\n/**\n * Create a new empty data collection, with no associated mapping.\n * Kuzzle automatically creates data collections when storing documents, but there are cases where we\n * want to create and prepare data collections before storing documents in it.\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - returns Kuzzle's response\n * @returns {*} this\n */\nKuzzleDataCollection.prototype.create = function (options, cb) {\n  var data = {};\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data = this.kuzzle.addHeaders(data, this.headers);\n  this.kuzzle.query(this.buildQueryArgs('write', 'createCollection'), data, options, cb);\n\n  return this;\n};\n\n/**\n * Create a new document in Kuzzle.\n *\n * Takes an optional argument object with the following properties:\n *    - metadata (object, default: null):\n *        Additional information passed to notifications to other users\n *    - updateIfExist (boolean, default: false):\n *        If the same document already exists: throw an error if sets to false.\n *        Update the existing document otherwise\n *\n * @param {string} [id] - (optional) document identifier\n * @param {object} document - either an instance of a KuzzleDocument object, or a document\n * @param {object} [options] - optional arguments\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {Object} this\n */\nKuzzleDataCollection.prototype.createDocument = function (id, document, options, cb) {\n  var\n    self = this,\n    data = {},\n    action = 'create';\n\n  if (id && typeof id !== 'string') {\n    cb = options;\n    options = document;\n    document = id;\n    id = null;\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  if (document instanceof KuzzleDocument) {\n    data = document.serialize();\n  } else {\n    data.body = document;\n  }\n\n  if (options) {\n    action = options.updateIfExist ? 'createOrReplace' : 'create';\n  }\n\n  if (id) {\n    data._id = id;\n  }\n\n  data = self.kuzzle.addHeaders(data, self.headers);\n\n  self.kuzzle.query(this.buildQueryArgs('write', action), data, options, cb && function (err, res) {\n    var doc;\n\n    if (err) {\n      return cb(err);\n    }\n\n    doc = new KuzzleDocument(self, res.result._id, res.result._source);\n    doc.version = res.result._version;\n    cb(null, doc);\n  });\n\n  return this;\n};\n\n/**\n * Delete persistent documents.\n *\n * There is a small delay between documents creation and their existence in our advanced search layer,\n * usually a couple of seconds.\n * That means that a document that was just been created won’t be returned by this function\n *\n * Takes an optional argument object with the following properties:\n *    - metadata (object, default: null):\n *        Additional information passed to notifications to other users\n *\n * @param {string|object} arg - Either a document ID (will delete only this particular document), or a set of filters\n * @param {object} [options] - optional arguments\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {KuzzleDataCollection} this\n */\nKuzzleDataCollection.prototype.deleteDocument = function (arg, options, cb) {\n  var\n    action,\n    data = {};\n\n  if (typeof arg === 'string') {\n    data._id = arg;\n    action = 'delete';\n  } else {\n    data.body = arg;\n    action = 'deleteByQuery';\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data = this.kuzzle.addHeaders(data, this.headers);\n\n  this.kuzzle.query(this.buildQueryArgs('write', action), data, options, cb && function (err, res) {\n    if (err) {\n      cb(err);\n    }\n    else {\n      cb(null, (action === 'delete' ? [res.result._id] : res.result.ids));\n    }\n  });\n\n  return this;\n};\n\n/**\n * Retrieve a single stored document using its unique document ID.\n *\n * @param {string} documentId - Unique document identifier\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Handles the query response\n */\nKuzzleDataCollection.prototype.fetchDocument = function (documentId, options, cb) {\n  var\n    data = {_id: documentId},\n    self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.callbackRequired('KuzzleDataCollection.fetch', cb);\n  data = self.kuzzle.addHeaders(data, this.headers);\n\n  self.kuzzle.query(this.buildQueryArgs('read', 'get'), data, options, function (err, res) {\n    var document;\n\n    if (err) {\n      return cb(err);\n    }\n\n    document = new KuzzleDocument(self, res.result._id, res.result._source);\n    document.version = res.result._version;\n    cb(null, document);\n  });\n};\n\n/**\n * Retrieves all documents stored in this data collection\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Handles the query response\n */\nKuzzleDataCollection.prototype.fetchAllDocuments = function (options, cb) {\n  var filters = {};\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  // copying pagination options to the search filter\n  if (options) {\n    if (options.from) {\n      filters.from = options.from;\n    }\n\n    if (options.size) {\n      filters.size = options.size;\n    }\n  }\n\n  this.kuzzle.callbackRequired('KuzzleDataCollection.fetchAll', cb);\n\n  this.advancedSearch(filters, options, cb);\n};\n\n\n/**\n * Instantiates a KuzzleDataMapping object containing the current mapping of this collection.\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} cb - Returns an instantiated KuzzleDataMapping object\n */\nKuzzleDataCollection.prototype.getMapping = function (options, cb) {\n  var kuzzleMapping;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.callbackRequired('KuzzleDataCollection.getMapping', cb);\n\n  kuzzleMapping = new KuzzleDataMapping(this);\n  kuzzleMapping.refresh(options, cb);\n};\n\n/**\n * Publish a realtime message\n *\n * Takes an optional argument object with the following properties:\n *    - metadata (object, default: null):\n *        Additional information passed to notifications to other users\n *\n * @param {object} document - either a KuzzleDocument instance or a JSON object\n * @param {object} [options] - optional arguments\n * @param {responseCallback} [cb] - Returns a raw Kuzzle response\n * @returns {*} this\n */\nKuzzleDataCollection.prototype.publishMessage = function (document, options, cb) {\n  var data = {};\n\n  if (document instanceof KuzzleDocument) {\n    data = document.serialize();\n  } else {\n    data.body = document;\n  }\n\n  data = this.kuzzle.addHeaders(data, this.headers);\n  this.kuzzle.query(this.buildQueryArgs('write', 'publish'), data, options, cb);\n\n  return this;\n};\n\n/**\n * Replace an existing document with a new one.\n *\n * Takes an optional argument object with the following properties:\n *    - metadata (object, default: null):\n *        Additional information passed to notifications to other users\n *\n * @param {string} documentId - Unique document identifier of the document to replace\n * @param {object} content - JSON object representing the new document version\n * @param {object} [options] - additional arguments\n * @param {responseCallback} [cb] - Returns an instantiated KuzzleDocument object\n * @return {object} this\n */\nKuzzleDataCollection.prototype.replaceDocument = function (documentId, content, options, cb) {\n  var\n    self = this,\n    data = {\n      _id: documentId,\n      body: content\n    };\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data = self.kuzzle.addHeaders(data, this.headers);\n\n  self.kuzzle.query(this.buildQueryArgs('write', 'createOrReplace'), data, options, cb && function (err, res) {\n    var document;\n\n    if (err) {\n      return cb(err);\n    }\n\n    document = new KuzzleDocument(self, res.result._id, res.result._source);\n    document.version = res.result._version;\n    cb(null, document);\n  });\n\n  return this;\n};\n\n/**\n * Subscribes to this data collection with a set of filters.\n * To subscribe to the entire data collection, simply provide an empty filter.\n *\n * @param {object} filters - Filters in Kuzzle DSL format\n * @param {object} [options] - subscriptions options\n * @param {responseCallback} cb - called for each new notification\n * @returns {*} KuzzleSubscribeResult object\n */\nKuzzleDataCollection.prototype.subscribe = function (filters, options, cb) {\n  var\n    room,\n    subscribeResult;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.callbackRequired('KuzzleDataCollection.subscribe', cb);\n\n  subscribeResult = new KuzzleSubscribeResult();\n  room = new KuzzleRoom(this, options);\n\n  room.renew(filters, cb, subscribeResult.done.bind(subscribeResult));\n\n  return subscribeResult;\n};\n\n/**\n * Truncate the data collection, removing all stored documents but keeping all associated mappings.\n * This method is a lot faster than removing all documents using a query.\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - returns Kuzzle's response\n * @returns {*} this\n */\nKuzzleDataCollection.prototype.truncate = function (options, cb) {\n  var data = {};\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data = this.kuzzle.addHeaders(data, this.headers);\n  this.kuzzle.query(this.buildQueryArgs('admin', 'truncateCollection'), data, options, cb);\n\n  return this;\n};\n\n\n/**\n * Update parts of a document\n *\n * Takes an optional argument object with the following properties:\n *    - metadata (object, default: null):\n *        Additional information passed to notifications to other users\n *\n * @param {string} documentId - Unique document identifier of the document to update\n * @param {object} content - JSON object containing changes to perform on the document\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Returns an instantiated KuzzleDocument object\n * @return {object} this\n */\nKuzzleDataCollection.prototype.updateDocument = function (documentId, content, options, cb) {\n  var\n    data = {\n      _id: documentId,\n      body: content\n    },\n    self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data = self.kuzzle.addHeaders(data, this.headers);\n\n  self.kuzzle.query(this.buildQueryArgs('write', 'update'), data, options, cb && function (err, res) {\n    if (err) {\n      return cb(err);\n    }\n\n    (new KuzzleDocument(self, res.result._id)).refresh(cb);\n  });\n\n  return self;\n};\n\n\n/**\n * Instantiate a new KuzzleDocument object. Workaround to the module.exports limitation, preventing multiple\n * constructors to be exposed without having to use a factory or a composed object.\n *\n * @param {string} id - document id\n * @param {object} content - document content\n * @constructor\n */\nKuzzleDataCollection.prototype.documentFactory = function (id, content) {\n  return new KuzzleDocument(this, id, content);\n};\n\n/**\n * Instantiate a new KuzzleRoom object. Workaround to the module.exports limitation, preventing multiple\n * constructors to be exposed without having to use a factory or a composed object.\n *\n * @param {object} [options] - subscription configuration\n * @constructor\n */\nKuzzleDataCollection.prototype.roomFactory = function (options) {\n  return new KuzzleRoom(this, options);\n};\n\n/**\n * Instantiate a new KuzzleDataMapping object. Workaround to the module.exports limitation, preventing multiple\n * constructors to be exposed without having to use a factory or a composed object.\n *\n * @param {object} [mapping] - mapping to instantiate the KuzzleDataMapping object with\n * @constructor\n */\nKuzzleDataCollection.prototype.dataMappingFactory = function (mapping) {\n  return new KuzzleDataMapping(this, mapping);\n};\n\n/**\n * Helper function allowing to set headers while chaining calls.\n *\n * If the replace argument is set to true, replace the current headers with the provided content.\n * Otherwise, it appends the content to the current headers, only replacing already existing values\n *\n * @param content - new headers content\n * @param [replace] - default: false = append the content. If true: replace the current headers with tj\n */\nKuzzleDataCollection.prototype.setHeaders = function (content, replace) {\n  this.kuzzle.setHeaders.call(this, content, replace);\n  return this;\n};\n\nmodule.exports = KuzzleDataCollection;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/kuzzleDataCollection.js\n ** module id = 5\n ** module chunks = 0\n **/","/**\n * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n *\n * @callback responseCallback\n * @param {Object} err - Error object, NULL if the query is successful\n * @param {Object} [data] - The content of the query response\n */\n\n\n/**\n *  When creating a new data collection in the persistent data storage layer, Kuzzle uses a default mapping.\n *  It means that, by default, you won’t be able to exploit the full capabilities of our persistent data storage layer\n *  (currently handled by ElasticSearch), and your searches may suffer from below-average performances, depending on\n *  the amount of data you stored in a collection and the complexity of your database.\n *\n *  The KuzzleDataMapping object allow to get the current mapping of a data collection and to modify it if needed.\n *\n * @param {object} kuzzleDataCollection - Instance of the inherited KuzzleDataCollection object\n * @param {object} mapping - mappings\n * @constructor\n */\nfunction KuzzleDataMapping(kuzzleDataCollection, mapping) {\n  Object.defineProperties(this, {\n    //read-only properties\n    collection: {\n      value: kuzzleDataCollection,\n      enumerable: true\n    },\n    kuzzle: {\n      value: kuzzleDataCollection.kuzzle,\n      enumerable: true\n    },\n    // writable properties\n    headers: {\n      value: JSON.parse(JSON.stringify(kuzzleDataCollection.headers)),\n      enumerable: true,\n      writable: true\n    },\n    mapping: {\n      value: mapping || {},\n      enumerable: true,\n      writable: true\n    }\n  });\n\n  if (this.kuzzle.bluebird) {\n    return this.kuzzle.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var blacklist = ['set', 'setHeaders'];\n\n        return passes && blacklist.indexOf(name) === -1;\n      }\n    });\n  }\n\n  return this;\n}\n\n/**\n * Applies the new mapping to the data collection.\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n */\nKuzzleDataMapping.prototype.apply = function (options, cb) {\n  var\n    self = this,\n    data = this.kuzzle.addHeaders({body: {properties: this.mapping}}, this.headers);\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.query(this.collection.buildQueryArgs('admin', 'updateMapping'), data, options, function (err) {\n    if (err) {\n      return cb && cb(err);\n    }\n\n    self.refresh(options, cb);\n  });\n\n  return this;\n};\n\n/**\n * Replaces the current content with the mapping stored in Kuzzle\n *\n * Calling this function will discard any uncommited changes. You can commit changes by calling the “apply” function\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {*} this\n */\nKuzzleDataMapping.prototype.refresh = function (options, cb) {\n  var\n    self = this,\n    data = this.kuzzle.addHeaders({}, this.headers);\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.query(this.collection.buildQueryArgs('admin', 'getMapping'), data, options, function (err, res) {\n    if (err) {\n      return cb ? cb(err) : false;\n    }\n\n    if (res.result[self.collection.index]) {\n      if (res.result[self.collection.index].mappings[self.collection.collection]) {\n        self.mapping = res.result[self.collection.index].mappings[self.collection.collection].properties;\n\n        // Mappings can be empty. The mapping property should never be \"undefined\"\n        if (self.mapping === undefined) {\n          self.mapping = {};\n        }\n      } else {\n        return cb && cb(new Error('No mapping found for collection ' + self.collection.collection));\n      }\n    } else {\n      return cb && cb(new Error('No mapping found for index ' + self.collection.index));\n    }\n\n    if (cb) {\n      cb(null, self);\n    }\n  });\n\n  return this;\n};\n\n\n/**\n * Adds or updates a field mapping.\n *\n * Changes made by this function won’t be applied until you call the apply method\n *\n * @param {string} field - Name of the field from which the mapping is to be added or updated\n * @param {object} mapping - corresponding field mapping\n * @returns {KuzzleDataMapping}\n */\nKuzzleDataMapping.prototype.set = function (field, mapping) {\n  this.mapping[field] = mapping;\n\n  return this;\n};\n\n/**\n * Helper function allowing to set headers while chaining calls.\n *\n * If the replace argument is set to true, replace the current headers with the provided content.\n * Otherwise, it appends the content to the current headers, only replacing already existing values\n *\n * @param content - new headers content\n * @param [replace] - default: false = append the content. If true: replace the current headers with tj\n */\nKuzzleDataMapping.prototype.setHeaders = function (content, replace) {\n  this.kuzzle.setHeaders.call(this, content, replace);\n  return this;\n};\n\nmodule.exports = KuzzleDataMapping;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/kuzzleDataMapping.js\n ** module id = 6\n ** module chunks = 0\n **/","/**\n * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n *\n * @callback responseCallback\n * @param {Object} err - Error object, NULL if the query is successful\n * @param {Object} [data] - The content of the query response\n */\n\n/**\n * Kuzzle handles documents either as realtime messages or as stored documents.\n * KuzzleDocument is the object representation of one of these documents.\n *\n * Notes:\n *   - this constructor may be called either with a documentId, a content, neither or both.\n *   - providing a documentID to the constructor will automatically call refresh, unless a content is also provided\n *\n *\n * @param {object} kuzzleDataCollection - an instanciated KuzzleDataCollection object\n * @param {string} [documentId] - ID of an existing document\n * @param {object} [content] - Initializes this document with the provided content\n * @constructor\n */\nfunction KuzzleDocument(kuzzleDataCollection, documentId, content) {\n  Object.defineProperties(this, {\n    // read-only properties\n    collection: {\n      value: kuzzleDataCollection.collection,\n      enumerable: true\n    },\n    dataCollection: {\n      value: kuzzleDataCollection,\n      enumerable: true\n    },\n    kuzzle: {\n      value: kuzzleDataCollection.kuzzle,\n      enumerable: true\n    },\n    // writable properties\n    id: {\n      value: undefined,\n      enumerable: true,\n      writable: true\n    },\n    content: {\n      value: {},\n      writable: true,\n      enumerable: true\n    },\n    headers: {\n      value: JSON.parse(JSON.stringify(kuzzleDataCollection.headers)),\n      enumerable: true,\n      writable: true\n    },\n    version: {\n      value: undefined,\n      enumerable: true,\n      writable: true\n    }\n  });\n\n  // handling provided arguments\n  if (!content && documentId && typeof documentId === 'object') {\n    content = documentId;\n    documentId = null;\n  }\n\n  if (content) {\n    if (content._version) {\n      this.version = content._version;\n      delete content._version;\n    }\n    this.setContent(content, true);\n  }\n\n  if (documentId) {\n    Object.defineProperty(this, 'id', {\n      value: documentId,\n      enumerable: true\n    });\n  }\n\n  // promisifying\n  if (this.kuzzle.bluebird) {\n    return this.kuzzle.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var whitelist = ['delete', 'refresh', 'save'];\n\n        return passes && whitelist.indexOf(name) !== -1;\n      }\n    });\n  }\n\n  return this;\n}\n\n/**\n * Serialize this object into a JSON object\n *\n * @return {object} JSON object representing this document\n */\nKuzzleDocument.prototype.serialize = function () {\n  var\n    data = {};\n\n  if (this.id) {\n    data._id = this.id;\n  }\n\n  data.body = this.content;\n  data._version = this.version;\n  data = this.kuzzle.addHeaders(data, this.headers);\n\n  return data;\n};\n\n/**\n * Overrides the toString() method in order to return a serialized version of the document\n *\n * @return {string} serialized version of this object\n */\nKuzzleDocument.prototype.toString = function () {\n  return JSON.stringify(this.serialize());\n};\n\n/**\n * Deletes this document in Kuzzle.\n *\n * Takes an optional argument object with the following properties:\n *    - metadata (object, default: null):\n *        Additional information passed to notifications to other users\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {*} this\n */\nKuzzleDocument.prototype.delete = function (options, cb) {\n  var self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  if (!self.id) {\n    throw new Error('KuzzleDocument.delete: cannot delete a document without a document ID');\n  }\n\n  this.kuzzle.query(this.dataCollection.buildQueryArgs('write', 'delete'), this.serialize(), options, cb && function (err) {\n    cb(err, err ? undefined : self.id);\n  });\n};\n\n/**\n * Replaces the current content with the last version of this document stored in Kuzzle.\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {*} this\n */\nKuzzleDocument.prototype.refresh = function (options, cb) {\n  var self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  if (!self.id) {\n    throw new Error('KuzzleDocument.refresh: cannot retrieve a document if no ID has been provided');\n  }\n\n  this.kuzzle.callbackRequired('KuzzleDocument.refresh', cb);\n\n  self.kuzzle.query(self.dataCollection.buildQueryArgs('read', 'get'), {_id: self.id}, options, function (error, res) {\n    var newDocument;\n\n    if (error) {\n      return cb(error);\n    }\n\n    newDocument = new KuzzleDocument(self.dataCollection, self.id, res.result._source);\n    newDocument.version = res.result._version;\n\n    cb(null, newDocument);\n  });\n};\n\n/**\n * Saves this document into Kuzzle.\n *\n * If this is a new document, this function will create it in Kuzzle and the id property will be made available.\n * Otherwise, this method will replace the latest version of this document in Kuzzle by the current content\n * of this object.\n *\n * Takes an optional argument object with the following properties:\n *    - metadata (object, default: null):\n *        Additional information passed to notifications to other users\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {*} this\n */\nKuzzleDocument.prototype.save = function (options, cb) {\n  var\n    data = this.serialize(),\n    self = this;\n\n  if (options && cb === undefined && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.query(this.dataCollection.buildQueryArgs('write', 'createOrReplace'), data, options, function (error, res) {\n    if (error) {\n      return cb && cb(error);\n    }\n\n    self.id = res.result._id;\n    self.version = res.result._version;\n\n    if (cb) {\n      cb(null, self);\n    }\n  });\n\n  return self;\n};\n\n/**\n * Sends the content of this document as a realtime message.\n *\n * Takes an optional argument object with the following properties:\n *    - metadata (object, default: null):\n *        Additional information passed to notifications to other users\n *\n * @param {object} [options] - Optional parameters\n * @returns {*} this\n */\nKuzzleDocument.prototype.publish = function (options) {\n  var data = this.serialize();\n\n  this.kuzzle.query(this.dataCollection.buildQueryArgs('write', 'publish'), data, options);\n\n  return this;\n};\n\n/**\n * Replaces the current content with new data.\n * Changes made by this function won’t be applied until the save method is called.\n *\n * @param {object} data - New content\n * @param {boolean} replace - if true: replace this document content with the provided data\n */\nKuzzleDocument.prototype.setContent = function (data, replace) {\n  var self = this;\n\n  if (replace) {\n    this.content = data;\n  }\n  else {\n    Object.keys(data).forEach(function (key) {\n      self.content[key] = data[key];\n    });\n  }\n\n  return this;\n};\n\n/**\n * Listens to events concerning this document. Has no effect if the document does not have an ID\n * (i.e. if the document has not yet been created as a persisted document).\n *\n * @param {object} [options] - subscription options\n * @param {responseCallback} cb - callback that will be called each time a change has been detected on this document\n */\nKuzzleDocument.prototype.subscribe = function (options, cb) {\n  var filters;\n\n  if (options && !cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.callbackRequired('KuzzleDocument.subscribe', cb);\n\n  if (!this.id) {\n    throw new Error('KuzzleDocument.subscribe: cannot subscribe to a document if no ID has been provided');\n  }\n\n  filters = { ids: { values: [this.id] } };\n\n  return this.dataCollection.subscribe(filters, options, cb);\n};\n\n/**\n * Helper function allowing to set headers while chaining calls.\n *\n * If the replace argument is set to true, replace the current headers with the provided content.\n * Otherwise, it appends the content to the current headers, only replacing already existing values\n *\n * @param content - new headers content\n * @param [replace] - default: false = append the content. If true: replace the current headers with tj\n */\nKuzzleDocument.prototype.setHeaders = function (content, replace) {\n  this.kuzzle.setHeaders.call(this, content, replace);\n  return this;\n};\n\n\nmodule.exports = KuzzleDocument;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/kuzzleDocument.js\n ** module id = 7\n ** module chunks = 0\n **/","/**\n * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n *\n * @callback responseCallback\n * @param {Object} err - Error object, NULL if the query is successful\n * @param {Object} [data] - The content of the query response\n */\n\n\n/**\n * Kuzzle's memory storage is a separate data store from the database layer.\n * It is internaly based on Redis. You can access most of Redis functions (all\n * lowercased), excepting:\n *   * all cluster based functions\n *   * all script based functions\n *   * all cursors functions\n *\n * For instance:\n *     kuzzle.memoryStorage\n *      .set('myKey', 'myValue')\n *      .get('myKey', function (err, response) {\n *        console.log(response.result);\n *\n *        // { _id: 'foo', body: { value: 'myValue' }}\n *      });\n *\n *\n * @param {object} kuzzle - Kuzzle instance to inherit from\n * @constructor\n */\nfunction KuzzleMemoryStorage(kuzzle) {\n  Object.defineProperties(this, {\n    // read-only properties\n    kuzzle: {\n      value: kuzzle,\n      enumerable: true\n    },\n    // writable properties\n    headers: {\n      value: JSON.parse(JSON.stringify(kuzzle.headers)),\n      enumerable: true,\n      writable: true\n    }\n  });\n\n  this.setHeaders = kuzzle.setHeaders.bind(this);\n\n  if (this.kuzzle.bluebird) {\n    return this.kuzzle.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var blacklist = ['setHeaders'];\n\n        return passes && blacklist.indexOf(name) === -1;\n      }\n    });\n  }\n\n  return this;\n}\n\n\n/**\n * constructs the memoryStorage functions.\n */\n(function() {\n\n  var\n    keyVal = ['id', 'value'],\n    idOrKeys = ['id', 'keys'],\n    commands = {\n      append: keyVal,\n      bgrewriteaof: [],\n      bgsave: [],\n      bitcount: ['id', 'start', 'end'],\n      bitop: ['operation', 'destkey', idOrKeys],\n      bitpos: ['id', 'bit', { __opts__: ['start', 'end']}],\n      blpop: [idOrKeys, 'timeout'],\n      brpoplpush: ['source', 'destination'],\n      dbsize: [],\n      decrby: keyVal,\n      del: [idOrKeys],\n      discard: [],\n      exec: [],\n      exists: [idOrKeys],\n      expire: ['id', 'seconds'],\n      expireat: ['id', 'timestamp'],\n      flushdb: [],\n      // @todo: implement geolocation methods once available in Redis stable release\n      getbit: ['id', 'offset'],\n      getrange: ['id', 'start', 'end'],\n      hdel: ['id', ['field', 'fields']],\n      hexists: ['id', 'field'],\n      hincrby: ['id', 'field', 'value'],\n      hmset: ['id', 'values'],\n      hset: ['id', 'field', 'value'],\n      info: ['section'],\n      keys: [ 'pattern' ],\n      lastsave: [],\n      lindex: ['id', 'idx'],\n      linsert: ['id', 'position', 'pivot', 'value'],\n      lpush: ['id', ['value', 'values']],\n      lrange: ['id', 'start', 'stop'],\n      lrem: ['id', 'count', 'value'],\n      lset: ['id', 'idx', 'value'],\n      ltrim: ['id', 'start', 'stop'],\n      mset: ['values'],\n      multi: [],\n      object: ['subcommand', 'args'],\n      pexpire: ['id', 'milliseconds'],\n      pexpireat: ['id', 'timestamp'],\n      pfadd: ['id', ['element', 'elements']],\n      pfmerge: ['destkey', ['sourcekey', 'sourcekeys']],\n      ping: [],\n      psetex: ['id', 'milliseconds', 'value'],\n      publish: ['channel', 'message'],\n      randomkey: [],\n      rename: ['id', 'newkey'],\n      renamenx: ['id', 'newkey'],\n      restore: ['id', 'ttl', 'content'],\n      rpoplpush: ['source', 'destination'],\n      sadd: ['id', ['member', 'members']],\n      save: [],\n      set: ['id', 'value', {__opts__:['ex', 'px', 'nx', 'xx']}],\n      sdiffstore: ['destination', idOrKeys],\n      setbit: ['id', 'offset', 'value'],\n      setex: ['id', 'seconds', 'value'],\n      setrange: ['id', 'offset', 'value'],\n      sinterstore: ['destination', idOrKeys],\n      sismember: ['id', 'member'],\n      smove: ['id', 'destination', 'member'],\n      sort: ['id', {__opts__:['by', 'offset', 'count', 'get', 'direction', 'alpha', 'store']}],\n      spop: ['id', 'count'],\n      srem: ['id', ['member', 'members']],\n      sunionstore: ['destination', idOrKeys],\n      unwatch: [],\n      wait: ['numslaves', 'timeout'],\n      zadd: ['id', {__opts__: ['nx', 'xx', 'ch', 'incr', 'score', 'member', 'members']}],\n      zcount: ['id', 'min', 'max'],\n      zincrby: ['id', 'value', 'member'],\n      zinterstore: ['destination', idOrKeys, {__opts__: ['weight', 'weights', 'aggregate']}],\n      zlexcount: ['id', 'min', 'max'],\n      zrange: ['id', 'start', 'stop', {__opts__: ['withscores']}],\n      zrangebylex: ['id', 'min', 'max', {__opts__: ['offset', 'count']}],\n      zrangebyscore: ['id', 'min', 'max', {__opts__: ['withscores', 'offset', 'count']}],\n      zrem: ['id', 'member'],\n      zremrangebylex: ['id', 'min', 'max'],\n      zremrangebyscore: ['id', 'min', 'max'],\n      zrevrangebylex: ['id', 'max', 'min', {__opts__: ['offset', 'count']}],\n      zrevrangebyscore: ['id', 'max', 'min', {__opts__: ['withscores', 'offset', 'count']}],\n      zrevrank: ['id', 'member']\n    };\n\n  // unique argument key\n  commands.decr = commands.get = commands.dump = commands.hgetall = commands.hkeys = commands.hlen = commands.hstrlen = commands.hvals = commands.incr = commands.llen = commands.lpop = commands.persist = commands.pttl = commands.rpop = commands.scard = commands.smembers = commands.strlen = commands.ttl = commands.type = commands.zcard = ['id'];\n\n  // key value\n  commands.getset = commands.lpushx = keyVal;\n\n  // key key...\n  commands.del = commands.exists = commands.mget = commands.pfcount = commands.sdiff = commands.sinter = commands.sunion = commands.watch = [idOrKeys];\n\n  commands.incrby = commands.incrbyfloat = commands.decrby;\n  commands.brpop = commands.blpop;\n  commands.hget = commands.hexists;\n  commands.hmget = commands.hdel;\n  commands.hsetnx = commands.hset;\n  commands.msetnx = commands.mset;\n  commands.rpush = commands.lpush;\n  commands.hincrbyfloat = commands.hincrby;\n  commands.srandmember = commands.spop;\n  commands.zrevrange = commands.zrange;\n  commands.zscore = commands.zrevrank;\n\n  Object.keys(commands).forEach(function (command) {\n    KuzzleMemoryStorage.prototype[command] = function () {\n      var\n        args = Array.prototype.slice.call(arguments),\n        options = null,\n        cb,\n        query = {\n          controller: 'ms',\n          action: command\n        },\n        data = {};\n\n      if (typeof args[args.length - 1] === 'function') {\n        cb = args.pop();\n      }\n\n      if (args.length && typeof args[args.length - 1] === 'object' && Object.keys(args[args.length - 1]).length === 1 && args[args.length - 1].queuable !== undefined) {\n        options = args.pop();\n      }\n\n      commands[command].forEach(function (v, i) {\n        if (args[i] === undefined) {\n          return;\n        }\n\n        if (Array.isArray(v)) {\n          v = Array.isArray(args[i]) ? v[1] : v[0];\n        }\n\n        if (v === 'id') {\n          data._id = args[i];\n        }\n        else {\n          if (!data.body) {\n            data.body = {};\n          }\n\n          if (typeof v === 'object' && v.__opts__ !== undefined) {\n            v.__opts__.forEach(function (arg) {\n              if (args[i][arg] !== undefined) {\n                data.body[arg] = args[i][arg];\n              }\n            });\n          }\n          else {\n            data.body[v] = args[i];\n          }\n        }\n      });\n\n      this.kuzzle.query(query, data, options, cb);\n\n      return this;\n\n    };\n  });\n\n})();\n\nmodule.exports = KuzzleMemoryStorage;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/kuzzleMemoryStorage.js\n ** module id = 8\n ** module chunks = 0\n **/","var\n  uuid = require('uuid');\n\n/**\n * This is a global callback pattern, called by all asynchronous functions of the Kuzzle object.\n *\n * @callback responseCallback\n * @param {Object} err - Error object, NULL if the query is successful\n * @param {Object} [data] - The content of the query response\n */\n\n/**\n * This object is the result of a subscription request, allowing to manipulate the subscription itself.\n *\n * In Kuzzle, you don’t exactly subscribe to a room or a topic but, instead, you subscribe to documents.\n *\n * What it means is that, to subscribe, you provide to Kuzzle a set of matching filters.\n * Once you have subscribed, if a pub/sub message is published matching your filters, or if a matching stored\n * document change (because it is created, updated or deleted), then you’ll receive a notification about it.\n *\n * @param {object} kuzzleDataCollection - an instantiated and valid kuzzle object\n * @param {object} [options] - subscription optional configuration\n * @constructor\n */\nfunction KuzzleRoom(kuzzleDataCollection, options) {\n  // Define properties\n  Object.defineProperties(this, {\n    // private properties\n    callback: {\n      value: null,\n      writable: true\n    },\n    channel: {\n      value: null,\n      writable: true\n    },\n    id: {\n      value: uuid.v4()\n    },\n    lastRenewal: {\n      value: null,\n      writable: true\n    },\n    notifier: {\n      value: null,\n      writable: true\n    },\n    onDoneCB: {\n      value: null,\n      writable: true\n    },\n    queue: {\n      value: [],\n      writable: true\n    },\n    // Delay before allowing a subscription renewal\n    renewalDelay: {\n      value: 500\n    },\n    scope: {\n      value: options && options.scope ? options.scope : 'all'\n    },\n    state: {\n      value: options && options.state ? options.state : 'done'\n    },\n    subscribing: {\n      value: false,\n      writable: true\n    },\n    users: {\n      value: options && options.users ? options.users : 'none'\n    },\n    // read-only properties\n    collection: {\n      value: kuzzleDataCollection,\n      enumerable: true\n    },\n    kuzzle: {\n      value: kuzzleDataCollection.kuzzle,\n      enumerable: true\n    },\n    // writable properties\n    filters: {\n      value: null,\n      enumerable: true,\n      writable: true\n    },\n    headers: {\n      value: JSON.parse(JSON.stringify(kuzzleDataCollection.headers)),\n      enumerable: true,\n      writable: true\n    },\n    metadata: {\n      value: (options && options.metadata) ? options.metadata : {},\n      enumerable: true,\n      writable: true\n    },\n    roomId: {\n      value: null,\n      enumerable: true,\n      writable: true\n    },\n    subscribeToSelf: {\n      value: options && typeof options.subscribeToSelf === 'boolean' ? options.subscribeToSelf : true,\n      enumerable: true,\n      writable: true\n    }\n  });\n\n  if (this.kuzzle.bluebird) {\n    return this.kuzzle.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var whitelist = ['count'];\n\n        return passes && whitelist.indexOf(name) !== -1;\n      }\n    });\n  }\n\n  return this;\n}\n\n/**\n * Returns the number of other subscriptions on that room.\n *\n * @param {responseCallback} cb - Handles the query response\n */\nKuzzleRoom.prototype.count = function (cb) {\n  var data;\n\n  this.kuzzle.callbackRequired('KuzzleRoom.count', cb);\n\n  data = this.kuzzle.addHeaders({body: {roomId: this.roomId}}, this.headers);\n\n  if (!isReady.call(this)) {\n    this.queue.push({action: 'count', args: [cb]});\n    return;\n  }\n\n  if (!this.roomId) {\n    throw new Error('KuzzleRoom.count: cannot count subscriptions on an inactive room');\n  }\n\n  this.kuzzle.query(this.collection.buildQueryArgs('subscribe', 'count'), data, function (err, res) {\n    cb(err, res && res.result.count);\n  });\n};\n\n/**\n * Renew the subscription using new filters\n *\n * @param {object} [filters] - Filters in Kuzzle DSL format\n * @param {responseCallback} notificationCB - called for each new notification\n * @param {responseCallback} [cb] - handles the query response\n */\nKuzzleRoom.prototype.renew = function (filters, notificationCB, cb) {\n  var\n    now = Date.now(),\n    subscribeQuery = {\n      scope: this.scope,\n      state: this.state,\n      users: this.users\n    },\n    self = this;\n\n  if (typeof filters === 'function') {\n    cb = notificationCB;\n    notificationCB = filters;\n    filters = null;\n  }\n\n  if (!cb) {\n    cb = self.onDoneCB;\n  }\n\n  self.kuzzle.callbackRequired('KuzzleRoom.renew', notificationCB);\n\n  /*\n    Skip subscription renewal if another one was performed a moment before\n   */\n  if (self.lastRenewal && (now - self.lastRenewal) <= self.renewalDelay) {\n    return cb && cb(new Error('Subscription already renewed less than ' + self.renewalDelay + 'ms ago'));\n  }\n\n  if (filters) {\n    self.filters = filters;\n  }\n\n  /*\n   if not yet connected, register itself to the subscriptions list and wait for the\n   main Kuzzle object to renew once online\n    */\n  if (self.kuzzle.state !== 'connected') {\n    self.callback = notificationCB;\n    self.onDoneCB = cb;\n    self.kuzzle.subscriptions.pending[self.id] = self;\n    return;\n  }\n\n  if (self.subscribing) {\n    self.queue.push({action: 'renew', args: [filters, notificationCB, cb]});\n    return;\n  }\n\n  self.unsubscribe();\n  self.roomId = null;\n  self.subscribing = true;\n  self.callback = notificationCB;\n  self.onDoneCB = cb;\n  self.kuzzle.subscriptions.pending[self.id] = self;\n\n  subscribeQuery.body = self.filters;\n  subscribeQuery = self.kuzzle.addHeaders(subscribeQuery, this.headers);\n\n  self.kuzzle.query(self.collection.buildQueryArgs('subscribe', 'on'), subscribeQuery, {metadata: self.metadata}, function (error, response) {\n    delete self.kuzzle.subscriptions.pending[self.id];\n    self.subscribing = false;\n\n    if (error) {\n      self.queue = [];\n      return cb && cb(new Error('Error during Kuzzle subscription: ' + error.message));\n    }\n\n    self.lastRenewal = now;\n    self.roomId = response.result.roomId;\n    self.channel = response.result.channel;\n\n    if (!self.kuzzle.subscriptions[self.roomId]) {\n      self.kuzzle.subscriptions[self.roomId] = {};\n    }\n\n    self.kuzzle.subscriptions[self.roomId][self.id] = self;\n\n    self.notifier = notificationCallback.bind(self);\n    self.kuzzle.network.on(self.channel, self.notifier);\n\n    dequeue.call(self);\n    cb && cb(null, self);\n  });\n};\n\n/**\n * Unsubscribes from Kuzzle.\n *\n * Stop listening immediately. If there is no listener left on that room, sends an unsubscribe request to Kuzzle, once\n * pending subscriptions reaches 0, and only if there is still no listener on that room.\n * We wait for pending subscriptions to finish to avoid unsubscribing while another subscription on that room is\n *\n * @return {*} this\n */\nKuzzleRoom.prototype.unsubscribe = function () {\n  var\n    self = this,\n    room = self.roomId,\n    interval;\n\n  if (!isReady.call(this)) {\n    self.queue.push({action: 'unsubscribe', args: []});\n    return self;\n  }\n\n  if (room) {\n    self.kuzzle.network.off(self.channel, this.notifier);\n\n    if (Object.keys(self.kuzzle.subscriptions[room]).length === 1) {\n      delete self.kuzzle.subscriptions[room];\n\n      if (Object.keys(self.kuzzle.subscriptions.pending).length === 0) {\n        self.kuzzle.query(self.collection.buildQueryArgs('subscribe', 'off'), {body: {roomId: room}});\n      } else {\n        interval = setInterval(function () {\n          if (Object.keys(self.kuzzle.subscriptions.pending).length === 0) {\n            if (!self.kuzzle.subscriptions[room]) {\n              self.kuzzle.query(self.collection.buildQueryArgs('subscribe', 'off'), {body: {roomId: room}});\n            }\n            clearInterval(interval);\n          }\n        }, 100);\n      }\n    } else {\n      delete self.kuzzle.subscriptions[room][self.id];\n    }\n\n    self.roomId = null;\n  }\n\n  return self;\n};\n\n/**\n * Helper function allowing to set headers while chaining calls.\n *\n * If the replace argument is set to true, replace the current headers with the provided content.\n * Otherwise, it appends the content to the current headers, only replacing already existing values\n *\n * @param content - new headers content\n * @param [replace] - default: false = append the content. If true: replace the current headers with tj\n */\nKuzzleRoom.prototype.setHeaders = function (content, replace) {\n  this.kuzzle.setHeaders.call(this, content, replace);\n  return this;\n};\n\n/**\n * Callback called by the network handler when a message is sent to the subscribed room ID\n * Calls the registered callback if the notification passes the subscription filters\n *\n * @param {object} data - data\n * @returns {*}\n */\nfunction notificationCallback (data) {\n  if (data.error) {\n    return this.callback(data.error);\n  }\n\n  if (data.action === 'jwtTokenExpired') {\n    this.kuzzle.jwtToken = undefined;\n    return this.kuzzle.emitEvent('jwtTokenExpired');\n  }\n\n  if (this.kuzzle.requestHistory[data.requestId]) {\n    if (this.subscribeToSelf) {\n      this.callback(null, data);\n    }\n    delete this.kuzzle.requestHistory[data.requestId];\n  } else {\n    this.callback(null, data);\n  }\n}\n\n\n/**\n * Dequeue actions performed while subscription was being renewed\n */\nfunction dequeue () {\n  var element;\n\n  while (this.queue.length > 0) {\n    element = this.queue.shift();\n\n    this[element.action].apply(this, element.args);\n  }\n}\n\nfunction isReady() {\n  return this.kuzzle.state === 'connected' && !this.subscribing;\n}\n\nmodule.exports = KuzzleRoom;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/kuzzleRoom.js\n ** module id = 9\n ** module chunks = 0\n **/","/**\n * Sugar-code handling the result of a KuzzleRoom.renew call\n * @constructor\n */\nfunction KuzzleSubscribeResult() {\n  this.cbs = [];\n  this.error = null;\n  this.room = null;\n}\n\n/**\n * Registers a callback to be called with a subscription result\n * @param {Function} cb\n */\nKuzzleSubscribeResult.prototype.onDone = function (cb) {\n  if (this.error || this.room) {\n    cb(this.error, this.room);\n  }\n  else {\n    this.cbs.push(cb);\n  }\n\n  return this;\n};\n\n/**\n * Calls all registered callbacks\n *\n * @param {Object} error object\n * @param {KuzzleRoom} room\n */\nKuzzleSubscribeResult.prototype.done = function (error, room) {\n  this.error = error;\n  this.room = room;\n\n  this.cbs.forEach(function (cb) {\n    cb(error, room);\n  });\n};\n\nmodule.exports = KuzzleSubscribeResult;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/kuzzleSubscribeResult.js\n ** module id = 10\n ** module chunks = 0\n **/","/**\n *\n * @param host\n * @param wsPort\n * @param ioPort\n * @param sslConnection\n * @returns {Object} tnstantiated WebSocket/Socket.IO object\n */\n\nfunction network(host, wsPort, ioPort, sslConnection) {\n  // Web browser / NodeJS websocket handling\n  if (typeof window !== 'undefined') {\n    // use native websockets if the browser supports it\n    if (typeof WebSocket !== 'undefined') {\n      return new (require('./wrappers/websocket'))(host, wsPort, sslConnection);\n    }\n    // otherwise fallback to socket.io, if available\n    else if (window.io) {\n      return new (require('./wrappers/socketio'))(host, ioPort, sslConnection);\n    }\n\n    throw new Error('Aborting: no websocket support detected and no socket.io library loaded either.');\n  }\n\n  return new (require('./wrappers/websocket'))(host, wsPort, sslConnection);\n}\n\nmodule.exports = network;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/networkWrapper/index.js\n ** module id = 11\n ** module chunks = 0\n **/","function SocketIO(host, port, ssl) {\n  this.host = host;\n  this.port = port;\n  this.ssl = ssl;\n  this.socket = null;\n\n  /**\n   * Creates a new socket from the provided arguments\n   *\n   * @constructor\n   * @param {boolean} autoReconnect\n   * @param {int} reconnectionDelay\n   */\n  this.connect = function (autoReconnect, reconnectionDelay) {\n    this.socket = window.io((this.ssl ? 'https://' : 'http://') + this.host + ':' + this.port, {\n      reconnection: autoReconnect,\n      reconnectionDelay: reconnectionDelay,\n      forceNew: true\n    });\n  };\n\n  /**\n   * Fires the provided callback whence a connection is established\n   *\n   * @param {function} callback\n   */\n  this.onConnect = function (callback) {\n    this.socket.on('connect', callback);\n  };\n\n  /**\n   * Fires the provided callback whenever a connection error is received\n   * @param {function} callback\n   */\n  this.onConnectError = function (callback) {\n    this.socket.on('connect_error', callback);\n  };\n\n  /**\n   * Fires the provided callback whenever a disconnection occurred\n   * @param {function} callback\n   */\n  this.onDisconnect = function (callback) {\n    this.socket.on('disconnect', callback);\n  };\n\n  /**\n   * Fires the provided callback whenever a connection has been reestablished\n   * @param {function} callback\n   */\n  this.onReconnect = function (callback) {\n    this.socket.on('reconnect', callback);\n  };\n\n  /**\n   * Registers a callback on a room. Once 1 message is received, fires the\n   * callback and unregister it afterward.\n   *\n   * @param {string} roomId\n   * @param {function} callback\n   */\n  this.once = function (roomId, callback) {\n    this.socket.once(roomId, callback);\n  };\n\n  /**\n   * Registers a callback on a room.\n   *\n   * @param {string} roomId\n   * @param {function} callback\n   */\n  this.on = function (roomId, callback) {\n    this.socket.on(roomId, callback);\n  };\n\n  /**\n   * Unregisters a callback from a room.\n   *\n   * @param {string} roomId\n   * @param {function} callback\n   */\n  this.off = function (roomId, callback) {\n    this.socket.off(roomId, callback);\n  };\n\n\n  /**\n   * Sends a payload to the connected server\n   *\n   * @param {Object} payload\n   */\n  this.send = function (payload) {\n    this.socket.emit('kuzzle', payload);\n  };\n\n  /**\n   * Closes the connection\n   */\n  this.close = function () {\n    this.socket.close();\n    this.socket = null;\n  };\n}\n\nmodule.exports = SocketIO;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/networkWrapper/wrappers/socketio.js\n ** module id = 12\n ** module chunks = 0\n **/","var\n  KuzzleSecurityDocument = require('./kuzzleSecurityDocument');\n\nfunction KuzzleProfile(kuzzleSecurity, id, content) {\n\n  KuzzleSecurityDocument.call(this, kuzzleSecurity, id, content);\n\n  // Define properties\n  Object.defineProperties(this, {\n    // private properties\n    deleteActionName: {\n      value: 'deleteProfile'\n    },\n    updateActionName: {\n      value: 'updateProfile'\n    }\n  });\n\n  // promisifying\n  if (kuzzleSecurity.kuzzle.bluebird) {\n    return kuzzleSecurity.kuzzle.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var whitelist = ['hydrate', 'save'];\n\n        return passes && whitelist.indexOf(name) !== -1;\n      }\n    });\n  }\n\n}\n\nKuzzleProfile.prototype = Object.create(KuzzleSecurityDocument.prototype, {\n  constructor: {\n    value: KuzzleProfile\n  }\n});\n\n/**\n * Persist to the persistent layer the current profile\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {KuzzleProfile} this\n */\nKuzzleProfile.prototype.save = function (options, cb) {\n  var\n    data,\n    self = this;\n\n  if (!this.content.policies) {\n    throw new Error('Argument \"policies\" is mandatory in a profile. This argument contains an array of objects.');\n  }\n\n  if (options && cb === undefined && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data = this.serialize();\n\n  self.kuzzle.query(self.kuzzleSecurity.buildQueryArgs('createOrReplaceProfile'), data, options, cb && function (error) {\n    cb(error, error ? undefined : self);\n  });\n\n  return self;\n};\n\n\n/**\n * Add a policy in the policies list\n * @param {Object} policy - must be an object containing at least a \"roleId\" member which must be a string.\n *\n * @returns {KuzzleProfile} this\n */\nKuzzleProfile.prototype.addPolicy = function (policy) {\n\n  if (typeof policy !== 'object' || typeof policy.roleId !== 'string') {\n    throw new Error('Parameter \"policies\" must be an object containing at least a \"roleId\" member which must be a string.');\n  }\n\n  if (!this.content.policies) {\n    this.content.policies = [];\n  }\n\n  this.content.policies.push(policy);\n\n  return this;\n};\n\n/**\n * Set policies list\n * @param {Array} policies - must be an array of objects containing at least a \"roleId\" member which must be a string\n *\n * @returns {KuzzleProfile} this\n */\nKuzzleProfile.prototype.setPolicies = function (policies) {\n\n  if (!Array.isArray(policies)) {\n    throw new Error('Parameter \"policies\" must be an array of objects containing at least a \"roleId\" member which must be a string');\n  }\n\n  policies.map(function (policy) {\n    if (typeof policy !== 'object' || typeof policy.roleId !== 'string') {\n      throw new Error('Parameter \"policies\" must be an array of objects containing at least a \"roleId\" member which must be a string');\n    }\n  });\n\n  this.content.policies = policies;\n\n  return this;\n};\n\n/**\n * Serialize this object into a JSON object\n *\n * @return {object} JSON object representing this securityDocument\n */\nKuzzleProfile.prototype.serialize = function () {\n  var\n    data = {};\n\n  if (this.id) {\n    data._id = this.id;\n  }\n\n  data.body = this.content;\n\n  return data;\n};\n\n/**\n * Returns the list of policies associated to this profile.\n * Each policy element is an array of objects containing at least a \"roleId\" member which must be a string\n *\n * @return {object} an array of policies\n */\nKuzzleProfile.prototype.getPolicies = function () {\n  return this.content.policies;\n};\n\nmodule.exports = KuzzleProfile;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/security/kuzzleProfile.js\n ** module id = 13\n ** module chunks = 0\n **/","var KuzzleSecurityDocument = require('./kuzzleSecurityDocument');\n\nfunction KuzzleRole(kuzzleSecurity, id, content) {\n\n  KuzzleSecurityDocument.call(this, kuzzleSecurity, id, content);\n\n  // Define properties\n  Object.defineProperties(this, {\n    // private properties\n    deleteActionName: {\n      value: 'deleteRole'\n    },\n    updateActionName: {\n      value: 'updateRole'\n    }\n  });\n\n  // promisifying\n  if (kuzzleSecurity.kuzzle.bluebird) {\n    return kuzzleSecurity.kuzzle.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var whitelist = ['save'];\n\n        return passes && whitelist.indexOf(name) !== -1;\n      }\n    });\n  }\n\n}\n\nKuzzleRole.prototype = Object.create(KuzzleSecurityDocument.prototype, {\n  constructor: {\n    value: KuzzleRole\n  }\n});\n\n/**\n * Saves this role into Kuzzle.\n *\n * If this is a new role, this function will create it in Kuzzle.\n * Otherwise, this method will replace the latest version of this role in Kuzzle by the current content\n * of this object.\n *\n * @param {object} [options] - Optional parameters\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {KuzzleRole} this object\n */\nKuzzleRole.prototype.save = function (options, cb) {\n  var\n    data = this.serialize(),\n    self = this;\n\n  if (options && cb === undefined && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.query(this.kuzzleSecurity.buildQueryArgs('createOrReplaceRole'), data, options, cb && function (error) {\n    cb(error, error ? undefined : self);\n  });\n\n  return this;\n};\n\nmodule.exports = KuzzleRole;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/security/kuzzleRole.js\n ** module id = 14\n ** module chunks = 0\n **/","var\n  KuzzleRole = require('./kuzzleRole'),\n  KuzzleProfile = require('./kuzzleProfile'),\n  KuzzleUser = require('./kuzzleUser');\n\n/**\n * Kuzzle security constructor\n *\n * @param kuzzle\n * @returns {KuzzleSecurity}\n * @constructor\n */\nfunction KuzzleSecurity(kuzzle) {\n\n  Object.defineProperty(this, 'kuzzle', {\n    value: kuzzle\n  });\n\n  Object.defineProperty(this, 'buildQueryArgs', {\n    value: function (action) {\n      return {\n        controller: 'security',\n        action: action\n      };\n    }\n  });\n\n  if (this.kuzzle.bluebird) {\n    return this.kuzzle.bluebird.promisifyAll(this, {\n      suffix: 'Promise',\n      filter: function (name, func, target, passes) {\n        var blacklist = ['roleFactory', 'profileFactory', 'userFactory', 'isActionAllowed'];\n\n        return passes && blacklist.indexOf(name) === -1;\n      }\n    });\n  }\n\n  return this;\n}\n\n\n/**\n * Retrieve a single Role using its unique role ID.\n *\n * @param {string} id\n * @param {object|responseCallback} [options] - Optional parameters\n * @param {responseCallback} [cb] - returns Kuzzle's response\n */\nKuzzleSecurity.prototype.getRole = function (id, options, cb) {\n  var\n    data,\n    self = this;\n\n  if (!id) {\n    throw new Error('Id parameter is mandatory for getRole function');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data = {_id: id};\n\n  self.kuzzle.callbackRequired('KuzzleSecurity.getRole', cb);\n\n  self.kuzzle.query(this.buildQueryArgs('getRole'), data, options, function (err, response) {\n    cb(err, err ? undefined : new KuzzleRole(self, response.result._id, response.result._source));\n  });\n};\n\n/**\n * Executes a search on roles according to a filter\n *\n * /!\\ There is a small delay between role creation and their existence in our persistent search layer,\n * usually a couple of seconds.\n * That means that a role that was just been created won’t be returned by this function.\n *\n * @param {Object} filters - this object can contains an array `indexes` with a list of index id, a integer `from` and a integer `size`\n * @param {object|responseCallback} [options] - Optional parameters\n * @param {responseCallback} [cb] - returns Kuzzle's response\n *\n */\nKuzzleSecurity.prototype.searchRoles = function (filters, options, cb) {\n  var\n    self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.callbackRequired('KuzzleSecurity.searchRoles', cb);\n\n  self.kuzzle.query(this.buildQueryArgs('searchRoles'), {body: filters}, options, function (error, result) {\n    var documents;\n\n    if (error) {\n      return cb(error);\n    }\n\n    documents = result.result.hits.map(function (doc) {\n      return new KuzzleRole(self, doc._id, doc._source);\n    });\n\n    cb(null, { total: result.result.total, roles: documents });\n  });\n};\n\n/**\n * Create a new role in Kuzzle.\n *\n * Takes an optional argument object with the following property:\n *    - replaceIfExist (boolean, default: false):\n *        If the same role already exists: throw an error if sets to false.\n *        Replace the existing role otherwise\n *\n * @param {string} id - role identifier\n * @param {object} content - a plain javascript object representing the role\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} [cb] - (optional) Handles the query response\n */\nKuzzleSecurity.prototype.createRole = function (id, content, options, cb) {\n  var\n    self = this,\n    data = {},\n    action = 'createRole';\n\n  if (!id || typeof id !== 'string') {\n    throw new Error('KuzzleSecurity.createRole: cannot create a role without a role ID');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data._id = id;\n  data.body = content;\n\n  if (options) {\n    action = options.replaceIfExist ? 'createOrReplaceRole' : 'createRole';\n  }\n\n  self.kuzzle.query(this.buildQueryArgs(action), data, options, cb && function (err, res) {\n    cb(err, err ? undefined : new KuzzleRole(self, res.result._id, res.result._source));\n  });\n};\n\n\n/**\n * Update a role in Kuzzle.\n *\n * @param {string} id - role identifier\n * @param {object} content - a plain javascript object representing the role's modification\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} [cb] - (optional) Handles the query response\n * @returns {KuzzleSecurity} this object\n */\nKuzzleSecurity.prototype.updateRole = function (id, content, options, cb) {\n  var\n    self = this,\n    data = {_id: id, body: content},\n    action = 'updateRole';\n\n  if (!id || typeof id !== 'string') {\n    throw new Error('KuzzleSecurity.updateRole: cannot update a role without a role ID');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.query(this.buildQueryArgs(action), data, options, cb && function (err) {\n    cb(err, err ? undefined : new KuzzleRole(self, id, content));\n  });\n\n  return this;\n};\n\n/**\n * Delete role.\n *\n * There is a small delay between role deletion and their deletion in our advanced search layer,\n * usually a couple of seconds.\n * That means that a role that was just been delete will be returned by this function\n *\n *\n * @param {string} id - Role id to delete\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {KuzzleSecurity} this object\n */\nKuzzleSecurity.prototype.deleteRole = function (id, options, cb) {\n  var data = {_id: id};\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.query(this.buildQueryArgs('deleteRole'), data, options, cb && function (err, res) {\n    cb(err, err ? undefined : res.result._id);\n  });\n\n  return this;\n};\n\n/**\n * Instantiate a new KuzzleRole object. Workaround to the module.exports limitation, preventing multiple\n * constructors to be exposed without having to use a factory or a composed object.\n *\n * @param {string} id - role id\n * @param {object} content - role content\n * @constructor\n */\nKuzzleSecurity.prototype.roleFactory = function(id, content) {\n  return new KuzzleRole(this, id, content);\n};\n\n\n/**\n * Get a specific profile from kuzzle\n *\n *\n * @param {string} id\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} cb - returns Kuzzle's response\n */\nKuzzleSecurity.prototype.getProfile = function (id, options, cb) {\n  var\n    data,\n    self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  if (!id || typeof id !== 'string') {\n    throw new Error('Id parameter is mandatory for getProfile function');\n  }\n\n\n  data = {_id: id};\n\n  self.kuzzle.callbackRequired('KuzzleSecurity.getProfile', cb);\n\n  self.kuzzle.query(this.buildQueryArgs('getProfile'), data, options, function (error, response) {\n    cb(error, error ? undefined : new KuzzleProfile(self, response.result._id, response.result._source));\n  });\n};\n\n/**\n * Executes a search on profiles according to a filter\n *\n *\n * /!\\ There is a small delay between profile creation and their existence in our persistent search layer,\n * usually a couple of seconds.\n * That means that a profile that was just been created won’t be returned by this function.\n *\n * @param {Object} filters - this object can contains an array `roles` with a list of roles id, a integer `from` and a integer `size`\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} [cb] - returns Kuzzle's response\n */\nKuzzleSecurity.prototype.searchProfiles = function (filters, options, cb) {\n  var\n    self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.callbackRequired('KuzzleSecurity.searchProfiles', cb);\n\n  self.kuzzle.query(this.buildQueryArgs('searchProfiles'), {body: filters}, options, function (error, response) {\n    var documents;\n\n    if (error) {\n      return cb(error);\n    }\n\n    documents = response.result.hits.map(function (doc) {\n      return new KuzzleProfile(self, doc._id, doc._source);\n    });\n\n    cb(null, { total: response.result.total, profiles: documents });\n  });\n};\n\n/**\n * Create a new profile in Kuzzle.\n *\n * Takes an optional argument object with the following property:\n *    - replaceIfExist (boolean, default: false):\n *        If the same profile already exists: throw an error if sets to false.\n *        Replace the existing profile otherwise\n *\n * @param {string} id - profile identifier\n * @param {object} content - attribute `roles` in `content` must only contains an array of role id\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} [cb] - (optional) Handles the query response\n */\nKuzzleSecurity.prototype.createProfile = function (id, content, options, cb) {\n  var\n    self = this,\n    data = {},\n    action = 'createProfile';\n\n  if (!id || typeof id !== 'string') {\n    throw new Error('KuzzleSecurity.createProfile: cannot create a profile without a profile ID');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data._id = id;\n  data.body = content;\n\n  if (options) {\n    action = options.replaceIfExist ? 'createOrReplaceProfile' : 'createProfile';\n  }\n\n  self.kuzzle.query(this.buildQueryArgs(action), data, options, cb && function (err, res) {\n    cb(err, err ? undefined : new KuzzleProfile(self, res.result._id, res.result._source));\n  });\n};\n\n\n/**\n * Update a profile in Kuzzle.\n *\n * @param {string} id - profile identifier\n * @param {object} content - a plain javascript object representing the profile's modification\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} [cb] - (optional) Handles the query response\n * @returns {KuzzleSecurity} this object\n */\nKuzzleSecurity.prototype.updateProfile = function (id, content, options, cb) {\n  var\n    self = this,\n    data = {},\n    action = 'updateProfile';\n\n  if (!id || typeof id !== 'string') {\n    throw new Error('KuzzleSecurity.updateProfile: cannot update a profile without a profile ID');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data._id = id;\n  data.body = content;\n\n  self.kuzzle.query(this.buildQueryArgs(action), data, options, cb && function (err, res) {\n    var updatedContent = {};\n\n    if (err) {\n      return cb(err);\n    }\n\n    Object.keys(res.result._source).forEach(function (property) {\n      updatedContent[property] = res.result._source[property];\n    });\n\n    cb(null, new KuzzleProfile(self, res.result._id, updatedContent));\n  });\n\n  return this;\n};\n\n/**\n * Delete profile.\n *\n * There is a small delay between profile deletion and their deletion in our advanced search layer,\n * usually a couple of seconds.\n * That means that a profile that was just been delete will be returned by this function\n *\n *\n * @param {string} id - Profile id to delete\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {KuzzleSecurity} this object\n */\nKuzzleSecurity.prototype.deleteProfile = function (id, options, cb) {\n  var data = {_id: id};\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.query(this.buildQueryArgs('deleteProfile'), data, options, cb && function (err, res) {\n    cb(err, err ? undefined : res.result._id);\n  });\n\n  return this;\n};\n\n/**\n * Instantiate a new KuzzleProfile object. Workaround to the module.exports limitation, preventing multiple\n * constructors to be exposed without having to use a factory or a composed object.\n *\n * @param {string} id - profile id\n * @param {object} content - profile content\n * @constructor\n */\nKuzzleSecurity.prototype.profileFactory = function(id, content) {\n  return new KuzzleProfile(this, id, content);\n};\n\n/**\n * Get a specific user from kuzzle using its unique ID\n *\n * @param {string} id\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} cb - returns Kuzzle's response\n */\nKuzzleSecurity.prototype.getUser = function (id, options, cb) {\n  var\n    data = {_id: id},\n    self = this;\n\n  if (!id || typeof id !== 'string') {\n    throw new Error('Id parameter is mandatory for getUser function');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.callbackRequired('KuzzleSecurity.getUser', cb);\n\n  self.kuzzle.query(this.buildQueryArgs('getUser'), data, options, function (err, response) {\n    cb(err, err ? undefined : new KuzzleUser(self, response.result._id, response.result._source));\n  });\n};\n\n/**\n * Executes a search on user according to a filter\n *\n * /!\\ There is a small delay between user creation and their existence in our persistent search layer,\n * usually a couple of seconds.\n * That means that a user that was just been created won’t be returned by this function.\n *\n * @param {Object} filters - same filters as documents filters\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} [cb] - returns Kuzzle's response\n */\nKuzzleSecurity.prototype.searchUsers = function (filters, options, cb) {\n  var\n    self = this;\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.callbackRequired('KuzzleSecurity.searchUsers', cb);\n\n  self.kuzzle.query(this.buildQueryArgs('searchUsers'), {body: filters}, options, function (error, response) {\n    var documents;\n\n    if (error) {\n      return cb(error);\n    }\n\n    documents = response.result.hits.map(function (doc) {\n      return new KuzzleUser(self, doc._id, doc._source);\n    });\n\n    cb(null, { total: response.result.total, users: documents });\n  });\n};\n\n/**\n * Create a new user in Kuzzle.\n *\n * Takes an optional argument object with the following property:\n *    - replaceIfExist (boolean, default: false):\n *        If the same user already exists: throw an error if sets to false.\n *        Replace the existing user otherwise\n *\n * @param {string} id - user identifier\n * @param {object} content - attribute `profileIds` in `content` must only contain an array of profile ids\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} [cb] - (optional) Handles the query response\n */\nKuzzleSecurity.prototype.createUser = function (id, content, options, cb) {\n  var\n    self = this,\n    data = {_id: id, body: content},\n    action = 'createUser';\n\n  if (!id || typeof id !== 'string') {\n    throw new Error('KuzzleSecurity.createUser: cannot create a user without a user ID');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  if (options) {\n    action = options.replaceIfExist ? 'createOrReplaceUser' : 'createUser';\n  }\n\n  self.kuzzle.query(this.buildQueryArgs(action), data, null, cb && function (err, res) {\n    cb(err, err ? undefined : new KuzzleUser(self, res.result._id, res.result._source));\n  });\n};\n\n/**\n * Create a new restricted user in Kuzzle.\n *\n * This function will create a new user. It is not usable to update an existing user.\n * This function allows anonymous users to create a \"restricted\" user with predefined rights.\n *\n * @param {string} id - user identifier\n * @param {object} content - attribute `profile` in `content` must only contains the profile id\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} [cb] - (optional) Handles the query response\n */\nKuzzleSecurity.prototype.createRestrictedUser = function (id, content, options, cb) {\n  var\n    self = this,\n    data = {_id: id, body: content};\n\n  if (!id || typeof id !== 'string') {\n    throw new Error('KuzzleSecurity.createRestrictedUser: cannot create a user without a user ID');\n  }\n\n  if (content.profileIds) {\n    throw new Error('KuzzleSecurity.createRestrictedUser: cannot provide profileIds');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.query(this.buildQueryArgs('createRestrictedUser'), data, null, cb && function (err, res) {\n    cb(err, err ? undefined : new KuzzleUser(self, res.result._id, res.result._source));\n  });\n};\n\n\n/**\n * Update an user in Kuzzle.\n *\n * @param {string} id - user identifier\n * @param {object} content - a plain javascript object representing the user's modification\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} [cb] - (optional) Handles the query response\n * @returns {KuzzleSecurity} this object\n */\nKuzzleSecurity.prototype.updateUser = function (id, content, options, cb) {\n  var\n    self = this,\n    data = {},\n    action = 'updateUser';\n\n  if (!id || typeof id !== 'string') {\n    throw new Error('KuzzleSecurity.updateUser: cannot update an user without an user ID');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  data._id = id;\n  data.body = content;\n\n  self.kuzzle.query(this.buildQueryArgs(action), data, options, cb && function (err, res) {\n    cb(err, err ? undefined : new KuzzleUser(self, res.result._id, res.result._source));\n  });\n\n  return this;\n};\n\n/**\n * Delete user.\n *\n * There is a small delay between user deletion and their deletion in our advanced search layer,\n * usually a couple of seconds.\n * That means that a user that was just been delete will be returned by this function\n *\n *\n * @param {string} id - Profile id to delete\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {responseCallback} [cb] - Handles the query response\n * @returns {KuzzleSecurity} this object\n */\nKuzzleSecurity.prototype.deleteUser = function (id, options, cb) {\n  var data = {_id: id};\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  this.kuzzle.query(this.buildQueryArgs('deleteUser'), data, options, cb && function (err, res) {\n    cb(err, err ? undefined : res.result._id);\n  });\n\n  return this;\n};\n\n/**\n * Instantiate a new KuzzleUser object. Workaround to the module.exports limitation, preventing multiple\n * constructors to be exposed without having to use a factory or a composed object.\n *\n * @param {string} id - user id\n * @param {object} content - user content\n * @constructor\n */\nKuzzleSecurity.prototype.userFactory = function(id, content) {\n  return new KuzzleUser(this, id, content);\n};\n\n/**\n * Tells whether an action is allowed, denied or conditional based on the rights\n * rights provided as the first argument. An action is defined as a couple of\n * action and controller (mandatory), plus an index and a collection(optional).\n *\n * @param {object} rights - The rights rights associated to a user\n *                            (see getMyrights and getUserrights).\n * @param {string} controller - The controller to check the action onto.\n * @param {string} action - The action to perform.\n * @param {string} index - (optional) The name of index to perform the action onto.\n * @param {string} collection - (optional) The name of the collection to perform the action onto.\n *\n * @returns {string} ['allowed', 'denied', 'conditional'] where conditional cases\n *                   correspond to rights containing closures.\n *                   See also http://kuzzle.io/guide/#roles-definition\n */\nKuzzleSecurity.prototype.isActionAllowed = function(rights, controller, action, index, collection) {\n  var filteredRights;\n\n  if (!rights || typeof rights !== 'object') {\n    throw new Error('rights parameter is mandatory for isActionAllowed function');\n  }\n  if (!controller || typeof controller !== 'string') {\n    throw new Error('controller parameter is mandatory for isActionAllowed function');\n  }\n  if (!action || typeof action !== 'string') {\n    throw new Error('action parameter is mandatory for isActionAllowed function');\n  }\n\n  // We filter in all the rights that match the request (including wildcards).\n  filteredRights = rights\n    .filter(function (right) {\n      return right.controller === controller || right.controller === '*';\n    })\n    .filter(function (right) {\n      return right.action === action || right.action === '*';\n    })\n    .filter(function (right) {\n      return right.index === index || right.index === '*';\n    })\n    .filter(function (right) {\n      return right.collection === collection || right.collection === '*';\n    });\n\n  // Then, if at least one right allows the action, we return 'allowed'\n  if (filteredRights.some(function (item) { return item.value === 'allowed'; })) {\n    return 'allowed';\n  }\n  // If no right allows the action, we check for conditionals.\n  if (filteredRights.some(function (item) { return item.value === 'conditional'; })) {\n    return 'conditional';\n  }\n  // Otherwise we return 'denied'.\n  return 'denied';\n};\n\n\n/**\n * Gets the rights array of a given user.\n *\n * @param {string} userId The id of the user.\n * @param {object|responseCallback} [options] - (optional) arguments\n * @param {function} cb The callback containing the normalized array of rights.\n */\nKuzzleSecurity.prototype.getUserRights = function (userId, options, cb) {\n  var\n    data = {_id: userId},\n    self = this;\n\n  if (!userId || typeof userId !== 'string') {\n    throw new Error('userId parameter is mandatory for getUserRights function');\n  }\n\n  if (!cb && typeof options === 'function') {\n    cb = options;\n    options = null;\n  }\n\n  self.kuzzle.callbackRequired('Kuzzle.getUserRights', cb);\n\n  this.kuzzle.query(this.buildQueryArgs('getUserRights'), data, options, cb && function (err, res) {\n    cb(err, err ? undefined : res.result.hits);\n  });\n};\n\nmodule.exports = KuzzleSecurity;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/security/kuzzleSecurity.js\n ** module id = 15\n ** module chunks = 0\n **/","\nvar rng;\n\nvar crypto = global.crypto || global.msCrypto; // for IE 11\nif (crypto && crypto.getRandomValues) {\n  // WHATWG crypto-based RNG - http://wiki.whatwg.org/wiki/Crypto\n  // Moderately fast, high quality\n  var _rnds8 = new Uint8Array(16);\n  rng = function whatwgRNG() {\n    crypto.getRandomValues(_rnds8);\n    return _rnds8;\n  };\n}\n\nif (!rng) {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var  _rnds = new Array(16);\n  rng = function() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      _rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return _rnds;\n  };\n}\n\nmodule.exports = rng;\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/uuid/lib/rng-browser.js\n ** module id = 16\n ** module chunks = 0\n **/"],"sourceRoot":""}